{"version":3,"file":"job-detail-app.js","sources":["../../src/job-detail-app.js"],"sourcesContent":["/**\n * Professional Job Detail Application\n * Real-time job monitoring with live progress updates, timeline, and logs\n */\n\nimport APIService from './services/APIService.js';\nimport RealtimeService from './services/RealtimeService.js';\n\nexport class JobDetailApp {\n    constructor() {\n        this.jobId = this.extractJobIdFromURL();\n        this.jobData = null;\n        this.refreshInterval = null;\n        this.logUpdateInterval = null;\n        this.autoScroll = true;\n        this.isInitialized = false;\n        this.lastRefreshTime = 0; // Track last refresh for smart intervals\n        this.jobSSE = null; // Job-specific SSE connection\n        this.currentActiveStep = null; // Track currently active step from webhooks\n\n        // Timeline steps for video generation process - MATCHES ACTUAL WORKFLOW.PY\n        this.processSteps = [\n            { id: 'database_extraction', name: 'Database Extraction', description: 'Extracting movies from database' },\n            { id: 'script_generation', name: 'Script Generation', description: 'Generating AI scripts for content' },\n            {\n                id: 'asset_preparation',\n                name: 'Asset Preparation',\n                description: 'Creating enhanced posters and movie clips'\n            },\n            { id: 'heygen_creation', name: 'HeyGen Video Creation', description: 'Generating AI avatar videos' },\n            { id: 'heygen_processing', name: 'HeyGen Processing', description: 'Waiting for video completion' },\n            {\n                id: 'scroll_generation',\n                name: 'Scroll Video Generation',\n                description: 'Creating StreamGank scroll overlay'\n            },\n            { id: 'creatomate_assembly', name: 'Creatomate Assembly', description: 'Creating final video' }\n        ];\n    }\n\n    /**\n     * Initialize the application\n     */\n    async initialize() {\n        try {\n            console.log('üé¨ Initializing Professional Job Detail App...');\n\n            if (!this.jobId) {\n                this.showError('Invalid job ID in URL');\n                return;\n            }\n\n            // Set up event listeners\n            this.setupEventListeners();\n\n            // Load initial job data\n            await this.loadJobData();\n\n            // Start real-time updates\n            this.startRealTimeUpdates();\n\n            // Show main content\n            this.showMainContent();\n\n            console.log(`‚úÖ Job Detail App initialized for job: ${this.jobId}`);\n            this.isInitialized = true;\n        } catch (error) {\n            console.error('‚ùå Failed to initialize Job Detail App:', error);\n            this.showError(`Failed to load job: ${error.message}`);\n        }\n    }\n\n    /**\n     * Extract job ID from current URL\n     */\n    extractJobIdFromURL() {\n        const pathParts = window.location.pathname.split('/');\n        const jobIndex = pathParts.indexOf('job');\n        return jobIndex !== -1 && pathParts[jobIndex + 1] ? pathParts[jobIndex + 1] : null;\n    }\n\n    /**\n     * Set up event listeners\n     */\n    setupEventListeners() {\n        // Back button\n        document.getElementById('back-btn')?.addEventListener('click', () => {\n            window.history.back();\n        });\n\n        // Refresh button\n        document.getElementById('refresh-btn')?.addEventListener('click', () => {\n            this.refreshJobData();\n        });\n\n        // Clear logs button\n        document.getElementById('clear-logs-btn')?.addEventListener('click', () => {\n            this.clearLogs();\n        });\n\n        // Creatomate section event listeners\n        this.setupCreatomateEventListeners();\n\n        // Auto-scroll toggle\n        document.getElementById('auto-scroll-btn')?.addEventListener('click', (e) => {\n            this.toggleAutoScroll(e.target);\n        });\n\n        // Real-time service events\n        RealtimeService.addEventListener('jobUpdate', (event) => {\n            if (event.detail.jobId === this.jobId) {\n                this.handleJobUpdate(event.detail);\n            }\n        });\n\n        RealtimeService.addEventListener('jobLog', (event) => {\n            if (event.detail.jobId === this.jobId) {\n                // Log functionality removed\n            }\n        });\n    }\n\n    /**\n     * Set up event listeners for Creatomate section buttons\n     */\n    setupCreatomateEventListeners() {\n        // Use event delegation to handle dynamically created buttons\n        document.addEventListener('click', (e) => {\n            // Refresh Creatomate status button\n            if (e.target && (e.target.id === 'refresh-creatomate-btn' || e.target.closest('#refresh-creatomate-btn'))) {\n                e.preventDefault();\n                console.log('üîÑ Manual refresh button clicked - checking Creatomate status');\n                this.checkCreatomateStatusAutomatically();\n            }\n\n            // Download video button\n            if (e.target && (e.target.id === 'download-video-btn' || e.target.closest('#download-video-btn'))) {\n                e.preventDefault();\n                this.downloadVideo();\n            }\n\n            // Copy video URL button\n            if (e.target && (e.target.id === 'copy-video-url-btn' || e.target.closest('#copy-video-url-btn'))) {\n                e.preventDefault();\n                this.copyVideoUrlFromCreatomate();\n            }\n\n            // Fullscreen preview button\n            if (e.target && (e.target.id === 'preview-fullscreen-btn' || e.target.closest('#preview-fullscreen-btn'))) {\n                e.preventDefault();\n                this.previewFullscreen();\n            }\n\n            // Retry button for errors\n            if (e.target && (e.target.id === 'retry-creatomate-btn' || e.target.closest('#retry-creatomate-btn'))) {\n                e.preventDefault();\n                this.checkCreatomateStatusAutomatically();\n            }\n        });\n    }\n\n    /**\n     * Load job data from API\n     */\n    async loadJobData() {\n        try {\n            console.log(`üì° Loading job data for: ${this.jobId}`);\n\n            const response = await APIService.getJobStatus(this.jobId);\n\n            if (!response.success || !response.job) {\n                throw new Error('Job not found');\n            }\n\n            this.jobData = response.job;\n            this.lastRefreshTime = Date.now(); // Initialize refresh tracking\n\n            // NEW: Load persistent logs to determine current active step on page reload\n            await this.loadCurrentActiveStepFromLogs();\n\n            this.updateUI();\n\n            // Add page unload cleanup for SSE connections\n            window.addEventListener('beforeunload', () => {\n                this.closeJobSSE();\n            });\n\n            console.log('‚úÖ Job data loaded successfully');\n\n            // üé¨ AUTO-START MONITORING: Check if job needs Creatomate monitoring on page load\n            setTimeout(async () => {\n                if (\n                    this.jobData.creatomateId &&\n                    this.jobData.status !== 'rendering' &&\n                    this.jobData.status !== 'completed' &&\n                    !this.jobData.videoUrl\n                ) {\n                    console.log('üîç AUTO-START: Job has creatomateId but no monitoring - starting automatically...');\n                    await this.startCreatomateMonitoring();\n                }\n            }, 1000); // Small delay to ensure UI is loaded\n        } catch (error) {\n            console.error('‚ùå Failed to load job data:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Update the entire UI with current job data\n     */\n    updateUI() {\n        if (!this.jobData) return;\n\n        console.log('üîÑ Updating UI with job data:', this.jobData);\n\n        this.updateJobHeader();\n        this.updateProgressSection();\n        this.updateJobParameters();\n        this.updateTimeline();\n        this.updateQuickStats();\n        this.updateActionButtons();\n        this.updateErrorInfo();\n        this.updateVideoResult();\n        this.updateCreatomateSection(); // New: Handle Creatomate video result section\n    }\n\n    /**\n     * Update job header information\n     */\n    updateJobHeader() {\n        const jobIdElement = document.getElementById('job-id');\n        const statusBadge = document.getElementById('job-status-badge');\n        const overviewCard = document.getElementById('job-overview-card');\n\n        if (jobIdElement) {\n            jobIdElement.textContent = this.jobData.id || 'Unknown';\n        }\n\n        if (statusBadge) {\n            const status = this.jobData.status || 'unknown';\n            statusBadge.textContent = status.charAt(0).toUpperCase() + status.slice(1);\n            statusBadge.className = `badge ${this.getStatusBadgeClass(status)} ms-2`;\n        }\n\n        if (overviewCard) {\n            overviewCard.className = `card bg-dark status-card mb-4 status-${this.jobData.status}`;\n        }\n    }\n\n    /**\n     * Update progress section\n     */\n    updateProgressSection() {\n        const progressBar = document.getElementById('progress-bar');\n        const progressPercentage = document.getElementById('progress-percentage');\n        const currentStep = document.getElementById('current-step');\n\n        // PRODUCTION FIX: Always show 100% for completed jobs with video URL\n        let progress = this.jobData.progress || 0;\n\n        // Override progress for truly completed jobs\n        if (this.jobData.status === 'completed' && this.jobData.videoUrl) {\n            progress = 100;\n        }\n        // Show actual progress for completed jobs without video (still rendering)\n        else if (this.jobData.status === 'completed' && !this.jobData.videoUrl) {\n            // Keep the actual progress to show it's not truly done yet\n            progress = this.jobData.progress || 0;\n        }\n        // Also ensure failed/cancelled jobs show their actual progress, not stuck at partial\n        else if (this.jobData.status === 'failed' || this.jobData.status === 'cancelled') {\n            // Keep original progress for failed/cancelled to show where it stopped\n            progress = this.jobData.progress || 0;\n        }\n\n        if (progressBar) {\n            progressBar.style.width = `${progress}%`;\n            progressBar.className = `progress-bar ${this.getProgressBarClass(progress)} progress-bar-striped ${progress < 100 && ['active', 'processing', 'rendering'].includes(this.jobData.status) ? 'progress-bar-animated' : ''}`;\n        }\n\n        if (progressPercentage) {\n            progressPercentage.textContent = `${progress}%`;\n        }\n\n        if (currentStep) {\n            currentStep.textContent = this.jobData.currentStep || this.getStepFromProgress(progress);\n        }\n    }\n\n    /**\n     * Update job parameters display\n     */\n    updateJobParameters() {\n        const parametersContainer = document.getElementById('job-parameters');\n        if (!parametersContainer) return;\n\n        const params = [\n            { label: 'Country', value: this.jobData.country, icon: 'fas fa-globe' },\n            { label: 'Platform', value: this.jobData.platform, icon: 'fas fa-tv' },\n            { label: 'Genre', value: this.jobData.genre, icon: 'fas fa-tags' },\n            { label: 'Content Type', value: this.jobData.contentType, icon: 'fas fa-film' },\n            { label: 'Template', value: this.jobData.template || 'Default', icon: 'fas fa-palette' },\n            { label: 'Worker ID', value: this.jobData.workerId || 'Unassigned', icon: 'fas fa-user' }\n        ];\n\n        // Add Creatomate ID if available\n        if (this.jobData.creatomateId) {\n            params.push({\n                label: 'Creatomate ID',\n                value: this.jobData.creatomateId,\n                icon: 'fas fa-video'\n            });\n        }\n\n        parametersContainer.innerHTML = params\n            .map(\n                (param) => `\n            <div class=\"param-badge\">\n                <i class=\"${param.icon}\"></i>\n                <span class=\"label\">${param.label}:</span>\n                <span class=\"value\">${param.value || 'Unknown'}</span>\n            </div>\n        `\n            )\n            .join('');\n    }\n\n    /**\n     * Update process timeline\n     */\n    updateTimeline() {\n        const timelineContainer = document.getElementById('job-timeline');\n        if (!timelineContainer) return;\n\n        const currentProgress = this.jobData.progress || 0;\n        const status = this.jobData.status;\n\n        timelineContainer.innerHTML = this.processSteps\n            .map((step, index) => {\n                let iconClass = 'pending';\n                let timestamp = '';\n\n                // NEW: Use real-time webhook data to determine active step\n                const stepNumber = index + 1;\n\n                if (this.currentActiveStep === stepNumber) {\n                    // This step is currently active (received \"started\" webhook)\n                    iconClass = 'active';\n                } else if (status === 'failed' && this.getProgressForStep(step.id) <= currentProgress) {\n                    iconClass = 'failed';\n                } else if (this.getProgressForStep(step.id) < currentProgress) {\n                    // Step is completed (progress has moved past it)\n                    iconClass = 'completed';\n                    timestamp = this.getStepTimestamp(step.id);\n                } else {\n                    // Step is pending\n                    iconClass = 'pending';\n                }\n\n                return `\n                <div class=\"timeline-step ${iconClass}\">\n                    <div class=\"step-icon\">\n                        ${this.getStepIcon(step.id, iconClass)}\n                    </div>\n                    <div class=\"step-title\">${step.name}</div>\n                    <div class=\"step-status text-light\">${this.getStepStatusText(iconClass, timestamp)}</div>\n                </div>\n            `;\n            })\n            .join('');\n    }\n\n    /**\n     * Update quick stats\n     */\n    updateQuickStats() {\n        const duration = this.calculateDuration();\n        const steps = this.getCurrentStepNumber();\n        const worker = this.jobData.workerId ? this.jobData.workerId.slice(-4) : '--';\n        const priority = this.jobData.priority || 'Normal';\n\n        document.getElementById('stat-duration').textContent = duration;\n        document.getElementById('stat-steps').textContent = steps;\n        document.getElementById('stat-worker').textContent = worker;\n        document.getElementById('stat-priority').textContent = priority;\n    }\n\n    /**\n     * Update action buttons\n     */\n    updateActionButtons() {\n        const actionsContainer = document.getElementById('job-actions');\n        if (!actionsContainer) return;\n\n        const status = this.jobData.status;\n        let buttons = [];\n\n        if (status === 'pending' || status === 'active') {\n            buttons.push(`\n                <button class=\"btn btn-outline-warning\" onclick=\"jobDetailApp.cancelJob()\">\n                    <i class=\"fas fa-stop-circle me-1\"></i> Cancel Job\n                </button>\n            `);\n        }\n\n        if (status === 'failed') {\n            buttons.push(`\n                <button class=\"btn btn-outline-primary\" onclick=\"jobDetailApp.retryJob()\">\n                    <i class=\"fas fa-redo me-1\"></i> Retry Job\n                </button>\n            `);\n        }\n\n        // Removed Creatomate monitoring buttons - functionality moved to video section\n\n        // Clean interface - log management buttons removed\n\n        if (this.jobData.videoUrl) {\n            buttons.push(`\n                <a href=\"${this.jobData.videoUrl}\" target=\"_blank\" class=\"btn btn-success\">\n                    <i class=\"fas fa-play me-1\"></i> Watch Video\n                </a>\n                <a href=\"${this.jobData.videoUrl}\" download class=\"btn btn-outline-success\">\n                    <i class=\"fas fa-download me-1\"></i> Download\n                </a>\n            `);\n        }\n\n        // Removed duplicate \"Refresh Status\" button - functionality moved to video section header\n\n        actionsContainer.innerHTML = buttons.join('');\n    }\n\n    /**\n     * Update error information\n     */\n    updateErrorInfo() {\n        const errorCard = document.getElementById('error-card');\n        const errorContent = document.getElementById('error-content');\n\n        if (this.jobData.status === 'failed' && this.jobData.error) {\n            errorContent.innerHTML = `\n                <h6 class=\"text-danger mb-2\">\n                    <i class=\"fas fa-bug me-1\"></i> Error Details\n                </h6>\n                <div class=\"bg-dark p-3 rounded border border-danger\">\n                    <code class=\"text-light\">${this.jobData.error}</code>\n                </div>\n                ${\n                    this.jobData.errorTimestamp\n                        ? `\n                <small class=\"text-light d-block mt-2\">\n                    <i class=\"fas fa-clock me-1\"></i> \n                    Error occurred: ${new Date(this.jobData.errorTimestamp).toLocaleString()}\n                </small>\n                `\n                        : ''\n                }\n            `;\n            errorCard.classList.remove('d-none');\n        } else {\n            errorCard.classList.add('d-none');\n        }\n    }\n\n    /**\n     * Update video result section\n     */\n    updateVideoResult() {\n        const videoCard = document.getElementById('video-result-card');\n        const videoContent = document.getElementById('video-content');\n\n        // Check if elements exist (they were removed from HTML)\n        if (!videoCard || !videoContent) {\n            console.log('üìù Video result elements not found - functionality moved to video section');\n            return;\n        }\n\n        if (this.jobData.status === 'completed' && this.jobData.videoUrl) {\n            videoContent.innerHTML = `\n                <div class=\"mb-3\">\n                    <video controls class=\"w-100 rounded\" style=\"max-height: 300px;\">\n                        <source src=\"${this.jobData.videoUrl}\" type=\"video/mp4\">\n                        Your browser does not support the video tag.\n                    </video>\n                </div>\n                <div class=\"d-grid gap-2\">\n                    <a href=\"${this.jobData.videoUrl}\" target=\"_blank\" class=\"btn btn-success\">\n                        <i class=\"fas fa-external-link-alt me-1\"></i> Open in New Tab\n                    </a>\n                    <a href=\"${this.jobData.videoUrl}\" download class=\"btn btn-outline-light\">\n                        <i class=\"fas fa-download me-1\"></i> Download Video\n                    </a>\n                    <button class=\"btn btn-outline-info\" onclick=\"jobDetailApp.copyVideoUrl()\">\n                        <i class=\"fas fa-copy me-1\"></i> Copy URL\n                    </button>\n                </div>\n            `;\n            videoCard.classList.remove('d-none');\n        } else {\n            videoCard.classList.add('d-none');\n        }\n    }\n\n    /**\n     * Update Creatomate video result section\n     * Shows the new section below Process Timeline for Creatomate video status and result\n     */\n    updateCreatomateSection() {\n        const creatomateSection = document.getElementById('creatomate-section');\n        if (!creatomateSection) return;\n\n        // Show Creatomate section when Step 7 starts (85%+) or if we have creatomateId\n        // Don't wait for Step 7 to complete - show as soon as Creatomate processing begins\n        const step7Started = this.jobData.progress >= 85 || this.jobData.stepDetails?.step_7;\n        const workflowStepsComplete = step7Started || this.jobData.creatomateId;\n\n        console.log(\n            `üîç Creatomate section check - CreatomateId: ${this.jobData.creatomateId}, Progress: ${this.jobData.progress}, StepDetails: ${JSON.stringify(this.jobData.stepDetails)}, WorkflowComplete: ${workflowStepsComplete}`\n        );\n\n        if (workflowStepsComplete) {\n            console.log(\n                `üé¨ Step 7 started or completed, showing Creatomate section. ID: ${this.jobData.creatomateId || 'Pending...'}`\n            );\n\n            // Show the section\n            creatomateSection.classList.remove('d-none');\n\n            // Update Creatomate ID display\n            const creatomateIdElement = document.getElementById('creatomate-id');\n            if (creatomateIdElement) {\n                creatomateIdElement.textContent = this.jobData.creatomateId || 'Processing Step 7...';\n            }\n\n            // Only check status if we have creatomateId and video processing\n            if (this.jobData.creatomateId) {\n                // Check if we already have video URL or need to fetch it\n                if (this.jobData.videoUrl) {\n                    console.log('üé¨ Video URL already available, showing video result directly');\n                    this.showCreatomateVideoResult();\n                } else {\n                    console.log('üîç No video URL yet, checking Creatomate status automatically...');\n                    // Always check Creatomate status to get the latest video info\n                    this.checkCreatomateStatusAutomatically();\n                }\n            } else {\n                // Step 7 is running but no creatomateId yet - show preparation status\n                console.log('‚è≥ Step 7 in progress, waiting for Creatomate ID...');\n                this.showCreatomatePreparationStatus();\n            }\n        } else {\n            // Hide the section if conditions not met\n            creatomateSection.classList.add('d-none');\n            console.log('‚ùå Workflow not complete yet - hiding Creatomate section');\n        }\n    }\n\n    /**\n     * Automatically check Creatomate status when all steps are complete\n     */\n    async checkCreatomateStatusAutomatically() {\n        console.log('üîÑ Automatically checking Creatomate status for ID:', this.jobData.creatomateId);\n\n        // Show rendering status initially\n        this.showCreatomateRenderingStatus();\n\n        try {\n            const response = await fetch(`/api/status/${this.jobData.creatomateId}`);\n            const result = await response.json();\n\n            console.log('üì° Creatomate API response:', result);\n\n            if (result.success) {\n                // Update status badge\n                this.updateCreatomateStatusBadge(result.status);\n\n                if (result.status === 'succeeded' && result.videoUrl) {\n                    console.log('‚úÖ Video is ready!', result.videoUrl);\n\n                    // Update job data with video info\n                    this.jobData.videoUrl = result.videoUrl;\n                    this.jobData.creatomateStatus = result.status;\n\n                    // IMPORTANT: Update job status and progress when video is ready\n                    this.jobData.status = 'completed';\n                    this.jobData.progress = 100;\n                    this.jobData.currentStep = '‚úÖ Video creation completed';\n\n                    console.log('üíæ Updated job status to completed, progress to 100%');\n                    console.log('üíæ Updated jobData.videoUrl to:', this.jobData.videoUrl);\n\n                    // Update UI elements immediately\n                    this.updateJobHeader();\n                    this.updateProgressSection();\n\n                    console.log('üé¨ About to call showCreatomateVideoResult()');\n                    // Show video result\n                    this.showCreatomateVideoResult();\n                } else if (result.status === 'processing' || result.status === 'planned') {\n                    console.log('‚è≥ Video still rendering, status:', result.status);\n                    this.showCreatomateRenderingStatus(result.status);\n\n                    // Auto-refresh after 30 seconds\n                    setTimeout(() => {\n                        if (this.jobData.creatomateId && !this.jobData.videoUrl) {\n                            this.checkCreatomateStatusAutomatically();\n                        }\n                    }, 30000);\n                } else if (result.status === 'failed' || result.status === 'error') {\n                    console.log('‚ùå Video rendering failed');\n                    this.showCreatomateError('Video rendering failed');\n                } else {\n                    console.log('‚ùì Unknown status:', result.status);\n                    this.showCreatomateError(`Unknown status: ${result.status}`);\n                }\n            } else {\n                console.error('‚ùå Creatomate API error:', result.error);\n                this.showCreatomateError(result.error || 'Failed to check video status');\n            }\n        } catch (error) {\n            console.error('‚ùå Error checking Creatomate status:', error);\n            this.showCreatomateError(`Network error: ${error.message}`);\n        }\n    }\n\n    /**\n     * Show Creatomate video result when ready\n     */\n    showCreatomateVideoResult() {\n        console.log('üé¨ showCreatomateVideoResult called with videoUrl:', this.jobData.videoUrl);\n\n        // Hide other status views\n        document.getElementById('rendering-status')?.classList.add('d-none');\n        document.getElementById('error-status')?.classList.add('d-none');\n        document.getElementById('creatomate-progress')?.classList.add('d-none');\n\n        // Show video result\n        const videoResult = document.getElementById('video-result');\n        if (videoResult && this.jobData.videoUrl) {\n            console.log('üé¨ Video result div found, setting up player with URL:', this.jobData.videoUrl);\n\n            // CRITICAL: Show the video result div first\n            videoResult.classList.remove('d-none');\n            console.log('‚úÖ Video result div is now visible');\n\n            // Update video source and ensure it loads properly\n            const resultVideo = document.getElementById('result-video');\n\n            console.log('üîç Looking for video element with ID \"result-video\"');\n            console.log('üé¨ Video element found:', !!resultVideo);\n            console.log('üé¨ Current video URL in jobData:', this.jobData.videoUrl);\n\n            if (resultVideo) {\n                console.log('üé¨ Video element found, setting up player with URL:', this.jobData.videoUrl);\n\n                // Set up video player with multiple fallback options\n                this.setupVideoPlayer(resultVideo, this.jobData.videoUrl);\n            } else {\n                console.error('‚ùå Video element not found with ID \"result-video\"!');\n\n                // Debug: List all video elements on page\n                const allVideos = document.querySelectorAll('video');\n                console.log(\n                    'üîç Found',\n                    allVideos.length,\n                    'video elements on page:',\n                    Array.from(allVideos).map((v) => v.id || 'no-id')\n                );\n            }\n\n            // Update status badge to success\n            this.updateCreatomateStatusBadge('succeeded');\n\n            console.log('üéâ Video result displayed successfully!');\n        } else {\n            console.error('‚ùå Video result setup failed:', {\n                videoResult: !!videoResult,\n                videoUrl: this.jobData.videoUrl\n            });\n        }\n    }\n\n    /**\n     * Show preparation status while Step 7 is running but no creatomateId yet\n     */\n    showCreatomatePreparationStatus() {\n        // Hide other views\n        document.getElementById('video-result')?.classList.add('d-none');\n        document.getElementById('error-status')?.classList.add('d-none');\n\n        // Show progress indicator\n        const creatomateProgress = document.getElementById('creatomate-progress');\n        const renderingStatus = document.getElementById('rendering-status');\n\n        if (creatomateProgress) {\n            const statusText = document.getElementById('creatomate-status-text');\n            const progressBar = document.getElementById('creatomate-progress-bar');\n\n            if (statusText) {\n                statusText.textContent = 'Preparing video for rendering...';\n            }\n\n            if (progressBar) {\n                progressBar.style.width = '80%';\n                progressBar.classList.add('progress-bar-animated');\n            }\n\n            creatomateProgress.classList.remove('d-none');\n        }\n\n        if (renderingStatus) {\n            renderingStatus.classList.remove('d-none');\n        }\n\n        // Update status badge to show preparation\n        this.updateCreatomateStatusBadge('preparing');\n    }\n\n    /**\n     * Show rendering status while video is being processed\n     */\n    showCreatomateRenderingStatus(status = 'processing') {\n        // Hide other views\n        document.getElementById('video-result')?.classList.add('d-none');\n        document.getElementById('error-status')?.classList.add('d-none');\n\n        // Show progress indicator\n        const creatomateProgress = document.getElementById('creatomate-progress');\n        const renderingStatus = document.getElementById('rendering-status');\n\n        if (creatomateProgress) {\n            const statusText = document.getElementById('creatomate-status-text');\n            const progressBar = document.getElementById('creatomate-progress-bar');\n\n            if (statusText) {\n                const statusMessages = {\n                    planned: 'Video queued for processing...',\n                    processing: 'Video is being rendered...',\n                    rendering: 'Video is being rendered...',\n                    waiting: 'Video is being rendered...',\n                    transcribing: 'Video is being rendered...'\n                };\n                statusText.textContent = statusMessages[status] || 'Checking video status...';\n            }\n\n            if (progressBar) {\n                // Show specific progress based on status\n                const progressMap = {\n                    planned: '85%',\n                    waiting: '87%',\n                    transcribing: '88%',\n                    rendering: '90%',\n                    processing: '75%'\n                };\n                progressBar.style.width = progressMap[status] || '25%';\n                progressBar.classList.add('progress-bar-animated');\n            }\n\n            creatomateProgress.classList.remove('d-none');\n        }\n\n        if (renderingStatus) {\n            renderingStatus.classList.remove('d-none');\n        }\n    }\n\n    /**\n     * Show error status for Creatomate failures\n     */\n    showCreatomateError(errorMessage) {\n        // Hide other views\n        document.getElementById('video-result')?.classList.add('d-none');\n        document.getElementById('rendering-status')?.classList.add('d-none');\n        document.getElementById('creatomate-progress')?.classList.add('d-none');\n\n        // Show error status\n        const errorStatus = document.getElementById('error-status');\n        const errorMessageElement = document.getElementById('error-message');\n\n        if (errorStatus) {\n            if (errorMessageElement) {\n                errorMessageElement.textContent = errorMessage || 'An error occurred while processing the video';\n            }\n            errorStatus.classList.remove('d-none');\n        }\n\n        // Update status badge to failed\n        this.updateCreatomateStatusBadge('failed');\n    }\n\n    /**\n     * Update Creatomate status badge\n     */\n    updateCreatomateStatusBadge(status) {\n        const badge = document.getElementById('creatomate-status-badge');\n        if (badge) {\n            const statusMap = {\n                succeeded: { text: 'Ready', class: 'bg-success' },\n                processing: { text: 'Rendering', class: 'bg-warning' },\n                planned: { text: 'Queued', class: 'bg-info' },\n                waiting: { text: 'Rendering', class: 'bg-warning' },\n                transcribing: { text: 'Rendering', class: 'bg-warning' },\n                rendering: { text: 'Rendering', class: 'bg-warning' },\n                preparing: { text: 'Preparing', class: 'bg-primary' },\n                failed: { text: 'Failed', class: 'bg-danger' },\n                error: { text: 'Error', class: 'bg-danger' }\n            };\n\n            const statusInfo = statusMap[status] || { text: status, class: 'bg-secondary' };\n            badge.textContent = statusInfo.text;\n            badge.className = `badge ${statusInfo.class} ms-2 fs-6`;\n        }\n    }\n\n    /**\n     * Download video from Creatomate result section\n     */\n    downloadVideo() {\n        if (this.jobData.videoUrl) {\n            console.log('üì• Downloading video from:', this.jobData.videoUrl);\n\n            // Create a temporary download link\n            const link = document.createElement('a');\n            link.href = this.jobData.videoUrl;\n            link.download = `streamgank_video_${this.jobData.id || 'unknown'}.mp4`;\n            link.target = '_blank';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n\n            console.log('‚úÖ Download initiated');\n        } else {\n            console.error('‚ùå No video URL available for download');\n        }\n    }\n\n    /**\n     * Copy video URL to clipboard from Creatomate section\n     */\n    async copyVideoUrlFromCreatomate() {\n        if (this.jobData.videoUrl) {\n            try {\n                await navigator.clipboard.writeText(this.jobData.videoUrl);\n                console.log('üìã Video URL copied to clipboard');\n\n                // Provide user feedback\n                const button = document.getElementById('copy-video-url-btn');\n                if (button) {\n                    const originalText = button.innerHTML;\n                    button.innerHTML = '<i class=\"fas fa-check me-1\"></i>Copied!';\n                    button.classList.add('btn-success');\n                    button.classList.remove('btn-outline-info');\n\n                    setTimeout(() => {\n                        button.innerHTML = originalText;\n                        button.classList.remove('btn-success');\n                        button.classList.add('btn-outline-info');\n                    }, 2000);\n                }\n            } catch (error) {\n                console.error('‚ùå Failed to copy URL:', error);\n                // Fallback for older browsers\n                this.fallbackCopyToClipboard(this.jobData.videoUrl);\n            }\n        } else {\n            console.error('‚ùå No video URL available to copy');\n        }\n    }\n\n    /**\n     * Open video in fullscreen preview\n     */\n    previewFullscreen() {\n        if (this.jobData.videoUrl) {\n            console.log('üñ•Ô∏è Opening fullscreen preview');\n\n            const video = document.getElementById('result-video');\n            if (video) {\n                if (video.requestFullscreen) {\n                    video.requestFullscreen();\n                } else if (video.webkitRequestFullscreen) {\n                    video.webkitRequestFullscreen();\n                } else if (video.msRequestFullscreen) {\n                    video.msRequestFullscreen();\n                }\n\n                // Start playing the video in fullscreen\n                video.play().catch((e) => console.warn('Video autoplay prevented:', e));\n            }\n        } else {\n            console.error('‚ùå No video available for preview');\n        }\n    }\n\n    /**\n     * Fallback method to copy text to clipboard for older browsers\n     */\n    fallbackCopyToClipboard(text) {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n\n        try {\n            const successful = document.execCommand('copy');\n            if (successful) {\n                console.log('üìã URL copied using fallback method');\n            }\n        } catch (err) {\n            console.error('‚ùå Fallback copy failed:', err);\n        }\n\n        document.body.removeChild(textArea);\n    }\n\n    /**\n     * Setup simple video player using <source> element\n     */\n    setupVideoPlayer(videoElement, videoUrl) {\n        console.log('üé¨ Setting up video player with <source> element for:', videoUrl);\n        console.log('üé¨ Video element found:', !!videoElement);\n        console.log('üé¨ Video URL provided:', videoUrl);\n\n        if (!videoElement) {\n            console.error('‚ùå Video element is null or undefined!');\n            return;\n        }\n\n        if (!videoUrl) {\n            console.error('‚ùå Video URL is null or undefined!');\n            return;\n        }\n\n        // Show loading indicator\n        const videoLoading = document.getElementById('video-loading');\n        if (videoLoading) {\n            videoLoading.style.display = 'block';\n            console.log('üîÑ Video loading indicator shown');\n        } else {\n            console.warn('‚ö†Ô∏è Video loading indicator not found');\n        }\n\n        // Show video element\n        videoElement.classList.remove('d-none');\n\n        // Find and set the source element\n        const videoSource = document.getElementById('video-source');\n        if (videoSource) {\n            videoSource.src = videoUrl;\n            videoSource.type = 'video/mp4';\n            console.log('üé¨ Video source element found and src set to:', videoSource.src);\n            console.log('üé¨ Video source element type:', videoSource.type);\n        } else {\n            console.warn('‚ö†Ô∏è Video source element not found, setting video src directly as fallback');\n            videoElement.src = videoUrl;\n        }\n\n        // Also set video element src as backup (both methods)\n        videoElement.src = videoUrl;\n        console.log('üé¨ Video element src also set to:', videoElement.src);\n\n        // Add event listeners for debugging and UI updates\n        videoElement.addEventListener('loadstart', () => {\n            console.log('üîÑ Video loading started');\n        });\n\n        videoElement.addEventListener('loadedmetadata', () => {\n            console.log('‚úÖ Video metadata loaded');\n            console.log('üìê Video dimensions:', videoElement.videoWidth, 'x', videoElement.videoHeight);\n            console.log('‚è±Ô∏è Video duration:', videoElement.duration, 'seconds');\n\n            // Hide loading indicator\n            if (videoLoading) {\n                videoLoading.style.display = 'none';\n            }\n        });\n\n        videoElement.addEventListener('canplay', () => {\n            console.log('‚úÖ Video can start playing - success!');\n            console.log('üìä Video ready state:', videoElement.readyState);\n\n            // Hide loading indicator\n            if (videoLoading) {\n                videoLoading.style.display = 'none';\n            }\n        });\n\n        videoElement.addEventListener('error', (e) => {\n            console.error('‚ùå Video loading error:', e);\n            console.error('‚ùå Video error code:', videoElement.error?.code);\n            console.error('‚ùå Video error message:', videoElement.error?.message);\n\n            // Hide loading indicator and show error\n            if (videoLoading) {\n                videoLoading.innerHTML = `\n                    <div class=\"text-center\">\n                        <i class=\"fas fa-exclamation-triangle text-warning mb-2\" style=\"font-size: 2rem;\"></i>\n                        <div class=\"text-light small\">Error loading video</div>\n                        <div class=\"text-light small\">Code: ${videoElement.error?.code}</div>\n                    </div>\n                `;\n            }\n        });\n\n        videoElement.addEventListener('progress', () => {\n            console.log(\n                'üìä Video loading progress:',\n                videoElement.buffered.length > 0\n                    ? Math.round((videoElement.buffered.end(0) / videoElement.duration) * 100) + '%'\n                    : '0%'\n            );\n        });\n\n        // Force reload the video with source element\n        videoElement.load();\n\n        console.log('üé¨ Video player configured with loading indicator and enhanced debugging');\n        console.log('üîç Video element details:', {\n            src: videoElement.src,\n            currentSrc: videoElement.currentSrc,\n            readyState: videoElement.readyState,\n            networkState: videoElement.networkState\n        });\n    }\n\n    /**\n     * Start real-time updates\n     */\n    startRealTimeUpdates() {\n        console.log('üîÑ Starting webhook-optimized updates (reduced polling)...');\n\n        // Initialize job-specific real-time updates\n        this.initializeJobSSE();\n\n        // WEBHOOK-OPTIMIZED: Much longer intervals since webhooks provide real-time updates\n        this.refreshInterval = setInterval(() => {\n            // WEBHOOK-ONLY: Minimal polling - webhooks handle ALL real-time updates\n            // Only check for final video URL on completed jobs\n\n            if (['completed', 'rendering'].includes(this.jobData?.status) && !this.jobData?.videoUrl) {\n                // Check for final video URL once job is completed\n                this.refreshJobData();\n                console.log('üîÑ Checking for final video URL');\n            } else if (this.jobData?.videoUrl || ['failed', 'cancelled'].includes(this.jobData?.status)) {\n                // Job fully complete or failed - stop all polling\n                console.log('üõë Job complete, stopping all polling');\n                this.stopRealTimeUpdates();\n                return;\n            }\n\n            // No polling for active jobs - webhooks provide all updates\n        }, 600000); // Check every 10 minutes ONLY for final video URL\n\n        // Start fetching real job logs from the server (also reduced frequency)\n        this.startLogUpdates();\n    }\n\n    /**\n     * Stop real-time updates when job is finished\n     */\n    stopRealTimeUpdates() {\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n            this.refreshInterval = null;\n            console.log('üõë Stopped job refresh interval');\n        }\n\n        if (this.logUpdateInterval) {\n            clearInterval(this.logUpdateInterval);\n            this.logUpdateInterval = null;\n            console.log('üõë Stopped log update interval');\n        }\n\n        // Close job-specific SSE connection\n        this.closeJobSSE();\n    }\n\n    /**\n     * Load essential logs once - webhooks handle real-time updates\n     */\n    startLogUpdates() {\n        // Initial log fetch only - no more polling spam\n        console.log('üìã Loading initial logs - webhooks provide real-time updates');\n        this.fetchRealLogs();\n\n        // NO POLLING INTERVAL - webhooks handle all real-time updates\n        // This eliminates request spam while maintaining real-time functionality through webhooks\n    }\n\n    /**\n     * Fetch real logs from server (persistent + in-memory)\n     */\n    async fetchRealLogs() {\n        try {\n            // First try to get persistent logs (survives server restarts)\n            let persistentLogs = [];\n            try {\n                const persistentResponse = await fetch(`/api/queue/job/${this.jobId}/logs/persistent?limit=500`);\n                if (persistentResponse.ok) {\n                    const persistentResult = await persistentResponse.json();\n                    if (persistentResult.success && persistentResult.data.logs) {\n                        persistentLogs = persistentResult.data.logs;\n                        console.log(`üìã Loaded ${persistentLogs.length} persistent logs for job ${this.jobId}`);\n                    }\n                }\n            } catch (persistentError) {\n                console.warn('‚ö†Ô∏è Persistent logs not available:', persistentError.message);\n            }\n\n            // Then get in-memory logs (real-time updates)\n            let memoryLogs = [];\n            try {\n                const memoryResponse = await fetch(`/api/queue/job/${this.jobId}/logs`);\n                if (memoryResponse.ok) {\n                    const memoryResult = await memoryResponse.json();\n                    if (memoryResult.success && memoryResult.data.logs) {\n                        memoryLogs = memoryResult.data.logs;\n                        console.log(`üìã Loaded ${memoryLogs.length} in-memory logs for job ${this.jobId}`);\n                    }\n                }\n            } catch (memoryError) {\n                console.warn('‚ö†Ô∏è In-memory logs not available:', memoryError.message);\n            }\n\n            // Combine and filter for essential logs only (clean timeline view)\n            const allLogs = this.combineLogs(persistentLogs, memoryLogs);\n\n            // Filter to show only essential workflow messages (CLEAN TIMELINE)\n            const essentialLogs = allLogs.filter((log) => {\n                const message = log.message.toLowerCase();\n                return (\n                    message.includes('workflow initiated') ||\n                    // CLEAN TIMELINE: Only show \"completed\" steps, NOT \"started\"\n                    (message.includes('step') && message.includes('completed')) ||\n                    message.includes('workflow completed') ||\n                    message.includes('video is ready') ||\n                    message.includes('error') ||\n                    message.includes('failed')\n                );\n            });\n\n            if (essentialLogs.length > 0) {\n                this.updateLogDisplay(essentialLogs);\n            } else {\n                // Show clean message - focus on timeline\n                // Log functionality removed - showing timeline only\n            }\n        } catch (error) {\n            console.error('‚ùå Failed to fetch job logs:', error);\n            // Log functionality removed - errors only in console\n        }\n    }\n\n    /**\n     * Combine persistent and in-memory logs, removing duplicates\n     */\n    combineLogs(persistentLogs, memoryLogs) {\n        const logMap = new Map();\n\n        // Add persistent logs first (they're the authoritative source)\n        persistentLogs.forEach((log) => {\n            const key = `${log.timestamp}_${log.message}_${log.level}`;\n            logMap.set(key, {\n                ...log,\n                source: 'persistent',\n                type: log.level || 'info' // Convert level to type for compatibility\n            });\n        });\n\n        // Add memory logs that aren't already in persistent logs\n        memoryLogs.forEach((log) => {\n            const key = `${log.timestamp}_${log.message}_${log.type}`;\n            if (!logMap.has(key)) {\n                logMap.set(key, {\n                    ...log,\n                    source: 'memory'\n                });\n            }\n        });\n\n        // Convert back to array and sort by timestamp (newest first)\n        return Array.from(logMap.values()).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    }\n\n    /**\n     * Update log display with real logs from server\n     */\n    updateLogDisplay(logs) {\n        const logViewer = document.getElementById('log-viewer');\n        if (!logViewer) return;\n\n        // Clear existing logs first\n        logViewer.innerHTML = '';\n\n        if (logs.length === 0) {\n            logViewer.innerHTML = `\n                <div class=\"log-entry level-info\">\n                    <div class=\"log-icon\">\n                        <i class=\"fas fa-info-circle\"></i>\n                    </div>\n                    <div class=\"log-timestamp\">--:--:--</div>\n                    <div class=\"log-content\">\n                        <strong>No logs available yet</strong><br>\n                        Job processing hasn't started or logs are still being initialized.\n                    </div>\n                </div>\n            `;\n            return;\n        }\n\n        // Clean timeline view - no source indicators needed\n\n        // Add all logs\n        logs.forEach((logData) => {\n            // Log functionality removed\n        });\n\n        // Auto-scroll to bottom if enabled\n        if (this.autoScroll) {\n            logViewer.scrollTop = logViewer.scrollHeight;\n        }\n    }\n\n    /**\n     * Get icon for log level\n     */\n    getLogIcon(level) {\n        const icons = {\n            info: 'fas fa-info-circle',\n            success: 'fas fa-check-circle',\n            warning: 'fas fa-exclamation-triangle',\n            error: 'fas fa-times-circle',\n            step: 'fas fa-cog fa-spin',\n            debug: 'fas fa-bug'\n        };\n        return icons[level] || icons.info;\n    }\n\n    /**\n     * Format log message for better readability\n     */\n    formatLogMessage(message) {\n        if (!message || typeof message !== 'string') return '';\n\n        // Clean up the message\n        let formattedMessage = message\n            .trim()\n            .replace(/\\r\\n/g, '\\n') // Normalize line endings\n            .replace(/\\r/g, '\\n') // Handle remaining \\r\n            .replace(/\\n{3,}/g, '\\n\\n'); // Limit consecutive newlines\n\n        // Highlight important patterns\n        formattedMessage = formattedMessage\n            // Highlight file paths and URLs\n            .replace(/(\\/[^\\s]+\\.(py|js|json|mp4|jpg|png|webp))/g, '<code>$1</code>')\n            // Highlight URLs\n            .replace(/(https?:\\/\\/[^\\s]+)/g, '<code>$1</code>')\n            // Highlight step indicators\n            .replace(/Step (\\d+)\\/(\\d+):/g, '<strong>Step $1/$2:</strong>')\n            // Highlight success indicators\n            .replace(/(‚úÖ|‚úì|SUCCESS|COMPLETED|DONE)/gi, '<strong style=\"color: #3fb950;\">$1</strong>')\n            // Highlight error indicators\n            .replace(/(‚ùå|‚úó|ERROR|FAILED|FAILURE)/gi, '<strong style=\"color: #f85149;\">$1</strong>')\n            // Highlight warning indicators\n            .replace(/(‚ö†Ô∏è|WARNING|WARN)/gi, '<strong style=\"color: #d29922;\">$1</strong>')\n            // Highlight processing indicators\n            .replace(/(üé¨|üìù|üé®|ü§ñ|‚è≥|üì±)/g, '<strong>$1</strong>')\n            // Highlight file sizes and durations\n            .replace(/(\\d+(?:\\.\\d+)?\\s*(?:MB|KB|GB|s|ms|minutes?|seconds?))/gi, '<strong>$1</strong>')\n            // Highlight percentages\n            .replace(/(\\d+(?:\\.\\d+)?%)/g, '<strong>$1</strong>');\n\n        return formattedMessage;\n    }\n\n    /**\n     * Refresh job data\n     */\n    async refreshJobData() {\n        try {\n            console.log('üîÑ Refreshing job data...');\n\n            // Store previous status to detect completion\n            const previousStatus = this.jobData?.status;\n\n            await this.loadJobData();\n            this.lastRefreshTime = Date.now(); // Track refresh time for smart intervals\n            console.log('‚úÖ Job data refreshed');\n\n            // Stop real-time updates if job just completed with video URL\n            if (\n                previousStatus &&\n                ['active', 'pending', 'processing', 'rendering'].includes(previousStatus) &&\n                this.jobData?.status === 'completed' &&\n                this.jobData?.videoUrl\n            ) {\n                console.log('üèÅ Job completed during refresh, stopping real-time updates');\n                this.stopRealTimeUpdates();\n            }\n        } catch (error) {\n            console.error('‚ùå Failed to refresh job data:', error);\n            // Log functionality removed - errors only in console\n        }\n    }\n\n    /**\n     * Handle job update from real-time service\n     */\n    handleJobUpdate(updateData) {\n        console.log('üì° Received job update:', updateData);\n\n        // Store previous status to detect completion\n        const previousStatus = this.jobData?.status;\n\n        // Merge update data with current job data\n        this.jobData = { ...this.jobData, ...updateData };\n\n        // Update UI\n        this.updateUI();\n\n        // Stop real-time updates if job just completed with video\n        if (\n            previousStatus &&\n            ['active', 'pending', 'processing', 'rendering'].includes(previousStatus) &&\n            this.jobData.status === 'completed' &&\n            this.jobData.videoUrl\n        ) {\n            console.log('üèÅ Job completed with video, stopping real-time updates');\n            this.stopRealTimeUpdates();\n        }\n\n        // Add log entry about the update\n        // Log functionality removed - status updates shown in timeline\n    }\n\n    /**\n     * Show main content and hide loading\n     */\n    showMainContent() {\n        document.getElementById('loading-state').classList.add('d-none');\n        document.getElementById('main-content').classList.remove('d-none');\n    }\n\n    /**\n     * Show error state\n     */\n    showError(message) {\n        document.getElementById('loading-state').classList.add('d-none');\n        document.getElementById('main-content').classList.add('d-none');\n        document.getElementById('error-state').classList.remove('d-none');\n        document.getElementById('error-message').textContent = message;\n    }\n\n    /**\n     * Clear log viewer\n     */\n    clearLogs() {\n        const logViewer = document.getElementById('log-viewer');\n        if (logViewer) {\n            const timestamp = new Date().toLocaleTimeString('en-US', {\n                hour12: false,\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit'\n            });\n\n            logViewer.innerHTML = `\n                <div class=\"log-entry level-info\">\n                    <div class=\"log-icon\">\n                        <i class=\"fas fa-broom\"></i>\n                    </div>\n                    <div class=\"log-timestamp\">${timestamp}</div>\n                    <div class=\"log-content\">\n                        <strong>Log viewer cleared</strong><br>\n                        Previous log entries have been removed from display.\n                    </div>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * Toggle auto-scroll\n     */\n    toggleAutoScroll(button) {\n        this.autoScroll = !this.autoScroll;\n        button.classList.toggle('active', this.autoScroll);\n\n        if (this.autoScroll) {\n            const logViewer = document.getElementById('log-viewer');\n            if (logViewer) {\n                logViewer.scrollTop = logViewer.scrollHeight;\n            }\n        }\n    }\n\n    /**\n     * Cancel job\n     */\n    async cancelJob() {\n        if (confirm('Are you sure you want to cancel this job?')) {\n            try {\n                const response = await APIService.cancelJob(this.jobId);\n                if (response.success) {\n                    // Job cancellation logged in console only\n                    await this.refreshJobData();\n                } else {\n                    throw new Error(response.message || 'Failed to cancel job');\n                }\n            } catch (error) {\n                console.error('‚ùå Failed to cancel job:', error);\n                // Error logged in console only\n            }\n        }\n    }\n\n    /**\n     * Retry job\n     */\n    async retryJob() {\n        if (confirm('Are you sure you want to retry this job?')) {\n            try {\n                const response = await APIService.retryJob(this.jobId);\n                if (response.success) {\n                    // Job retry logged in console only\n                    await this.refreshJobData();\n                } else {\n                    throw new Error(response.message || 'Failed to retry job');\n                }\n            } catch (error) {\n                console.error('‚ùå Failed to retry job:', error);\n                // Error logged in console only\n            }\n        }\n    }\n\n    /**\n     * Load current active step from persistent logs (for page reload)\n     */\n    async loadCurrentActiveStepFromLogs() {\n        try {\n            console.log(`üìã Loading persistent logs to determine current active step for ${this.jobId}`);\n\n            const response = await fetch(`/api/queue/job/${this.jobId}/logs/persistent?limit=50`);\n            if (!response.ok) {\n                console.warn('‚ö†Ô∏è Could not load persistent logs, using job data only');\n                return;\n            }\n\n            const result = await response.json();\n            if (!result.success || !result.data.logs) {\n                console.warn('‚ö†Ô∏è No persistent logs available');\n                return;\n            }\n\n            const logs = result.data.logs;\n            console.log(`üìã Loaded ${logs.length} persistent log entries`);\n\n            // Find the most recent \"started\" event that doesn't have a corresponding \"completed\" event\n            let currentActiveStep = null;\n            const stepStatus = {}; // Track started/completed status for each step\n\n            // Process logs in chronological order to track step states\n            logs.forEach((log) => {\n                if (log.event_type === 'webhook_received' && log.details) {\n                    const step_number = log.details.step_number;\n                    const status = log.details.status;\n\n                    if (step_number >= 1 && step_number <= 7) {\n                        if (status === 'started') {\n                            stepStatus[step_number] = 'started';\n                            currentActiveStep = step_number; // This step is now active\n                        } else if (status === 'completed') {\n                            stepStatus[step_number] = 'completed';\n                            if (currentActiveStep === step_number) {\n                                currentActiveStep = null; // Step is no longer active\n                            }\n                        }\n                    }\n                }\n            });\n\n            // Set the current active step based on log analysis\n            this.currentActiveStep = currentActiveStep;\n\n            if (currentActiveStep) {\n                console.log(`üìç Determined from logs: Step ${currentActiveStep} is currently active`);\n            } else {\n                console.log(`üìç No active step found in logs - workflow may be complete or not started`);\n            }\n        } catch (error) {\n            console.error('‚ùå Error loading persistent logs:', error);\n        }\n    }\n\n    /**\n     * Initialize job-specific Server-Sent Events for real-time updates\n     */\n    initializeJobSSE() {\n        if (this.jobSSE) {\n            return; // Already initialized\n        }\n\n        console.log(`üì° Connecting to job-specific real-time updates for ${this.jobId}`);\n\n        try {\n            this.jobSSE = new EventSource(`/api/job/${this.jobId}/stream`);\n\n            this.jobSSE.onopen = () => {\n                console.log(`üì° Real-time connection established for job ${this.jobId}`);\n            };\n\n            this.jobSSE.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    this.handleJobSSEMessage(data);\n                } catch (error) {\n                    console.error('‚ùå Failed to parse job SSE message:', error);\n                }\n            };\n\n            this.jobSSE.onerror = (error) => {\n                console.warn(`‚ö†Ô∏è Job SSE connection error for ${this.jobId}:`, error);\n                // Reconnect after a delay\n                setTimeout(() => {\n                    if (this.jobSSE && this.jobSSE.readyState === EventSource.CLOSED) {\n                        console.log(`üîÑ Reconnecting job SSE for ${this.jobId}`);\n                        this.closeJobSSE();\n                        this.initializeJobSSE();\n                    }\n                }, 5000);\n            };\n        } catch (error) {\n            console.error(`‚ùå Failed to initialize job SSE for ${this.jobId}:`, error);\n        }\n    }\n\n    /**\n     * Handle job-specific SSE messages (real-time webhook updates)\n     */\n    handleJobSSEMessage(data) {\n        if (data.job_id !== this.jobId) {\n            return; // Not for this job\n        }\n\n        switch (data.type) {\n            case 'connected':\n                console.log(`‚úÖ Job ${this.jobId} real-time updates connected`);\n                break;\n\n            case 'step_update':\n                console.log(`üì° Real-time step update: Step ${data.step_number} ${data.status}`);\n                console.log(`   üîë Step Key: ${data.step_key || 'N/A'}`);\n                console.log(`   üìä Sequence: ${data.sequence || 'N/A'}`);\n                console.log(`   ‚úÖ Validated: ${data.validated || false}`);\n\n                // ‚úÖ FRONTEND VALIDATION: Check if update should be processed\n                if (!data.validated) {\n                    console.warn(`‚ö†Ô∏è REJECTED: Non-validated step update for ${data.step_number} ${data.status}`);\n                    break;\n                }\n\n                // Check sequence order to prevent processing old updates\n                const lastSequence = this.lastStepSequence || 0;\n                const currentSequence = data.sequence || Date.now();\n\n                if (currentSequence < lastSequence) {\n                    console.warn(`‚ö†Ô∏è REJECTED: Out-of-order frontend update`);\n                    console.warn(`   Current: ${currentSequence}, Last: ${lastSequence}`);\n                    break;\n                }\n\n                // Update last sequence\n                this.lastStepSequence = currentSequence;\n\n                console.log(`‚úÖ FRONTEND VALIDATED: Processing step ${data.step_number} ${data.status}`);\n\n                // Update job data with real-time info\n                if (this.jobData) {\n                    // Handle both \"started\" and \"completed\" status\n                    if (data.status === 'started') {\n                        // Step is starting - track as currently active step\n                        this.currentActiveStep = data.step_number;\n                        this.jobData.currentStep = `Step ${data.step_number}/7: ${data.step_name} (Processing...)`;\n                        // ‚úÖ FIXED: Use backend progress calculation, don't override\n                        this.jobData.progress = data.progress || this.jobData.progress;\n                        console.log(\n                            `üìã Step ${data.step_number} started: ${data.step_name} (${this.jobData.progress}%)`\n                        );\n                    } else if (data.status === 'completed' || data.status === 'creatomate_ready') {\n                        // Step completed - no longer active, update progress\n                        if (this.currentActiveStep === data.step_number) {\n                            this.currentActiveStep = null; // Step no longer active\n                        }\n                        this.jobData.currentStep = `Step ${data.step_number}/7: ${data.step_name} ‚úÖ`;\n                        // ‚úÖ FIXED: Use backend progress calculation, don't override\n                        this.jobData.progress = data.progress || this.jobData.progress;\n                        console.log(\n                            `‚úÖ Step ${data.step_number} completed: ${data.step_name} (${this.jobData.progress}%)`\n                        );\n\n                        // üéØ FIX: When step 7 completes or creatomate_ready, extract Creatomate ID immediately\n                        if (data.step_number === 7 || data.status === 'creatomate_ready') {\n                            console.log(`üé¨ Step 7 ${data.status} - checking for immediate Creatomate ID...`);\n                            \n                            // üöÄ IMMEDIATE UPDATE: Check if creatomate_id is in the webhook details\n                            const creatomateId = data.details?.creatomate_id;\n                            if (creatomateId) {\n                                console.log(`üé¨ IMMEDIATE: Got Creatomate ID from Step 7 webhook: ${creatomateId}`);\n                                this.jobData.creatomateId = creatomateId;\n                                \n                                // Immediately update Creatomate section with the new ID\n                                this.updateCreatomateSection();\n                                \n                                // Start monitoring if not already started\n                                console.log('üöÄ Starting Creatomate monitoring with immediate ID...');\n                                setTimeout(() => {\n                                    this.startCreatomateMonitoring();\n                                }, 100);\n                            }\n                            setTimeout(async () => {\n                                try {\n                                    await this.refreshJobData();\n                                    console.log('üé¨ Job data refreshed after step 7 - triggering video display');\n\n                                    // üé¨ BACKUP CHECK: If job has creatomateId but status is not 'rendering', start monitoring\n                                    if (\n                                        this.jobData.creatomateId &&\n                                        this.jobData.status !== 'rendering' &&\n                                        !this.jobData.videoUrl\n                                    ) {\n                                        console.log(\n                                            'üîç BACKUP: Job has creatomateId but monitoring may not have started - triggering monitoring...'\n                                        );\n                                        await this.startCreatomateMonitoring();\n                                    }\n\n                                    this.updateUI(); // This will trigger updateCreatomateSection with fresh data\n                                } catch (error) {\n                                    console.error('‚ùå Failed to refresh job data after step 7:', error);\n                                }\n                            }, 2000); // Increased delay to 2 seconds to ensure webhook processing completes\n                        }\n                    }\n\n                    // Update UI immediately\n                    this.updateProgressSection();\n                    this.updateTimeline();\n                }\n                break;\n\n            case 'render_completed':\n                console.log('üé¨ INSTANT: Creatomate render completed via webhook!', data);\n\n                // Update job data immediately with video URL\n                if (this.jobData) {\n                    this.jobData.status = 'completed';\n                    this.jobData.progress = 100;\n                    this.jobData.currentStep = 'üéâ Video rendering completed successfully!';\n                    this.jobData.videoUrl = data.videoUrl;\n                    this.jobData.completedAt = data.timestamp;\n\n                    console.log('‚úÖ Job data updated with video URL:', data.videoUrl);\n\n                    // Update UI immediately to show video\n                    this.updateUI();\n                    this.showCreatomateVideoResult();\n\n                    // Stop all polling since video is ready\n                    this.stopRealTimeUpdates();\n\n                    console.log('üé¨ Video displayed instantly via webhook!');\n                }\n                break;\n\n            case 'render_failed':\n                console.log('‚ùå INSTANT: Creatomate render failed via webhook!', data);\n\n                // Update job data immediately with error\n                if (this.jobData) {\n                    this.jobData.status = 'failed';\n                    this.jobData.currentStep = `‚ùå Video rendering failed: ${data.error}`;\n                    this.jobData.error = data.error;\n\n                    console.log('‚ùå Job marked as failed:', data.error);\n\n                    // Update UI to show failure\n                    this.updateUI();\n\n                    // Stop polling\n                    this.stopRealTimeUpdates();\n                }\n                break;\n\n            case 'render_planned':\n                console.log('üìã REAL-TIME: Video queued for processing via webhook!', data);\n\n                // Update job data with queued status\n                if (this.jobData) {\n                    this.jobData.status = 'rendering';\n                    this.jobData.progress = 85;\n                    this.jobData.currentStep = 'üìã Video queued for processing...';\n\n                    console.log('üìã Video queued for processing');\n\n                    // Update UI to show queued status\n                    this.updateUI();\n                    this.updateProgressSection();\n\n                    // Update Creatomate section specifically\n                    this.updateCreatomateStatusBadge('planned');\n                    this.showCreatomateRenderingStatus('planned');\n                }\n                break;\n\n            case 'render_waiting':\n                console.log('‚è≥ REAL-TIME: Video waiting for processing via webhook!', data);\n\n                // Update job data with waiting status\n                if (this.jobData) {\n                    this.jobData.status = 'rendering';\n                    this.jobData.progress = 87;\n                    this.jobData.currentStep = '‚è≥ Video is being rendered...';\n\n                    console.log('‚è≥ Video is being rendered (waiting)');\n\n                    // Update UI to show waiting status\n                    this.updateUI();\n                    this.updateProgressSection();\n\n                    // Update Creatomate section specifically\n                    this.updateCreatomateStatusBadge('processing');\n                    this.showCreatomateRenderingStatus('processing');\n                }\n                break;\n\n            case 'render_transcribing':\n                console.log('üí¨ REAL-TIME: Video transcribing via webhook!', data);\n\n                // Update job data with transcribing status\n                if (this.jobData) {\n                    this.jobData.status = 'rendering';\n                    this.jobData.progress = 88;\n                    this.jobData.currentStep = 'üí¨ Video is being rendered...';\n\n                    console.log('üí¨ Video is being rendered (transcribing)');\n\n                    // Update UI to show transcribing status\n                    this.updateUI();\n                    this.updateProgressSection();\n\n                    // Update Creatomate section specifically\n                    this.updateCreatomateStatusBadge('processing');\n                    this.showCreatomateRenderingStatus('processing');\n                }\n                break;\n\n            case 'render_rendering':\n                console.log('üé¨ REAL-TIME: Video actively rendering via webhook!', data);\n\n                // Update job data with rendering status\n                if (this.jobData) {\n                    this.jobData.status = 'rendering';\n                    this.jobData.progress = 90;\n                    this.jobData.currentStep = 'üé¨ Video is being rendered...';\n\n                    console.log('üé¨ Video is being rendered (actively)');\n\n                    // Update UI to show active rendering status\n                    this.updateUI();\n                    this.updateProgressSection();\n\n                    // Update Creatomate section specifically\n                    this.updateCreatomateStatusBadge('processing');\n                    this.showCreatomateRenderingStatus('rendering');\n                }\n                break;\n\n            case 'heartbeat':\n                // Keep connection alive - no action needed\n                break;\n\n            default:\n                console.log(`üì° Job SSE message:`, data);\n        }\n    }\n\n    /**\n     * Close job-specific SSE connection\n     */\n    closeJobSSE() {\n        if (this.jobSSE) {\n            this.jobSSE.close();\n            this.jobSSE = null;\n            console.log(`üì° Closed job SSE connection for ${this.jobId}`);\n        }\n    }\n\n    /**\n     * Start Creatomate monitoring for the current job (backup mechanism)\n     */\n    async startCreatomateMonitoring() {\n        if (!this.jobData.creatomateId) {\n            console.error('‚ùå Cannot start Creatomate monitoring: No creatomateId found');\n            return;\n        }\n\n        try {\n            console.log(`üé¨ Starting Creatomate monitoring for job ${this.jobId} (ID: ${this.jobData.creatomateId})`);\n\n            const response = await fetch(`/api/queue/job/${this.jobId}/monitor-creatomate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                console.log('‚úÖ Creatomate monitoring started successfully:', result);\n\n                // Update job status to rendering\n                if (this.jobData.status !== 'rendering') {\n                    this.jobData.status = 'rendering';\n                    this.jobData.currentStep = 'üé¨ Video rendering in progress with Creatomate...';\n                    this.updateUI();\n                }\n            } else {\n                const error = await response.json();\n                console.error('‚ùå Failed to start Creatomate monitoring:', error);\n            }\n        } catch (error) {\n            console.error('‚ùå Error starting Creatomate monitoring:', error);\n        }\n    }\n\n    /**\n     * Copy video URL to clipboard\n     */\n    async copyVideoUrl() {\n        try {\n            await navigator.clipboard.writeText(this.jobData.videoUrl);\n            // Success logged in console only\n        } catch (error) {\n            console.error('Failed to copy URL:', error);\n            // Error logged in console only\n        }\n    }\n\n    /**\n     * Manually trigger Creatomate monitoring for this job\n     */\n    async monitorCreatomate() {\n        try {\n            console.log(`üé¨ Direct Creatomate status check for job ${this.jobId}`);\n\n            if (!this.jobData.creatomateId) {\n                this.addLogEntry({\n                    level: 'error',\n                    message: 'No Creatomate ID found for this job'\n                });\n                return;\n            }\n\n            this.addLogEntry({\n                level: 'info',\n                message: `Checking render status for Creatomate ID: ${this.jobData.creatomateId}`\n            });\n\n            // Direct Creatomate API check\n            const response = await fetch(`/api/status/${this.jobData.creatomateId}`);\n            const result = await response.json();\n\n            if (result.success) {\n                if (result.videoUrl && result.status === 'completed') {\n                    // Video is ready!\n                    this.addLogEntry({\n                        level: 'success',\n                        message: `üéâ Video is ready! URL: ${result.videoUrl}`\n                    });\n\n                    // Update job data to show video\n                    this.jobData.videoUrl = result.videoUrl;\n                    this.jobData.status = 'completed';\n                    this.jobData.progress = 100;\n                    this.jobData.currentStep = 'Video completed and ready for viewing!';\n\n                    // Refresh the UI to show the video\n                    this.updateUI();\n                } else if (result.status) {\n                    // Still rendering\n                    const status = result.status.charAt(0).toUpperCase() + result.status.slice(1);\n                    this.addLogEntry({\n                        level: 'info',\n                        message: `Render status: ${status} - Video not ready yet`\n                    });\n\n                    if (result.status !== 'completed') {\n                        this.addLogEntry({\n                            level: 'info',\n                            message: 'Video is still rendering - check back in a few minutes'\n                        });\n                    }\n                } else {\n                    this.addLogEntry({\n                        level: 'warning',\n                        message: 'No status information available from Creatomate'\n                    });\n                }\n            } else {\n                this.addLogEntry({\n                    level: 'error',\n                    message: `Failed to check status: ${result.error || result.message}`\n                });\n            }\n        } catch (error) {\n            console.error('‚ùå Failed to check Creatomate status:', error);\n            this.addLogEntry({\n                level: 'error',\n                message: `Failed to check status: ${error.message}`\n            });\n        }\n    }\n\n    /**\n     * Show workflow warning information\n     */\n    showWorkflowWarning() {\n        this.addLogEntry({\n            level: 'warning',\n            message: '‚ö†Ô∏è Workflow Incomplete - The Python script did not complete all 7 steps properly'\n        });\n\n        this.addLogEntry({\n            level: 'info',\n            message: 'This job has a Creatomate ID but the workflow may not have submitted the video correctly.'\n        });\n\n        if (this.jobData.creatomateId) {\n            this.addLogEntry({\n                level: 'info',\n                message: `Manual check: python main.py --check-creatomate ${this.jobData.creatomateId}`\n            });\n        }\n\n        this.addLogEntry({\n            level: 'info',\n            message: 'Consider retrying this job to ensure all 7 workflow steps complete properly.'\n        });\n    }\n\n    // Helper methods\n    getStatusBadgeClass(status) {\n        const classes = {\n            pending: 'bg-warning text-dark',\n            active: 'bg-info text-dark',\n            processing: 'bg-info text-dark',\n            rendering: 'bg-primary', // New rendering status\n            completed: 'bg-success',\n            failed: 'bg-danger',\n            cancelled: 'bg-secondary'\n        };\n        return classes[status] || 'bg-secondary';\n    }\n\n    getProgressBarClass(progress) {\n        if (progress >= 100) return 'bg-success';\n        if (progress >= 75) return 'bg-info';\n        if (progress >= 50) return 'bg-warning';\n        return 'bg-primary';\n    }\n\n    getStepFromProgress(progress) {\n        const stepSize = 100 / this.processSteps.length; // Dynamic step size\n        const step = Math.floor(progress / stepSize);\n        return this.processSteps[Math.min(step, this.processSteps.length - 1)]?.description || 'Processing...';\n    }\n\n    getStepStatusText(iconClass, timestamp) {\n        const statusTexts = {\n            pending: 'Waiting...',\n            active: 'In Progress',\n            completed: timestamp ? `Done ${timestamp}` : 'Completed',\n            failed: 'Failed'\n        };\n        return statusTexts[iconClass] || 'Unknown';\n    }\n\n    getProgressForStep(stepId) {\n        const index = this.processSteps.findIndex((step) => step.id === stepId);\n        return index !== -1 ? (index / this.processSteps.length) * 100 : 0;\n    }\n\n    getStepIcon(stepId, iconClass) {\n        // Status-based icons\n        if (iconClass === 'completed') return '‚úì';\n        if (iconClass === 'failed') return '‚úó';\n        if (iconClass === 'active') return '‚ü≥';\n\n        // Step-specific icons for pending state\n        const stepIcons = {\n            database_extraction: 'üóÑÔ∏è',\n            script_generation: 'üìù',\n            asset_preparation: 'üé®',\n            heygen_creation: 'ü§ñ',\n            heygen_processing: '‚è≥',\n            scroll_generation: 'üì±',\n            creatomate_assembly: 'üé¨'\n        };\n\n        return stepIcons[stepId] || '‚óã';\n    }\n\n    getStepTimestamp(stepId) {\n        // In a real implementation, this would return actual timestamps\n        return new Date().toLocaleString();\n    }\n\n    getCurrentStepNumber() {\n        const progress = this.jobData?.progress || 0;\n        const stepNumber = Math.min(\n            Math.floor(progress / (100 / this.processSteps.length)) + 1,\n            this.processSteps.length\n        );\n        return `${stepNumber}/${this.processSteps.length}`;\n    }\n\n    calculateDuration() {\n        if (!this.jobData?.startedAt) return '--';\n\n        const start = new Date(this.jobData.startedAt);\n\n        // For completed, failed, or cancelled jobs, use completedAt timestamp\n        // Otherwise use current time for active jobs\n        let end;\n        if (['completed', 'failed', 'cancelled'].includes(this.jobData.status)) {\n            end = this.jobData.completedAt ? new Date(this.jobData.completedAt) : new Date(this.jobData.startedAt);\n        } else {\n            end = new Date(); // Keep timer running for active jobs\n        }\n\n        const duration = end - start;\n\n        const minutes = Math.floor(duration / 60000);\n        const seconds = Math.floor((duration % 60000) / 1000);\n\n        if (minutes > 0) {\n            return `${minutes}m ${seconds}s`;\n        }\n        return `${seconds}s`;\n    }\n\n    /**\n     * Cleanup resources\n     */\n    cleanup() {\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n        }\n        if (this.logUpdateInterval) {\n            clearInterval(this.logUpdateInterval);\n        }\n\n        RealtimeService.cleanup();\n        console.log('üßπ Job Detail App cleaned up');\n    }\n}\n\n// Create global instance for button callbacks\nwindow.jobDetailApp = new JobDetailApp();\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        window.jobDetailApp.initialize();\n    });\n} else {\n    window.jobDetailApp.initialize();\n}\n\n// Cleanup on page unload\nwindow.addEventListener('beforeunload', () => {\n    window.jobDetailApp.cleanup();\n});\n"],"names":["JobDetailApp","error","pathParts","jobIndex","_a","_b","_c","_d","e","RealtimeService","event","response","APIService","jobIdElement","statusBadge","overviewCard","status","progressBar","progressPercentage","currentStep","progress","parametersContainer","params","param","timelineContainer","currentProgress","step","index","iconClass","timestamp","stepNumber","duration","steps","worker","priority","actionsContainer","buttons","errorCard","errorContent","videoCard","videoContent","creatomateSection","workflowStepsComplete","creatomateIdElement","result","videoResult","resultVideo","allVideos","v","creatomateProgress","renderingStatus","statusText","statusMessages","progressMap","errorMessage","errorStatus","errorMessageElement","badge","statusInfo","link","button","originalText","video","text","textArea","err","videoElement","videoUrl","videoLoading","videoSource","persistentLogs","persistentResponse","persistentResult","persistentError","memoryLogs","memoryResponse","memoryResult","memoryError","essentialLogs","log","message","logMap","key","a","b","logs","logViewer","logData","level","icons","formattedMessage","previousStatus","updateData","currentActiveStep","stepStatus","step_number","data","lastSequence","currentSequence","creatomateId","stepSize","stepId","start","end","minutes","seconds"],"mappings":"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"}