import{R as l,A as c}from"./RealtimeService.BdD4_qZh.js";class d{constructor(){this.jobId=this.extractJobIdFromURL(),this.jobData=null,this.refreshInterval=null,this.logUpdateInterval=null,this.autoScroll=!0,this.isInitialized=!1,this.lastRefreshTime=0,this.jobSSE=null,this.currentActiveStep=null,this.processSteps=[{id:"database_extraction",name:"Database Extraction",description:"Extracting movies from database"},{id:"script_generation",name:"Script Generation",description:"Generating AI scripts for content"},{id:"asset_preparation",name:"Asset Preparation",description:"Creating enhanced posters and movie clips"},{id:"heygen_creation",name:"HeyGen Video Creation",description:"Generating AI avatar videos"},{id:"heygen_processing",name:"HeyGen Processing",description:"Waiting for video completion"},{id:"scroll_generation",name:"Scroll Video Generation",description:"Creating StreamGank scroll overlay"},{id:"creatomate_assembly",name:"Creatomate Assembly",description:"Creating final video"}]}async initialize(){try{if(console.log("üé¨ Initializing Professional Job Detail App..."),!this.jobId){this.showError("Invalid job ID in URL");return}this.setupEventListeners(),await this.loadJobData(),this.startRealTimeUpdates(),this.showMainContent(),console.log(`‚úÖ Job Detail App initialized for job: ${this.jobId}`),this.isInitialized=!0}catch(e){console.error("‚ùå Failed to initialize Job Detail App:",e),this.showError(`Failed to load job: ${e.message}`)}}extractJobIdFromURL(){const e=window.location.pathname.split("/"),t=e.indexOf("job");return t!==-1&&e[t+1]?e[t+1]:null}setupEventListeners(){var e,t,s,o;(e=document.getElementById("back-btn"))==null||e.addEventListener("click",()=>{window.history.back()}),(t=document.getElementById("refresh-btn"))==null||t.addEventListener("click",()=>{this.refreshJobData()}),(s=document.getElementById("clear-logs-btn"))==null||s.addEventListener("click",()=>{this.clearLogs()}),this.setupCreatomateEventListeners(),(o=document.getElementById("auto-scroll-btn"))==null||o.addEventListener("click",a=>{this.toggleAutoScroll(a.target)}),l.addEventListener("jobUpdate",a=>{a.detail.jobId===this.jobId&&this.handleJobUpdate(a.detail)}),l.addEventListener("jobLog",a=>{a.detail.jobId,this.jobId})}setupCreatomateEventListeners(){document.addEventListener("click",e=>{e.target&&(e.target.id==="refresh-creatomate-btn"||e.target.closest("#refresh-creatomate-btn"))&&(e.preventDefault(),console.log("üîÑ Manual refresh button clicked - checking Creatomate status"),this.checkCreatomateStatusAutomatically()),e.target&&(e.target.id==="download-video-btn"||e.target.closest("#download-video-btn"))&&(e.preventDefault(),this.downloadVideo()),e.target&&(e.target.id==="copy-video-url-btn"||e.target.closest("#copy-video-url-btn"))&&(e.preventDefault(),this.copyVideoUrlFromCreatomate()),e.target&&(e.target.id==="preview-fullscreen-btn"||e.target.closest("#preview-fullscreen-btn"))&&(e.preventDefault(),this.previewFullscreen()),e.target&&(e.target.id==="retry-creatomate-btn"||e.target.closest("#retry-creatomate-btn"))&&(e.preventDefault(),this.checkCreatomateStatusAutomatically())})}async loadJobData(){try{console.log(`üì° Loading job data for: ${this.jobId}`);const e=await c.getJobStatus(this.jobId);if(!e.success||!e.job)throw new Error("Job not found");this.jobData=e.job,this.lastRefreshTime=Date.now(),await this.loadCurrentActiveStepFromLogs(),this.updateUI(),window.addEventListener("beforeunload",()=>{this.closeJobSSE()}),console.log("‚úÖ Job data loaded successfully")}catch(e){throw console.error("‚ùå Failed to load job data:",e),e}}updateUI(){this.jobData&&(console.log("üîÑ Updating UI with job data:",this.jobData),this.updateJobHeader(),this.updateProgressSection(),this.updateJobParameters(),this.updateTimeline(),this.updateQuickStats(),this.updateActionButtons(),this.updateErrorInfo(),this.updateVideoResult(),this.updateCreatomateSection())}updateJobHeader(){const e=document.getElementById("job-id"),t=document.getElementById("job-status-badge"),s=document.getElementById("job-overview-card");if(e&&(e.textContent=this.jobData.id||"Unknown"),t){const o=this.jobData.status||"unknown";t.textContent=o.charAt(0).toUpperCase()+o.slice(1),t.className=`badge ${this.getStatusBadgeClass(o)} ms-2`}s&&(s.className=`card bg-dark status-card mb-4 status-${this.jobData.status}`)}updateProgressSection(){const e=document.getElementById("progress-bar"),t=document.getElementById("progress-percentage"),s=document.getElementById("current-step");let o=this.jobData.progress||0;this.jobData.status==="completed"&&this.jobData.videoUrl?o=100:this.jobData.status==="completed"&&!this.jobData.videoUrl?o=this.jobData.progress||0:(this.jobData.status==="failed"||this.jobData.status==="cancelled")&&(o=this.jobData.progress||0),e&&(e.style.width=`${o}%`,e.className=`progress-bar ${this.getProgressBarClass(o)} progress-bar-striped ${o<100&&["active","processing","rendering"].includes(this.jobData.status)?"progress-bar-animated":""}`),t&&(t.textContent=`${o}%`),s&&(s.textContent=this.jobData.currentStep||this.getStepFromProgress(o))}updateJobParameters(){const e=document.getElementById("job-parameters");if(!e)return;const t=[{label:"Country",value:this.jobData.country,icon:"fas fa-globe"},{label:"Platform",value:this.jobData.platform,icon:"fas fa-tv"},{label:"Genre",value:this.jobData.genre,icon:"fas fa-tags"},{label:"Content Type",value:this.jobData.contentType,icon:"fas fa-film"},{label:"Template",value:this.jobData.template||"Default",icon:"fas fa-palette"},{label:"Worker ID",value:this.jobData.workerId||"Unassigned",icon:"fas fa-user"}];this.jobData.creatomateId&&t.push({label:"Creatomate ID",value:this.jobData.creatomateId,icon:"fas fa-video"}),e.innerHTML=t.map(s=>`
            <div class="param-badge">
                <i class="${s.icon}"></i>
                <span class="label">${s.label}:</span>
                <span class="value">${s.value||"Unknown"}</span>
            </div>
        `).join("")}updateTimeline(){const e=document.getElementById("job-timeline");if(!e)return;const t=this.jobData.progress||0,s=this.jobData.status;e.innerHTML=this.processSteps.map((o,a)=>{let r="pending",i="";const n=a+1;return this.currentActiveStep===n?r="active":s==="failed"&&this.getProgressForStep(o.id)<=t?r="failed":this.getProgressForStep(o.id)<t?(r="completed",i=this.getStepTimestamp(o.id)):r="pending",`
                <div class="timeline-step ${r}">
                    <div class="step-icon">
                        ${this.getStepIcon(o.id,r)}
                    </div>
                    <div class="step-title">${o.name}</div>
                    <div class="step-status text-muted">${this.getStepStatusText(r,i)}</div>
                </div>
            `}).join("")}updateQuickStats(){const e=this.calculateDuration(),t=this.getCurrentStepNumber(),s=this.jobData.workerId?this.jobData.workerId.slice(-4):"--",o=this.jobData.priority||"Normal";document.getElementById("stat-duration").textContent=e,document.getElementById("stat-steps").textContent=t,document.getElementById("stat-worker").textContent=s,document.getElementById("stat-priority").textContent=o}updateActionButtons(){const e=document.getElementById("job-actions");if(!e)return;const t=this.jobData.status;let s=[];(t==="pending"||t==="active")&&s.push(`
                <button class="btn btn-outline-warning" onclick="jobDetailApp.cancelJob()">
                    <i class="fas fa-stop-circle me-1"></i> Cancel Job
                </button>
            `),t==="failed"&&s.push(`
                <button class="btn btn-outline-primary" onclick="jobDetailApp.retryJob()">
                    <i class="fas fa-redo me-1"></i> Retry Job
                </button>
            `),this.jobData.videoUrl&&s.push(`
                <a href="${this.jobData.videoUrl}" target="_blank" class="btn btn-success">
                    <i class="fas fa-play me-1"></i> Watch Video
                </a>
                <a href="${this.jobData.videoUrl}" download class="btn btn-outline-success">
                    <i class="fas fa-download me-1"></i> Download
                </a>
            `),e.innerHTML=s.join("")}updateErrorInfo(){const e=document.getElementById("error-card"),t=document.getElementById("error-content");this.jobData.status==="failed"&&this.jobData.error?(t.innerHTML=`
                <h6 class="text-danger mb-2">
                    <i class="fas fa-bug me-1"></i> Error Details
                </h6>
                <div class="bg-dark p-3 rounded border border-danger">
                    <code class="text-light">${this.jobData.error}</code>
                </div>
                ${this.jobData.errorTimestamp?`
                <small class="text-muted d-block mt-2">
                    <i class="fas fa-clock me-1"></i> 
                    Error occurred: ${new Date(this.jobData.errorTimestamp).toLocaleString()}
                </small>
                `:""}
            `,e.classList.remove("d-none")):e.classList.add("d-none")}updateVideoResult(){const e=document.getElementById("video-result-card"),t=document.getElementById("video-content");if(!e||!t){console.log("üìù Video result elements not found - functionality moved to video section");return}this.jobData.status==="completed"&&this.jobData.videoUrl?(t.innerHTML=`
                <div class="mb-3">
                    <video controls class="w-100 rounded" style="max-height: 300px;">
                        <source src="${this.jobData.videoUrl}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                <div class="d-grid gap-2">
                    <a href="${this.jobData.videoUrl}" target="_blank" class="btn btn-success">
                        <i class="fas fa-external-link-alt me-1"></i> Open in New Tab
                    </a>
                    <a href="${this.jobData.videoUrl}" download class="btn btn-outline-light">
                        <i class="fas fa-download me-1"></i> Download Video
                    </a>
                    <button class="btn btn-outline-info" onclick="jobDetailApp.copyVideoUrl()">
                        <i class="fas fa-copy me-1"></i> Copy URL
                    </button>
                </div>
            `,e.classList.remove("d-none")):e.classList.add("d-none")}updateCreatomateSection(){var s;const e=document.getElementById("creatomate-section");if(!e)return;const t=this.jobData.creatomateId&&(((s=this.jobData.stepDetails)==null?void 0:s.step_7)||this.jobData.progress>=90);if(console.log(`üîç Creatomate section check - CreatomateId: ${this.jobData.creatomateId}, Progress: ${this.jobData.progress}, StepDetails: ${JSON.stringify(this.jobData.stepDetails)}, WorkflowComplete: ${t}`),t&&this.jobData.creatomateId){console.log(`üé¨ Workflow steps 1-7 completed, showing Creatomate section. ID: ${this.jobData.creatomateId}`),e.classList.remove("d-none");const o=document.getElementById("creatomate-id");o&&(o.textContent=this.jobData.creatomateId),this.jobData.videoUrl?(console.log("üé¨ Video URL already available, showing video result directly"),this.showCreatomateVideoResult()):(console.log("üîç No video URL yet, checking Creatomate status automatically..."),this.checkCreatomateStatusAutomatically())}else e.classList.add("d-none"),console.log("‚ùå Workflow not complete yet - hiding Creatomate section")}async checkCreatomateStatusAutomatically(){console.log("üîÑ Automatically checking Creatomate status for ID:",this.jobData.creatomateId),this.showCreatomateRenderingStatus();try{const t=await(await fetch(`/api/status/${this.jobData.creatomateId}`)).json();console.log("üì° Creatomate API response:",t),t.success?(this.updateCreatomateStatusBadge(t.status),t.status==="succeeded"&&t.videoUrl?(console.log("‚úÖ Video is ready!",t.videoUrl),this.jobData.videoUrl=t.videoUrl,this.jobData.creatomateStatus=t.status,this.jobData.status="completed",this.jobData.progress=100,this.jobData.currentStep="‚úÖ Video creation completed",console.log("üíæ Updated job status to completed, progress to 100%"),console.log("üíæ Updated jobData.videoUrl to:",this.jobData.videoUrl),this.updateJobHeader(),this.updateProgressSection(),console.log("üé¨ About to call showCreatomateVideoResult()"),this.showCreatomateVideoResult()):t.status==="processing"||t.status==="planned"?(console.log("‚è≥ Video still rendering, status:",t.status),this.showCreatomateRenderingStatus(t.status),setTimeout(()=>{this.jobData.creatomateId&&!this.jobData.videoUrl&&this.checkCreatomateStatusAutomatically()},3e4)):t.status==="failed"||t.status==="error"?(console.log("‚ùå Video rendering failed"),this.showCreatomateError("Video rendering failed")):(console.log("‚ùì Unknown status:",t.status),this.showCreatomateError(`Unknown status: ${t.status}`))):(console.error("‚ùå Creatomate API error:",t.error),this.showCreatomateError(t.error||"Failed to check video status"))}catch(e){console.error("‚ùå Error checking Creatomate status:",e),this.showCreatomateError(`Network error: ${e.message}`)}}showCreatomateVideoResult(){var t,s,o;console.log("üé¨ showCreatomateVideoResult called with videoUrl:",this.jobData.videoUrl),(t=document.getElementById("rendering-status"))==null||t.classList.add("d-none"),(s=document.getElementById("error-status"))==null||s.classList.add("d-none"),(o=document.getElementById("creatomate-progress"))==null||o.classList.add("d-none");const e=document.getElementById("video-result");if(e&&this.jobData.videoUrl){console.log("üé¨ Video result div found, setting up player with URL:",this.jobData.videoUrl),e.classList.remove("d-none"),console.log("‚úÖ Video result div is now visible");const a=document.getElementById("result-video");if(console.log('üîç Looking for video element with ID "result-video"'),console.log("üé¨ Video element found:",!!a),console.log("üé¨ Current video URL in jobData:",this.jobData.videoUrl),a)console.log("üé¨ Video element found, setting up player with URL:",this.jobData.videoUrl),this.setupVideoPlayer(a,this.jobData.videoUrl);else{console.error('‚ùå Video element not found with ID "result-video"!');const r=document.querySelectorAll("video");console.log("üîç Found",r.length,"video elements on page:",Array.from(r).map(i=>i.id||"no-id"))}this.updateCreatomateStatusBadge("succeeded"),console.log("üéâ Video result displayed successfully!")}else console.error("‚ùå Video result setup failed:",{videoResult:!!e,videoUrl:this.jobData.videoUrl})}showCreatomateRenderingStatus(e="processing"){var o,a;(o=document.getElementById("video-result"))==null||o.classList.add("d-none"),(a=document.getElementById("error-status"))==null||a.classList.add("d-none");const t=document.getElementById("creatomate-progress"),s=document.getElementById("rendering-status");if(t){const r=document.getElementById("creatomate-status-text"),i=document.getElementById("creatomate-progress-bar");if(r){const n={planned:"Video queued for rendering...",processing:"Video is being rendered...",rendering:"Video is being rendered..."};r.textContent=n[e]||"Checking video status..."}i&&(i.style.width=e==="processing"?"75%":"25%",i.classList.add("progress-bar-animated")),t.classList.remove("d-none")}s&&s.classList.remove("d-none")}showCreatomateError(e){var o,a,r;(o=document.getElementById("video-result"))==null||o.classList.add("d-none"),(a=document.getElementById("rendering-status"))==null||a.classList.add("d-none"),(r=document.getElementById("creatomate-progress"))==null||r.classList.add("d-none");const t=document.getElementById("error-status"),s=document.getElementById("error-message");t&&(s&&(s.textContent=e||"An error occurred while processing the video"),t.classList.remove("d-none")),this.updateCreatomateStatusBadge("failed")}updateCreatomateStatusBadge(e){const t=document.getElementById("creatomate-status-badge");if(t){const o={succeeded:{text:"Ready",class:"bg-success"},processing:{text:"Rendering",class:"bg-warning"},planned:{text:"Queued",class:"bg-info"},failed:{text:"Failed",class:"bg-danger"},error:{text:"Error",class:"bg-danger"}}[e]||{text:e,class:"bg-secondary"};t.textContent=o.text,t.className=`badge ${o.class} ms-2 fs-6`}}downloadVideo(){if(this.jobData.videoUrl){console.log("üì• Downloading video from:",this.jobData.videoUrl);const e=document.createElement("a");e.href=this.jobData.videoUrl,e.download=`streamgank_video_${this.jobData.id||"unknown"}.mp4`,e.target="_blank",document.body.appendChild(e),e.click(),document.body.removeChild(e),console.log("‚úÖ Download initiated")}else console.error("‚ùå No video URL available for download")}async copyVideoUrlFromCreatomate(){if(this.jobData.videoUrl)try{await navigator.clipboard.writeText(this.jobData.videoUrl),console.log("üìã Video URL copied to clipboard");const e=document.getElementById("copy-video-url-btn");if(e){const t=e.innerHTML;e.innerHTML='<i class="fas fa-check me-1"></i>Copied!',e.classList.add("btn-success"),e.classList.remove("btn-outline-info"),setTimeout(()=>{e.innerHTML=t,e.classList.remove("btn-success"),e.classList.add("btn-outline-info")},2e3)}}catch(e){console.error("‚ùå Failed to copy URL:",e),this.fallbackCopyToClipboard(this.jobData.videoUrl)}else console.error("‚ùå No video URL available to copy")}previewFullscreen(){if(this.jobData.videoUrl){console.log("üñ•Ô∏è Opening fullscreen preview");const e=document.getElementById("result-video");e&&(e.requestFullscreen?e.requestFullscreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen(),e.play().catch(t=>console.warn("Video autoplay prevented:",t)))}else console.error("‚ùå No video available for preview")}fallbackCopyToClipboard(e){const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.left="-999999px",t.style.top="-999999px",document.body.appendChild(t),t.focus(),t.select();try{document.execCommand("copy")&&console.log("üìã URL copied using fallback method")}catch(s){console.error("‚ùå Fallback copy failed:",s)}document.body.removeChild(t)}setupVideoPlayer(e,t){if(console.log("üé¨ Setting up video player with <source> element for:",t),console.log("üé¨ Video element found:",!!e),console.log("üé¨ Video URL provided:",t),!e){console.error("‚ùå Video element is null or undefined!");return}if(!t){console.error("‚ùå Video URL is null or undefined!");return}const s=document.getElementById("video-loading");s?(s.style.display="block",console.log("üîÑ Video loading indicator shown")):console.warn("‚ö†Ô∏è Video loading indicator not found"),e.classList.remove("d-none");const o=document.getElementById("video-source");o?(o.src=t,o.type="video/mp4",console.log("üé¨ Video source element found and src set to:",o.src),console.log("üé¨ Video source element type:",o.type)):(console.warn("‚ö†Ô∏è Video source element not found, setting video src directly as fallback"),e.src=t),e.src=t,console.log("üé¨ Video element src also set to:",e.src),e.addEventListener("loadstart",()=>{console.log("üîÑ Video loading started")}),e.addEventListener("loadedmetadata",()=>{console.log("‚úÖ Video metadata loaded"),console.log("üìê Video dimensions:",e.videoWidth,"x",e.videoHeight),console.log("‚è±Ô∏è Video duration:",e.duration,"seconds"),s&&(s.style.display="none")}),e.addEventListener("canplay",()=>{console.log("‚úÖ Video can start playing - success!"),console.log("üìä Video ready state:",e.readyState),s&&(s.style.display="none")}),e.addEventListener("error",a=>{var r,i,n;console.error("‚ùå Video loading error:",a),console.error("‚ùå Video error code:",(r=e.error)==null?void 0:r.code),console.error("‚ùå Video error message:",(i=e.error)==null?void 0:i.message),s&&(s.innerHTML=`
                    <div class="text-center">
                        <i class="fas fa-exclamation-triangle text-warning mb-2" style="font-size: 2rem;"></i>
                        <div class="text-light small">Error loading video</div>
                        <div class="text-muted small">Code: ${(n=e.error)==null?void 0:n.code}</div>
                    </div>
                `)}),e.addEventListener("progress",()=>{console.log("üìä Video loading progress:",e.buffered.length>0?Math.round(e.buffered.end(0)/e.duration*100)+"%":"0%")}),e.load(),console.log("üé¨ Video player configured with loading indicator and enhanced debugging"),console.log("üîç Video element details:",{src:e.src,currentSrc:e.currentSrc,readyState:e.readyState,networkState:e.networkState})}startRealTimeUpdates(){console.log("üîÑ Starting webhook-optimized updates (reduced polling)..."),this.initializeJobSSE(),this.refreshInterval=setInterval(()=>{var e,t,s,o;if(["completed","rendering"].includes((e=this.jobData)==null?void 0:e.status)&&!((t=this.jobData)!=null&&t.videoUrl))this.refreshJobData(),console.log("üîÑ Checking for final video URL");else if((s=this.jobData)!=null&&s.videoUrl||["failed","cancelled"].includes((o=this.jobData)==null?void 0:o.status)){console.log("üõë Job complete, stopping all polling"),this.stopRealTimeUpdates();return}},6e5),this.startLogUpdates()}stopRealTimeUpdates(){this.refreshInterval&&(clearInterval(this.refreshInterval),this.refreshInterval=null,console.log("üõë Stopped job refresh interval")),this.logUpdateInterval&&(clearInterval(this.logUpdateInterval),this.logUpdateInterval=null,console.log("üõë Stopped log update interval")),this.closeJobSSE()}startLogUpdates(){console.log("üìã Loading initial logs - webhooks provide real-time updates"),this.fetchRealLogs()}async fetchRealLogs(){try{let e=[];try{const a=await fetch(`/api/queue/job/${this.jobId}/logs/persistent?limit=500`);if(a.ok){const r=await a.json();r.success&&r.data.logs&&(e=r.data.logs,console.log(`üìã Loaded ${e.length} persistent logs for job ${this.jobId}`))}}catch(a){console.warn("‚ö†Ô∏è Persistent logs not available:",a.message)}let t=[];try{const a=await fetch(`/api/queue/job/${this.jobId}/logs`);if(a.ok){const r=await a.json();r.success&&r.data.logs&&(t=r.data.logs,console.log(`üìã Loaded ${t.length} in-memory logs for job ${this.jobId}`))}}catch(a){console.warn("‚ö†Ô∏è In-memory logs not available:",a.message)}const o=this.combineLogs(e,t).filter(a=>{const r=a.message.toLowerCase();return r.includes("workflow initiated")||r.includes("step")&&r.includes("completed")||r.includes("workflow completed")||r.includes("video is ready")||r.includes("error")||r.includes("failed")});o.length>0&&this.updateLogDisplay(o)}catch(e){console.error("‚ùå Failed to fetch job logs:",e)}}combineLogs(e,t){const s=new Map;return e.forEach(o=>{const a=`${o.timestamp}_${o.message}_${o.level}`;s.set(a,{...o,source:"persistent",type:o.level||"info"})}),t.forEach(o=>{const a=`${o.timestamp}_${o.message}_${o.type}`;s.has(a)||s.set(a,{...o,source:"memory"})}),Array.from(s.values()).sort((o,a)=>new Date(a.timestamp)-new Date(o.timestamp))}updateLogDisplay(e){const t=document.getElementById("log-viewer");if(t){if(t.innerHTML="",e.length===0){t.innerHTML=`
                <div class="log-entry level-info">
                    <div class="log-icon">
                        <i class="fas fa-info-circle"></i>
                    </div>
                    <div class="log-timestamp">--:--:--</div>
                    <div class="log-content">
                        <strong>No logs available yet</strong><br>
                        Job processing hasn't started or logs are still being initialized.
                    </div>
                </div>
            `;return}e.forEach(s=>{}),this.autoScroll&&(t.scrollTop=t.scrollHeight)}}getLogIcon(e){const t={info:"fas fa-info-circle",success:"fas fa-check-circle",warning:"fas fa-exclamation-triangle",error:"fas fa-times-circle",step:"fas fa-cog fa-spin",debug:"fas fa-bug"};return t[e]||t.info}formatLogMessage(e){if(!e||typeof e!="string")return"";let t=e.trim().replace(/\r\n/g,`
`).replace(/\r/g,`
`).replace(/\n{3,}/g,`

`);return t=t.replace(/(\/[^\s]+\.(py|js|json|mp4|jpg|png|webp))/g,"<code>$1</code>").replace(/(https?:\/\/[^\s]+)/g,"<code>$1</code>").replace(/Step (\d+)\/(\d+):/g,"<strong>Step $1/$2:</strong>").replace(/(‚úÖ|‚úì|SUCCESS|COMPLETED|DONE)/gi,'<strong style="color: #3fb950;">$1</strong>').replace(/(‚ùå|‚úó|ERROR|FAILED|FAILURE)/gi,'<strong style="color: #f85149;">$1</strong>').replace(/(‚ö†Ô∏è|WARNING|WARN)/gi,'<strong style="color: #d29922;">$1</strong>').replace(/(üé¨|üìù|üé®|ü§ñ|‚è≥|üì±)/g,"<strong>$1</strong>").replace(/(\d+(?:\.\d+)?\s*(?:MB|KB|GB|s|ms|minutes?|seconds?))/gi,"<strong>$1</strong>").replace(/(\d+(?:\.\d+)?%)/g,"<strong>$1</strong>"),t}async refreshJobData(){var e,t,s;try{console.log("üîÑ Refreshing job data...");const o=(e=this.jobData)==null?void 0:e.status;await this.loadJobData(),this.lastRefreshTime=Date.now(),console.log("‚úÖ Job data refreshed"),o&&["active","pending","processing","rendering"].includes(o)&&((t=this.jobData)==null?void 0:t.status)==="completed"&&((s=this.jobData)!=null&&s.videoUrl)&&(console.log("üèÅ Job completed during refresh, stopping real-time updates"),this.stopRealTimeUpdates())}catch(o){console.error("‚ùå Failed to refresh job data:",o)}}handleJobUpdate(e){var s;console.log("üì° Received job update:",e);const t=(s=this.jobData)==null?void 0:s.status;this.jobData={...this.jobData,...e},this.updateUI(),t&&["active","pending","processing","rendering"].includes(t)&&this.jobData.status==="completed"&&this.jobData.videoUrl&&(console.log("üèÅ Job completed with video, stopping real-time updates"),this.stopRealTimeUpdates())}showMainContent(){document.getElementById("loading-state").classList.add("d-none"),document.getElementById("main-content").classList.remove("d-none")}showError(e){document.getElementById("loading-state").classList.add("d-none"),document.getElementById("main-content").classList.add("d-none"),document.getElementById("error-state").classList.remove("d-none"),document.getElementById("error-message").textContent=e}clearLogs(){const e=document.getElementById("log-viewer");if(e){const t=new Date().toLocaleTimeString("en-US",{hour12:!1,hour:"2-digit",minute:"2-digit",second:"2-digit"});e.innerHTML=`
                <div class="log-entry level-info">
                    <div class="log-icon">
                        <i class="fas fa-broom"></i>
                    </div>
                    <div class="log-timestamp">${t}</div>
                    <div class="log-content">
                        <strong>Log viewer cleared</strong><br>
                        Previous log entries have been removed from display.
                    </div>
                </div>
            `}}toggleAutoScroll(e){if(this.autoScroll=!this.autoScroll,e.classList.toggle("active",this.autoScroll),this.autoScroll){const t=document.getElementById("log-viewer");t&&(t.scrollTop=t.scrollHeight)}}async cancelJob(){if(confirm("Are you sure you want to cancel this job?"))try{const e=await c.cancelJob(this.jobId);if(e.success)await this.refreshJobData();else throw new Error(e.message||"Failed to cancel job")}catch(e){console.error("‚ùå Failed to cancel job:",e)}}async retryJob(){if(confirm("Are you sure you want to retry this job?"))try{const e=await c.retryJob(this.jobId);if(e.success)await this.refreshJobData();else throw new Error(e.message||"Failed to retry job")}catch(e){console.error("‚ùå Failed to retry job:",e)}}async loadCurrentActiveStepFromLogs(){try{console.log(`üìã Loading persistent logs to determine current active step for ${this.jobId}`);const e=await fetch(`/api/queue/job/${this.jobId}/logs/persistent?limit=50`);if(!e.ok){console.warn("‚ö†Ô∏è Could not load persistent logs, using job data only");return}const t=await e.json();if(!t.success||!t.data.logs){console.warn("‚ö†Ô∏è No persistent logs available");return}const s=t.data.logs;console.log(`üìã Loaded ${s.length} persistent log entries`);let o=null;const a={};s.forEach(r=>{if(r.event_type==="webhook_received"&&r.details){const i=r.details.step_number,n=r.details.status;i>=1&&i<=7&&(n==="started"?(a[i]="started",o=i):n==="completed"&&(a[i]="completed",o===i&&(o=null)))}}),this.currentActiveStep=o,console.log(o?`üìç Determined from logs: Step ${o} is currently active`:"üìç No active step found in logs - workflow may be complete or not started")}catch(e){console.error("‚ùå Error loading persistent logs:",e)}}initializeJobSSE(){if(!this.jobSSE){console.log(`üì° Connecting to job-specific real-time updates for ${this.jobId}`);try{this.jobSSE=new EventSource(`/api/job/${this.jobId}/stream`),this.jobSSE.onopen=()=>{console.log(`üì° Real-time connection established for job ${this.jobId}`)},this.jobSSE.onmessage=e=>{try{const t=JSON.parse(e.data);this.handleJobSSEMessage(t)}catch(t){console.error("‚ùå Failed to parse job SSE message:",t)}},this.jobSSE.onerror=e=>{console.warn(`‚ö†Ô∏è Job SSE connection error for ${this.jobId}:`,e),setTimeout(()=>{this.jobSSE&&this.jobSSE.readyState===EventSource.CLOSED&&(console.log(`üîÑ Reconnecting job SSE for ${this.jobId}`),this.closeJobSSE(),this.initializeJobSSE())},5e3)}}catch(e){console.error(`‚ùå Failed to initialize job SSE for ${this.jobId}:`,e)}}}handleJobSSEMessage(e){if(e.job_id===this.jobId)switch(e.type){case"connected":console.log(`‚úÖ Job ${this.jobId} real-time updates connected`);break;case"step_update":console.log(`üì° Real-time step update: Step ${e.step_number} ${e.status}`),this.jobData&&(e.status==="started"?(this.currentActiveStep=e.step_number,this.jobData.currentStep=`Step ${e.step_number}/7: ${e.step_name} (Processing...)`,this.jobData.progress=Math.max((e.step_number-1)/7*100,0),console.log(`üìã Step ${e.step_number} started: ${e.step_name}`)):e.status==="completed"&&(this.currentActiveStep===e.step_number&&(this.currentActiveStep=null),this.jobData.currentStep=`Step ${e.step_number}/7: ${e.step_name} ‚úÖ`,this.jobData.progress=Math.min(e.step_number/7*100,100),console.log(`‚úÖ Step ${e.step_number} completed: ${e.step_name}`),e.step_number===7&&(console.log("üé¨ Step 7 completed - refreshing job data to get Creatomate ID..."),setTimeout(async()=>{try{await this.refreshJobData(),console.log("üé¨ Job data refreshed after step 7 - triggering video display"),this.updateUI()}catch(t){console.error("‚ùå Failed to refresh job data after step 7:",t)}},1e3))),this.updateProgressSection(),this.updateTimeline());break;case"heartbeat":break;default:console.log("üì° Job SSE message:",e)}}closeJobSSE(){this.jobSSE&&(this.jobSSE.close(),this.jobSSE=null,console.log(`üì° Closed job SSE connection for ${this.jobId}`))}async copyVideoUrl(){try{await navigator.clipboard.writeText(this.jobData.videoUrl)}catch(e){console.error("Failed to copy URL:",e)}}async monitorCreatomate(){try{if(console.log(`üé¨ Direct Creatomate status check for job ${this.jobId}`),!this.jobData.creatomateId){this.addLogEntry({level:"error",message:"No Creatomate ID found for this job"});return}this.addLogEntry({level:"info",message:`Checking render status for Creatomate ID: ${this.jobData.creatomateId}`});const t=await(await fetch(`/api/status/${this.jobData.creatomateId}`)).json();if(t.success)if(t.videoUrl&&t.status==="completed")this.addLogEntry({level:"success",message:`üéâ Video is ready! URL: ${t.videoUrl}`}),this.jobData.videoUrl=t.videoUrl,this.jobData.status="completed",this.jobData.progress=100,this.jobData.currentStep="Video completed and ready for viewing!",this.updateUI();else if(t.status){const s=t.status.charAt(0).toUpperCase()+t.status.slice(1);this.addLogEntry({level:"info",message:`Render status: ${s} - Video not ready yet`}),t.status!=="completed"&&this.addLogEntry({level:"info",message:"Video is still rendering - check back in a few minutes"})}else this.addLogEntry({level:"warning",message:"No status information available from Creatomate"});else this.addLogEntry({level:"error",message:`Failed to check status: ${t.error||t.message}`})}catch(e){console.error("‚ùå Failed to check Creatomate status:",e),this.addLogEntry({level:"error",message:`Failed to check status: ${e.message}`})}}showWorkflowWarning(){this.addLogEntry({level:"warning",message:"‚ö†Ô∏è Workflow Incomplete - The Python script did not complete all 7 steps properly"}),this.addLogEntry({level:"info",message:"This job has a Creatomate ID but the workflow may not have submitted the video correctly."}),this.jobData.creatomateId&&this.addLogEntry({level:"info",message:`Manual check: python main.py --check-creatomate ${this.jobData.creatomateId}`}),this.addLogEntry({level:"info",message:"Consider retrying this job to ensure all 7 workflow steps complete properly."})}getStatusBadgeClass(e){return{pending:"bg-warning text-dark",active:"bg-info text-dark",processing:"bg-info text-dark",rendering:"bg-primary",completed:"bg-success",failed:"bg-danger",cancelled:"bg-secondary"}[e]||"bg-secondary"}getProgressBarClass(e){return e>=100?"bg-success":e>=75?"bg-info":e>=50?"bg-warning":"bg-primary"}getStepFromProgress(e){var o;const t=100/this.processSteps.length,s=Math.floor(e/t);return((o=this.processSteps[Math.min(s,this.processSteps.length-1)])==null?void 0:o.description)||"Processing..."}getStepStatusText(e,t){return{pending:"Waiting...",active:"In Progress",completed:t?`Done ${t}`:"Completed",failed:"Failed"}[e]||"Unknown"}getProgressForStep(e){const t=this.processSteps.findIndex(s=>s.id===e);return t!==-1?t/this.processSteps.length*100:0}getStepIcon(e,t){return t==="completed"?"‚úì":t==="failed"?"‚úó":t==="active"?"‚ü≥":{database_extraction:"üóÑÔ∏è",script_generation:"üìù",asset_preparation:"üé®",heygen_creation:"ü§ñ",heygen_processing:"‚è≥",scroll_generation:"üì±",creatomate_assembly:"üé¨"}[e]||"‚óã"}getStepTimestamp(e){return new Date().toLocaleString()}getCurrentStepNumber(){var s;const e=((s=this.jobData)==null?void 0:s.progress)||0;return`${Math.min(Math.floor(e/(100/this.processSteps.length))+1,this.processSteps.length)}/${this.processSteps.length}`}calculateDuration(){var r;if(!((r=this.jobData)!=null&&r.startedAt))return"--";const e=new Date(this.jobData.startedAt);let t;["completed","failed","cancelled"].includes(this.jobData.status)?t=this.jobData.completedAt?new Date(this.jobData.completedAt):new Date(this.jobData.startedAt):t=new Date;const s=t-e,o=Math.floor(s/6e4),a=Math.floor(s%6e4/1e3);return o>0?`${o}m ${a}s`:`${a}s`}cleanup(){this.refreshInterval&&clearInterval(this.refreshInterval),this.logUpdateInterval&&clearInterval(this.logUpdateInterval),l.cleanup(),console.log("üßπ Job Detail App cleaned up")}}window.jobDetailApp=new d;document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>{window.jobDetailApp.initialize()}):window.jobDetailApp.initialize();window.addEventListener("beforeunload",()=>{window.jobDetailApp.cleanup()});
//# sourceMappingURL=job-detail-app.js.map
