"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkstreamgank_video_generator_gui"] = self["webpackChunkstreamgank_video_generator_gui"] || []).push([[792],{

/***/ 1796:
/***/ (function(__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {

eval("{\n// UNUSED EXPORTS: default\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __webpack_require__(2675);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __webpack_require__(9463);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __webpack_require__(2259);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.to-primitive.js\nvar es_symbol_to_primitive = __webpack_require__(5700);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __webpack_require__(3418);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __webpack_require__(3792);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js\nvar es_array_map = __webpack_require__(2062);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __webpack_require__(4782);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-primitive.js\nvar es_date_to_primitive = __webpack_require__(9572);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js\nvar es_function_name = __webpack_require__(2010);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js\nvar es_number_constructor = __webpack_require__(2892);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.entries.js\nvar es_object_entries = __webpack_require__(5506);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.from-entries.js\nvar es_object_from_entries = __webpack_require__(3921);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-prototype-of.js\nvar es_object_get_prototype_of = __webpack_require__(875);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.set-prototype-of.js\nvar es_object_set_prototype_of = __webpack_require__(287);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(6099);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.values.js\nvar es_object_values = __webpack_require__(6034);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js\nvar es_promise = __webpack_require__(3362);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(7495);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js\nvar es_regexp_to_string = __webpack_require__(8781);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __webpack_require__(7764);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js\nvar es_string_trim = __webpack_require__(2762);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js\nvar web_dom_collections_for_each = __webpack_require__(3500);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(2953);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js\nvar es_array_find = __webpack_require__(113);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __webpack_require__(4423);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.map.js\nvar es_map = __webpack_require__(6033);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js\nvar es_string_includes = __webpack_require__(1699);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.starts-with.js\nvar es_string_starts_with = __webpack_require__(1392);\n;// ./src/core/DOMManager.js\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * DOM Manager - Professional DOM element management and caching\r\n * Handles all DOM element selection, caching, and basic DOM operations\r\n */\nvar DOMManager = /*#__PURE__*/function () {\n  function DOMManager() {\n    _classCallCheck(this, DOMManager);\n    this.elements = new Map();\n    this.initialized = false;\n    console.log('🎯 DOM Manager initialized');\n  }\n\n  /**\r\n   * Initialize and cache all DOM elements\r\n   */\n  return _createClass(DOMManager, [{\n    key: \"init\",\n    value: function init() {\n      if (this.initialized) return;\n\n      // Cache all DOM elements using a configuration map\n      var elementMap = {\n        // Form elements\n        countrySelect: 'country',\n        platformSelect: 'platform',\n        genreSelect: 'genre',\n        templateSelect: 'template',\n        contentTypeRadios: 'input[name=\"contentType\"]',\n        generateButton: 'generate-video',\n        // Progress elements\n        progressContainer: 'progress-container',\n        progressBar: '.progress-bar',\n        // Preview elements\n        previewCountry: 'preview-country',\n        previewPlatform: 'preview-platform',\n        previewGenre: 'preview-genre',\n        previewTemplate: 'preview-template',\n        previewType: 'preview-type',\n        previewUrl: 'preview-url',\n        // Results elements\n        statusMessages: 'status-messages',\n        videoResults: 'video-results',\n        moviesCount: 'movies-count',\n        videosCount: 'videos-count',\n        groupId: 'group-id',\n        videoGallery: 'video-gallery',\n        videosContainer: 'videos-container',\n        videoCountBadge: 'video-count-badge',\n        // Status and control elements\n        renderingStatus: 'rendering-status',\n        checkStatusBtn: 'check-status-btn',\n        creatomateIdDisplay: 'creatomate-id-display',\n        loadVideoBtn: 'load-video-btn',\n        clearLogsBtn: 'clear-logs-btn',\n        // Queue management elements\n        refreshQueueBtn: 'refresh-queue-btn',\n        clearQueueBtn: 'clear-queue-btn'\n      };\n      this.cacheElements(elementMap);\n      this.initialized = true;\n    }\n\n    /**\r\n     * Cache multiple DOM elements\r\n     * @param {Object} elementMap - Map of element names to selectors\r\n     */\n  }, {\n    key: \"cacheElements\",\n    value: function cacheElements(elementMap) {\n      var _this = this;\n      Object.entries(elementMap).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          selector = _ref2[1];\n        _this.cacheElement(name, selector);\n      });\n    }\n\n    /**\r\n     * Cache a single DOM element\r\n     * @param {string} name - Element name for cache key\r\n     * @param {string} selector - CSS selector or ID\r\n     */\n  }, {\n    key: \"cacheElement\",\n    value: function cacheElement(name, selector) {\n      try {\n        var element;\n        if (selector.startsWith('.') || selector.startsWith('[') || selector.includes(' ')) {\n          // CSS selector\n          element = selector.includes('input[name=') ? document.querySelectorAll(selector) : document.querySelector(selector);\n        } else {\n          // ID selector\n          element = document.getElementById(selector);\n        }\n        if (element) {\n          this.elements.set(name, element);\n        } else {\n          console.warn(\"\\u26A0\\uFE0F Element not found: \".concat(selector));\n        }\n      } catch (error) {\n        console.error(\"\\u274C Failed to cache element \".concat(name, \":\"), error);\n      }\n    }\n\n    /**\r\n     * Get cached DOM element\r\n     * @param {string} name - Element name\r\n     * @returns {Element|null} DOM element or null\r\n     */\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var element = this.elements.get(name);\n      if (!element) {\n        console.warn(\"\\u26A0\\uFE0F Element '\".concat(name, \"' not found in cache\"));\n      }\n      return element;\n    }\n\n    /**\r\n     * Check if element exists in cache\r\n     * @param {string} name - Element name\r\n     * @returns {boolean} Whether element exists\r\n     */\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this.elements.has(name);\n    }\n\n    /**\r\n     * Safely set text content of an element\r\n     * @param {string} name - Element name\r\n     * @param {string} content - Text content\r\n     */\n  }, {\n    key: \"setText\",\n    value: function setText(name, content) {\n      var element = this.get(name);\n      if (element) {\n        element.textContent = content;\n      }\n    }\n\n    /**\r\n     * Safely set HTML content of an element\r\n     * @param {string} name - Element name\r\n     * @param {string} html - HTML content\r\n     */\n  }, {\n    key: \"setHTML\",\n    value: function setHTML(name, html) {\n      var element = this.get(name);\n      if (element) {\n        element.innerHTML = html;\n      }\n    }\n\n    /**\r\n     * Add CSS class to element\r\n     * @param {string} name - Element name\r\n     * @param {string} className - CSS class name\r\n     */\n  }, {\n    key: \"addClass\",\n    value: function addClass(name, className) {\n      var element = this.get(name);\n      if (element && element.classList) {\n        element.classList.add(className);\n      }\n    }\n\n    /**\r\n     * Remove CSS class from element\r\n     * @param {string} name - Element name\r\n     * @param {string} className - CSS class name\r\n     */\n  }, {\n    key: \"removeClass\",\n    value: function removeClass(name, className) {\n      var element = this.get(name);\n      if (element && element.classList) {\n        element.classList.remove(className);\n      }\n    }\n\n    /**\r\n     * Show element by removing display none\r\n     * @param {string} name - Element name\r\n     */\n  }, {\n    key: \"show\",\n    value: function show(name) {\n      var element = this.get(name);\n      if (element) {\n        element.style.display = '';\n      }\n    }\n\n    /**\r\n     * Hide element by setting display none\r\n     * @param {string} name - Element name\r\n     */\n  }, {\n    key: \"hide\",\n    value: function hide(name) {\n      var element = this.get(name);\n      if (element) {\n        element.style.display = 'none';\n      }\n    }\n\n    /**\r\n     * Get selected value from content type radios\r\n     * @returns {string|null} Selected content type or null\r\n     */\n  }, {\n    key: \"getSelectedContentType\",\n    value: function getSelectedContentType() {\n      var radios = this.get('contentTypeRadios');\n      if (radios) {\n        var checkedRadio = Array.from(radios).find(function (radio) {\n          return radio.checked;\n        });\n        return checkedRadio ? checkedRadio.value : null;\n      }\n      return null;\n    }\n\n    /**\r\n     * Get form data as object\r\n     * @returns {Object} Form data\r\n     */\n  }, {\n    key: \"getFormData\",\n    value: function getFormData() {\n      var _this$get, _this$get2, _this$get3, _this$get4;\n      return {\n        country: (_this$get = this.get('countrySelect')) === null || _this$get === void 0 ? void 0 : _this$get.value,\n        platform: (_this$get2 = this.get('platformSelect')) === null || _this$get2 === void 0 ? void 0 : _this$get2.value,\n        genre: (_this$get3 = this.get('genreSelect')) === null || _this$get3 === void 0 ? void 0 : _this$get3.value,\n        template: (_this$get4 = this.get('templateSelect')) === null || _this$get4 === void 0 ? void 0 : _this$get4.value,\n        contentType: this.getSelectedContentType()\n      };\n    }\n  }]);\n}();\n\n// Export singleton instance\n/* harmony default export */ var core_DOMManager = (new DOMManager());\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js\nvar es_array_concat = __webpack_require__(8706);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.construct.js\nvar es_reflect_construct = __webpack_require__(825);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.constructor.js\nvar es_regexp_constructor = __webpack_require__(4864);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.match.js\nvar es_string_match = __webpack_require__(1761);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(5440);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.search.js\nvar es_string_search = __webpack_require__(5746);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/esnext.string.match-all.js\nvar esnext_string_match_all = __webpack_require__(8344);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.js\nvar web_url = __webpack_require__(3296);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.to-json.js\nvar web_url_to_json = __webpack_require__(7208);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url-search-params.js\nvar web_url_search_params = __webpack_require__(8408);\n;// ./src/core/Router.js\nfunction Router_typeof(o) { \"@babel/helpers - typeof\"; return Router_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, Router_typeof(o); }\nfunction Router_slicedToArray(r, e) { return Router_arrayWithHoles(r) || Router_iterableToArrayLimit(r, e) || Router_unsupportedIterableToArray(r, e) || Router_nonIterableRest(); }\nfunction Router_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction Router_iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction Router_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = Router_unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction Router_unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return Router_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? Router_arrayLikeToArray(r, a) : void 0; } }\nfunction Router_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Router_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction Router_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, Router_toPropertyKey(o.key), o); } }\nfunction Router_createClass(e, r, t) { return r && Router_defineProperties(e.prototype, r), t && Router_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction Router_toPropertyKey(t) { var i = Router_toPrimitive(t, \"string\"); return \"symbol\" == Router_typeof(i) ? i : i + \"\"; }\nfunction Router_toPrimitive(t, r) { if (\"object\" != Router_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != Router_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == Router_typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\n/**\r\n * Router Service - Professional client-side routing\r\n * Handles URL-based navigation, route parameters, and browser history\r\n */\n\nvar Router = /*#__PURE__*/function (_EventTarget) {\n  function Router() {\n    var _this;\n    Router_classCallCheck(this, Router);\n    _this = _callSuper(this, Router);\n    _this.routes = new Map();\n    _this.currentRoute = null;\n    _this.currentParams = {};\n    _this.isInitialized = false;\n    _this.basePath = '';\n    console.log('🛤️ Router initialized');\n    return _this;\n  }\n\n  /**\r\n   * Initialize the router and setup event listeners\r\n   */\n  _inherits(Router, _EventTarget);\n  return Router_createClass(Router, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n      if (this.isInitialized) return;\n\n      // Handle browser back/forward buttons\n      window.addEventListener('popstate', function (event) {\n        _this2.handleLocationChange();\n      });\n\n      // Handle initial page load\n      this.handleLocationChange();\n      this.isInitialized = true;\n      console.log('🛤️ Router ready');\n    }\n\n    /**\r\n     * Register a route with its handler\r\n     * @param {string} path - Route pattern (e.g., '/job/:id')\r\n     * @param {Function} handler - Route handler function\r\n     * @param {Object} options - Route options\r\n     */\n  }, {\n    key: \"addRoute\",\n    value: function addRoute(path, handler) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var routePattern = this.pathToRegex(path);\n      this.routes.set(path, {\n        pattern: routePattern,\n        handler: handler,\n        params: this.extractParams(path),\n        title: options.title || 'StreamGank',\n        requiresAuth: options.requiresAuth || false,\n        metadata: options.metadata || {}\n      });\n      console.log(\"\\uD83D\\uDEE4\\uFE0F Route registered: \".concat(path));\n    }\n\n    /**\r\n     * Navigate to a specific path\r\n     * @param {string} path - Target path\r\n     * @param {Object} options - Navigation options\r\n     */\n  }, {\n    key: \"navigate\",\n    value: function navigate(path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$replace = options.replace,\n        replace = _options$replace === void 0 ? false : _options$replace,\n        _options$state = options.state,\n        state = _options$state === void 0 ? null : _options$state;\n      if (replace) {\n        window.history.replaceState(state, '', path);\n      } else {\n        window.history.pushState(state, '', path);\n      }\n      this.handleLocationChange();\n    }\n\n    /**\r\n     * Go back in browser history\r\n     */\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n\n    /**\r\n     * Go forward in browser history\r\n     */\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      window.history.forward();\n    }\n\n    /**\r\n     * Handle location changes (URL changes)\r\n     */\n  }, {\n    key: \"handleLocationChange\",\n    value: function handleLocationChange() {\n      var path = window.location.pathname;\n      var matchedRoute = this.matchRoute(path);\n      if (matchedRoute) {\n        var route = matchedRoute.route,\n          params = matchedRoute.params,\n          routeKey = matchedRoute.routeKey;\n\n        // Update current state\n        var previousRoute = this.currentRoute;\n        this.currentRoute = routeKey;\n        this.currentParams = params;\n\n        // Update document title\n        if (route.title) {\n          document.title = route.title;\n        }\n\n        // Emit route change event\n        this.emit('routeChange', {\n          path: path,\n          route: routeKey,\n          params: params,\n          previousRoute: previousRoute,\n          metadata: route.metadata\n        });\n\n        // Call route handler\n        try {\n          route.handler(params, path);\n          console.log(\"\\uD83D\\uDEE4\\uFE0F Navigated to: \".concat(path, \" (\").concat(routeKey, \")\"));\n        } catch (error) {\n          console.error('🛤️ Route handler error:', error);\n          this.emit('routeError', {\n            path: path,\n            error: error\n          });\n        }\n      } else {\n        // No route matched - handle 404\n        this.handle404(path);\n      }\n    }\n\n    /**\r\n     * Match current path against registered routes\r\n     * @param {string} path - Current path\r\n     * @returns {Object|null} Matched route info or null\r\n     */\n  }, {\n    key: \"matchRoute\",\n    value: function matchRoute(path) {\n      var _iterator = _createForOfIteratorHelper(this.routes.entries()),\n        _step;\n      try {\n        var _loop = function _loop() {\n            var _step$value = Router_slicedToArray(_step.value, 2),\n              routeKey = _step$value[0],\n              route = _step$value[1];\n            var match = path.match(route.pattern);\n            if (match) {\n              var params = {};\n\n              // Extract route parameters\n              route.params.forEach(function (paramName, index) {\n                params[paramName] = match[index + 1];\n              });\n              return {\n                v: {\n                  route: route,\n                  params: params,\n                  routeKey: routeKey,\n                  match: match\n                }\n              };\n            }\n          },\n          _ret;\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _ret = _loop();\n          if (_ret) return _ret.v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return null;\n    }\n\n    /**\r\n     * Convert path pattern to regex\r\n     * @param {string} path - Path pattern (e.g., '/job/:id')\r\n     * @returns {RegExp} Route regex\r\n     */\n  }, {\n    key: \"pathToRegex\",\n    value: function pathToRegex(path) {\n      // Escape special regex characters except for parameter patterns\n      var escaped = path.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&').replace(/\\\\:([^\\/]+)/g, '([^/]+)'); // Convert :param to capture group\n\n      return new RegExp(\"^\".concat(escaped, \"$\"));\n    }\n\n    /**\r\n     * Extract parameter names from path pattern\r\n     * @param {string} path - Path pattern\r\n     * @returns {Array<string>} Parameter names\r\n     */\n  }, {\n    key: \"extractParams\",\n    value: function extractParams(path) {\n      var params = [];\n      var matches = path.matchAll(/:([^\\/]+)/g);\n      var _iterator2 = _createForOfIteratorHelper(matches),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var match = _step2.value;\n          params.push(match[1]);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return params;\n    }\n\n    /**\r\n     * Handle 404 - route not found\r\n     * @param {string} path - Unmatched path\r\n     */\n  }, {\n    key: \"handle404\",\n    value: function handle404(path) {\n      console.warn(\"\\uD83D\\uDEE4\\uFE0F No route found for: \".concat(path));\n\n      // Emit 404 event\n      this.emit('notFound', {\n        path: path\n      });\n\n      // Try to redirect to dashboard or show 404 page\n      if (path !== '/' && path !== '/dashboard') {\n        this.navigate('/dashboard', {\n          replace: true\n        });\n      }\n    }\n\n    /**\r\n     * Generate URL for a route with parameters\r\n     * @param {string} routePath - Route pattern\r\n     * @param {Object} params - Route parameters\r\n     * @returns {string} Generated URL\r\n     */\n  }, {\n    key: \"generateUrl\",\n    value: function generateUrl(routePath) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var url = routePath;\n\n      // Replace parameters in the path\n      for (var _i = 0, _Object$entries = Object.entries(params); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = Router_slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n        url = url.replace(\":\".concat(key), encodeURIComponent(value));\n      }\n      return url;\n    }\n\n    /**\r\n     * Get current route information\r\n     * @returns {Object} Current route info\r\n     */\n  }, {\n    key: \"getCurrentRoute\",\n    value: function getCurrentRoute() {\n      return {\n        path: window.location.pathname,\n        route: this.currentRoute,\n        params: this.currentParams,\n        hash: window.location.hash,\n        search: window.location.search\n      };\n    }\n\n    /**\r\n     * Check if current route matches pattern\r\n     * @param {string} pattern - Route pattern to check\r\n     * @returns {boolean} Whether current route matches\r\n     */\n  }, {\n    key: \"isCurrentRoute\",\n    value: function isCurrentRoute(pattern) {\n      return this.currentRoute === pattern;\n    }\n\n    /**\r\n     * Add query parameters to current URL\r\n     * @param {Object} params - Query parameters to add\r\n     */\n  }, {\n    key: \"updateQuery\",\n    value: function updateQuery(params) {\n      var url = new URL(window.location);\n      for (var _i2 = 0, _Object$entries2 = Object.entries(params); _i2 < _Object$entries2.length; _i2++) {\n        var _Object$entries2$_i = Router_slicedToArray(_Object$entries2[_i2], 2),\n          key = _Object$entries2$_i[0],\n          value = _Object$entries2$_i[1];\n        if (value === null || value === undefined) {\n          url.searchParams.delete(key);\n        } else {\n          url.searchParams.set(key, value);\n        }\n      }\n      this.navigate(url.pathname + url.search, {\n        replace: true\n      });\n    }\n\n    /**\r\n     * Get query parameters from current URL\r\n     * @returns {Object} Query parameters\r\n     */\n  }, {\n    key: \"getQuery\",\n    value: function getQuery() {\n      var params = {};\n      var searchParams = new URLSearchParams(window.location.search);\n      var _iterator3 = _createForOfIteratorHelper(searchParams.entries()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = Router_slicedToArray(_step3.value, 2),\n            key = _step3$value[0],\n            value = _step3$value[1];\n          params[key] = value;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return params;\n    }\n\n    /**\r\n     * Cleanup router resources\r\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      window.removeEventListener('popstate', this.handleLocationChange);\n      this.routes.clear();\n      this.isInitialized = false;\n      console.log('🛤️ Router cleaned up');\n    }\n\n    /**\r\n     * Emit custom events\r\n     * @param {string} eventName - Event name\r\n     * @param {Object} data - Event data\r\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(eventName, data) {\n      var event = new CustomEvent(eventName, {\n        detail: data\n      });\n      this.dispatchEvent(event);\n    }\n  }]);\n}(/*#__PURE__*/_wrapNativeSuper(EventTarget));\n\n// Export singleton instance\n/* harmony default export */ var core_Router = (new Router());\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js\nvar es_array_filter = __webpack_require__(2008);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\nvar es_object_get_own_property_descriptor = __webpack_require__(3851);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\nvar es_object_get_own_property_descriptors = __webpack_require__(1278);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js\nvar es_object_keys = __webpack_require__(9432);\n;// ./src/services/APIService.js\nfunction APIService_typeof(o) { \"@babel/helpers - typeof\"; return APIService_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, APIService_typeof(o); }\nfunction APIService_slicedToArray(r, e) { return APIService_arrayWithHoles(r) || APIService_iterableToArrayLimit(r, e) || APIService_unsupportedIterableToArray(r, e) || APIService_nonIterableRest(); }\nfunction APIService_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction APIService_iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction APIService_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction APIService_createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = APIService_unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction APIService_unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return APIService_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? APIService_arrayLikeToArray(r, a) : void 0; } }\nfunction APIService_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _regeneratorValues(e) { if (null != e) { var t = e[\"function\" == typeof Symbol && Symbol.iterator || \"@@iterator\"], r = 0; if (t) return t.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) return { next: function next() { return e && r >= e.length && (e = void 0), { value: e && e[r++], done: !e }; } }; } throw new TypeError(APIService_typeof(e) + \" is not iterable\"); }\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, _regeneratorDefine2(e, r, n, t); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = APIService_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction APIService_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction APIService_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, APIService_toPropertyKey(o.key), o); } }\nfunction APIService_createClass(e, r, t) { return r && APIService_defineProperties(e.prototype, r), t && APIService_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction APIService_toPropertyKey(t) { var i = APIService_toPrimitive(t, \"string\"); return \"symbol\" == APIService_typeof(i) ? i : i + \"\"; }\nfunction APIService_toPrimitive(t, r) { if (\"object\" != APIService_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != APIService_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * API Service - Professional HTTP client for server communication\r\n * Handles all API requests with caching, error handling, and retry logic\r\n */\nvar APIService = /*#__PURE__*/function () {\n  function APIService() {\n    APIService_classCallCheck(this, APIService);\n    this.baseURL = window.location.origin;\n    this.timeout = 30000; // 30 second timeout\n    this.cache = new Map();\n    this.cacheTTL = 5000; // 5 second cache TTL\n    this.retryAttempts = 3;\n    this.retryDelay = 1000; // 1 second base delay\n\n    console.log('🌐 API Service initialized');\n  }\n\n  /**\r\n   * Make HTTP request with professional error handling and caching\r\n   * @param {string} method - HTTP method\r\n   * @param {string} endpoint - API endpoint\r\n   * @param {Object} data - Request data\r\n   * @param {Object} options - Additional options\r\n   * @returns {Promise<Object>} Response data\r\n   */\n  return APIService_createClass(APIService, [{\n    key: \"request\",\n    value: (function () {\n      var _request = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(method, endpoint) {\n        var _this = this;\n        var data,\n          options,\n          url,\n          cacheKey,\n          cached,\n          requestOptions,\n          controller,\n          timeoutId,\n          lastError,\n          _loop,\n          _ret,\n          attempt,\n          _args2 = arguments;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              data = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : null;\n              options = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};\n              url = \"\".concat(this.baseURL).concat(endpoint);\n              cacheKey = \"\".concat(method, \":\").concat(endpoint, \":\").concat(JSON.stringify(data)); // Check cache for GET requests\n              if (!(method === 'GET' && this.cache.has(cacheKey))) {\n                _context2.n = 2;\n                break;\n              }\n              cached = this.cache.get(cacheKey);\n              if (!(Date.now() - cached.timestamp < this.cacheTTL)) {\n                _context2.n = 1;\n                break;\n              }\n              console.log(\"\\uD83D\\uDCCB Cache hit: \".concat(endpoint));\n              return _context2.a(2, cached.data);\n            case 1:\n              this.cache.delete(cacheKey);\n            case 2:\n              requestOptions = _objectSpread({\n                method: method,\n                headers: _objectSpread({\n                  'Content-Type': 'application/json'\n                }, options.headers)\n              }, options);\n              if (data && method !== 'GET') {\n                requestOptions.body = JSON.stringify(data);\n              }\n\n              // Add timeout using AbortController\n              controller = new AbortController();\n              timeoutId = setTimeout(function () {\n                return controller.abort();\n              }, this.timeout);\n              requestOptions.signal = controller.signal;\n              // Retry logic\n              _loop = /*#__PURE__*/_regenerator().m(function _loop() {\n                var startTime, response, duration, responseData, delay, _t;\n                return _regenerator().w(function (_context) {\n                  while (1) switch (_context.p = _context.n) {\n                    case 0:\n                      _context.p = 0;\n                      startTime = Date.now();\n                      _context.n = 1;\n                      return fetch(url, requestOptions);\n                    case 1:\n                      response = _context.v;\n                      duration = Date.now() - startTime;\n                      clearTimeout(timeoutId);\n\n                      // Log slow requests\n                      if (duration > 2000) {\n                        console.warn(\"\\u26A0\\uFE0F Slow API request: \".concat(endpoint, \" (\").concat(duration, \"ms)\"));\n                      }\n                      if (response.ok) {\n                        _context.n = 2;\n                        break;\n                      }\n                      throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n                    case 2:\n                      _context.n = 3;\n                      return response.json();\n                    case 3:\n                      responseData = _context.v;\n                      // Cache successful GET requests\n                      if (method === 'GET' && responseData.success) {\n                        _this.cache.set(cacheKey, {\n                          data: responseData,\n                          timestamp: Date.now()\n                        });\n                      }\n                      return _context.a(2, {\n                        v: responseData\n                      });\n                    case 4:\n                      _context.p = 4;\n                      _t = _context.v;\n                      lastError = _t;\n                      clearTimeout(timeoutId);\n                      if (!(_t.name === 'AbortError')) {\n                        _context.n = 5;\n                        break;\n                      }\n                      throw new Error(\"Request timeout: \".concat(endpoint));\n                    case 5:\n                      if (!(attempt < _this.retryAttempts)) {\n                        _context.n = 7;\n                        break;\n                      }\n                      delay = _this.retryDelay * Math.pow(2, attempt - 1); // Exponential backoff\n                      console.warn(\"\\u26A0\\uFE0F Request failed (attempt \".concat(attempt, \"/\").concat(_this.retryAttempts, \"), retrying in \").concat(delay, \"ms:\"), _t.message);\n                      _context.n = 6;\n                      return new Promise(function (resolve) {\n                        return setTimeout(resolve, delay);\n                      });\n                    case 6:\n                      _context.n = 8;\n                      break;\n                    case 7:\n                      console.error(\"\\u274C API Error after \".concat(_this.retryAttempts, \" attempts (\").concat(method, \" \").concat(endpoint, \"):\"), _t);\n                    case 8:\n                      return _context.a(2);\n                  }\n                }, _loop, null, [[0, 4]]);\n              });\n              attempt = 1;\n            case 3:\n              if (!(attempt <= this.retryAttempts)) {\n                _context2.n = 6;\n                break;\n              }\n              return _context2.d(_regeneratorValues(_loop()), 4);\n            case 4:\n              _ret = _context2.v;\n              if (!_ret) {\n                _context2.n = 5;\n                break;\n              }\n              return _context2.a(2, _ret.v);\n            case 5:\n              attempt++;\n              _context2.n = 3;\n              break;\n            case 6:\n              throw lastError;\n            case 7:\n              return _context2.a(2);\n          }\n        }, _callee, this);\n      }));\n      function request(_x, _x2) {\n        return _request.apply(this, arguments);\n      }\n      return request;\n    }()\n    /**\r\n     * GET request\r\n     * @param {string} endpoint - API endpoint\r\n     * @param {Object} options - Request options\r\n     * @returns {Promise<Object>} Response data\r\n     */\n    )\n  }, {\n    key: \"get\",\n    value: (function () {\n      var _get = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(endpoint) {\n        var options,\n          _args3 = arguments;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              return _context3.a(2, this.request('GET', endpoint, null, options));\n          }\n        }, _callee2, this);\n      }));\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n    /**\r\n     * POST request\r\n     * @param {string} endpoint - API endpoint\r\n     * @param {Object} data - Request data\r\n     * @param {Object} options - Request options\r\n     * @returns {Promise<Object>} Response data\r\n     */\n    )\n  }, {\n    key: \"post\",\n    value: (function () {\n      var _post = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(endpoint) {\n        var data,\n          options,\n          _args4 = arguments;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              data = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n              return _context4.a(2, this.request('POST', endpoint, data, options));\n          }\n        }, _callee3, this);\n      }));\n      function post(_x4) {\n        return _post.apply(this, arguments);\n      }\n      return post;\n    }()\n    /**\r\n     * PUT request\r\n     * @param {string} endpoint - API endpoint\r\n     * @param {Object} data - Request data\r\n     * @param {Object} options - Request options\r\n     * @returns {Promise<Object>} Response data\r\n     */\n    )\n  }, {\n    key: \"put\",\n    value: (function () {\n      var _put = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(endpoint) {\n        var data,\n          options,\n          _args5 = arguments;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.n) {\n            case 0:\n              data = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n              options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};\n              return _context5.a(2, this.request('PUT', endpoint, data, options));\n          }\n        }, _callee4, this);\n      }));\n      function put(_x5) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n    /**\r\n     * DELETE request\r\n     * @param {string} endpoint - API endpoint\r\n     * @param {Object} options - Request options\r\n     * @returns {Promise<Object>} Response data\r\n     */\n    )\n  }, {\n    key: \"delete\",\n    value: (function () {\n      var _delete2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(endpoint) {\n        var options,\n          _args6 = arguments;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n              return _context6.a(2, this.request('DELETE', endpoint, null, options));\n          }\n        }, _callee5, this);\n      }));\n      function _delete(_x6) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }() // === StreamGank Specific API Methods ===\n    /**\r\n     * Generate video request\r\n     * @param {Object} params - Video generation parameters\r\n     * @returns {Promise<Object>} Job response\r\n     */\n    )\n  }, {\n    key: \"generateVideo\",\n    value: function () {\n      var _generateVideo = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(params) {\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.n) {\n            case 0:\n              return _context7.a(2, this.post('/api/generate', params));\n          }\n        }, _callee6, this);\n      }));\n      function generateVideo(_x7) {\n        return _generateVideo.apply(this, arguments);\n      }\n      return generateVideo;\n    }()\n    /**\r\n     * Get job status\r\n     * @param {string} jobId - Job ID\r\n     * @returns {Promise<Object>} Job status\r\n     */\n  }, {\n    key: \"getJobStatus\",\n    value: (function () {\n      var _getJobStatus = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(jobId) {\n        return _regenerator().w(function (_context8) {\n          while (1) switch (_context8.n) {\n            case 0:\n              return _context8.a(2, this.get(\"/api/job/\".concat(jobId)));\n          }\n        }, _callee7, this);\n      }));\n      function getJobStatus(_x8) {\n        return _getJobStatus.apply(this, arguments);\n      }\n      return getJobStatus;\n    }()\n    /**\r\n     * Get queue status with optimized caching\r\n     * @returns {Promise<Object>} Queue statistics\r\n     */\n    )\n  }, {\n    key: \"getQueueStatus\",\n    value: (function () {\n      var _getQueueStatus = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {\n        return _regenerator().w(function (_context9) {\n          while (1) switch (_context9.n) {\n            case 0:\n              return _context9.a(2, this.get('/api/queue/status'));\n          }\n        }, _callee8, this);\n      }));\n      function getQueueStatus() {\n        return _getQueueStatus.apply(this, arguments);\n      }\n      return getQueueStatus;\n    }()\n    /**\r\n     * Get all jobs in queue\r\n     * @returns {Promise<Object>} All jobs data\r\n     */\n    )\n  }, {\n    key: \"getAllJobs\",\n    value: (function () {\n      var _getAllJobs = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {\n        return _regenerator().w(function (_context0) {\n          while (1) switch (_context0.n) {\n            case 0:\n              return _context0.a(2, this.get('/api/queue/jobs'));\n          }\n        }, _callee9, this);\n      }));\n      function getAllJobs() {\n        return _getAllJobs.apply(this, arguments);\n      }\n      return getAllJobs;\n    }()\n    /**\r\n     * Clear queue\r\n     * @returns {Promise<Object>} Clear operation result\r\n     */\n    )\n  }, {\n    key: \"clearQueue\",\n    value: (function () {\n      var _clearQueue = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {\n        return _regenerator().w(function (_context1) {\n          while (1) switch (_context1.n) {\n            case 0:\n              return _context1.a(2, this.post('/api/queue/clear'));\n          }\n        }, _callee0, this);\n      }));\n      function clearQueue() {\n        return _clearQueue.apply(this, arguments);\n      }\n      return clearQueue;\n    }()\n    /**\r\n     * Cancel specific job\r\n     * @param {string} jobId - Job ID to cancel\r\n     * @returns {Promise<Object>} Cancel operation result\r\n     */\n    )\n  }, {\n    key: \"cancelJob\",\n    value: (function () {\n      var _cancelJob = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1(jobId) {\n        return _regenerator().w(function (_context10) {\n          while (1) switch (_context10.n) {\n            case 0:\n              return _context10.a(2, this.post(\"/api/job/\".concat(jobId, \"/cancel\")));\n          }\n        }, _callee1, this);\n      }));\n      function cancelJob(_x9) {\n        return _cancelJob.apply(this, arguments);\n      }\n      return cancelJob;\n    }()\n    /**\r\n     * Validate StreamGank URL\r\n     * @param {string} url - URL to validate\r\n     * @returns {Promise<Object>} Validation result\r\n     */\n    )\n  }, {\n    key: \"validateUrl\",\n    value: (function () {\n      var _validateUrl = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10(url) {\n        return _regenerator().w(function (_context11) {\n          while (1) switch (_context11.n) {\n            case 0:\n              return _context11.a(2, this.post('/api/validate-url', {\n                url: url\n              }));\n          }\n        }, _callee10, this);\n      }));\n      function validateUrl(_x0) {\n        return _validateUrl.apply(this, arguments);\n      }\n      return validateUrl;\n    }()\n    /**\r\n     * Get Creatomate render status\r\n     * @param {string} renderId - Render ID\r\n     * @returns {Promise<Object>} Render status\r\n     */\n    )\n  }, {\n    key: \"getCreatomateStatus\",\n    value: (function () {\n      var _getCreatomateStatus = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11(renderId) {\n        return _regenerator().w(function (_context12) {\n          while (1) switch (_context12.n) {\n            case 0:\n              return _context12.a(2, this.post('/api/creatomate/status', {\n                renderId: renderId\n              }));\n          }\n        }, _callee11, this);\n      }));\n      function getCreatomateStatus(_x1) {\n        return _getCreatomateStatus.apply(this, arguments);\n      }\n      return getCreatomateStatus;\n    }()\n    /**\r\n     * Get platforms for country\r\n     * @param {string} country - Country code\r\n     * @returns {Promise<Object>} Platform list\r\n     */\n    )\n  }, {\n    key: \"getPlatforms\",\n    value: (function () {\n      var _getPlatforms = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12(country) {\n        return _regenerator().w(function (_context13) {\n          while (1) switch (_context13.n) {\n            case 0:\n              return _context13.a(2, this.get(\"/api/platforms/\".concat(country)));\n          }\n        }, _callee12, this);\n      }));\n      function getPlatforms(_x10) {\n        return _getPlatforms.apply(this, arguments);\n      }\n      return getPlatforms;\n    }()\n    /**\r\n     * Get genres for platform\r\n     * @param {string} country - Country code\r\n     * @param {string} platform - Platform name\r\n     * @returns {Promise<Object>} Genre list\r\n     */\n    )\n  }, {\n    key: \"getGenres\",\n    value: (function () {\n      var _getGenres = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13(country, platform) {\n        return _regenerator().w(function (_context14) {\n          while (1) switch (_context14.n) {\n            case 0:\n              return _context14.a(2, this.get(\"/api/genres?country=\".concat(country, \"&platform=\").concat(platform)));\n          }\n        }, _callee13, this);\n      }));\n      function getGenres(_x11, _x12) {\n        return _getGenres.apply(this, arguments);\n      }\n      return getGenres;\n    }() // === Webhook API Methods ===\n    /**\r\n     * Get webhook system status\r\n     * @returns {Promise<Object>} Webhook status\r\n     */\n    )\n  }, {\n    key: \"getWebhookStatus\",\n    value: function () {\n      var _getWebhookStatus = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14() {\n        return _regenerator().w(function (_context15) {\n          while (1) switch (_context15.n) {\n            case 0:\n              return _context15.a(2, this.get('/api/webhooks/status'));\n          }\n        }, _callee14, this);\n      }));\n      function getWebhookStatus() {\n        return _getWebhookStatus.apply(this, arguments);\n      }\n      return getWebhookStatus;\n    }()\n    /**\r\n     * Test webhook endpoint\r\n     * @param {string} url - Webhook URL to test\r\n     * @returns {Promise<Object>} Test result\r\n     */\n  }, {\n    key: \"testWebhook\",\n    value: (function () {\n      var _testWebhook = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15(url) {\n        return _regenerator().w(function (_context16) {\n          while (1) switch (_context16.n) {\n            case 0:\n              return _context16.a(2, this.post('/api/webhooks/test', {\n                url: url\n              }));\n          }\n        }, _callee15, this);\n      }));\n      function testWebhook(_x13) {\n        return _testWebhook.apply(this, arguments);\n      }\n      return testWebhook;\n    }()\n    /**\r\n     * Trigger webhook manually\r\n     * @param {string} event - Event name\r\n     * @param {Object} data - Event data\r\n     * @returns {Promise<Object>} Trigger result\r\n     */\n    )\n  }, {\n    key: \"triggerWebhook\",\n    value: (function () {\n      var _triggerWebhook = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16(event, data) {\n        return _regenerator().w(function (_context17) {\n          while (1) switch (_context17.n) {\n            case 0:\n              return _context17.a(2, this.post('/api/webhooks/trigger', {\n                event: event,\n                data: data\n              }));\n          }\n        }, _callee16, this);\n      }));\n      function triggerWebhook(_x14, _x15) {\n        return _triggerWebhook.apply(this, arguments);\n      }\n      return triggerWebhook;\n    }() // === Utility Methods ===\n    /**\r\n     * Clear API cache\r\n     */\n    )\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.cache.clear();\n      console.log('🧹 API cache cleared');\n    }\n\n    /**\r\n     * Get cache statistics\r\n     * @returns {Object} Cache stats\r\n     */\n  }, {\n    key: \"getCacheStats\",\n    value: function getCacheStats() {\n      var now = Date.now();\n      var validEntries = 0;\n      var expiredEntries = 0;\n      var _iterator = APIService_createForOfIteratorHelper(this.cache),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = APIService_slicedToArray(_step.value, 2),\n            key = _step$value[0],\n            entry = _step$value[1];\n          if (now - entry.timestamp < this.cacheTTL) {\n            validEntries++;\n          } else {\n            expiredEntries++;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return {\n        total: this.cache.size,\n        valid: validEntries,\n        expired: expiredEntries,\n        hitRate: validEntries / (validEntries + expiredEntries) || 0\n      };\n    }\n  }]);\n}();\n\n// Export singleton instance\n/* harmony default export */ var services_APIService = (new APIService());\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.join.js\nvar es_array_join = __webpack_require__(8598);\n;// ./src/components/UIManager.js\nfunction UIManager_typeof(o) { \"@babel/helpers - typeof\"; return UIManager_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, UIManager_typeof(o); }\nfunction UIManager_slicedToArray(r, e) { return UIManager_arrayWithHoles(r) || UIManager_iterableToArrayLimit(r, e) || UIManager_unsupportedIterableToArray(r, e) || UIManager_nonIterableRest(); }\nfunction UIManager_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction UIManager_unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return UIManager_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? UIManager_arrayLikeToArray(r, a) : void 0; } }\nfunction UIManager_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction UIManager_iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction UIManager_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction UIManager_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction UIManager_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? UIManager_ownKeys(Object(t), !0).forEach(function (r) { UIManager_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : UIManager_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction UIManager_defineProperty(e, r, t) { return (r = UIManager_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction UIManager_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction UIManager_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, UIManager_toPropertyKey(o.key), o); } }\nfunction UIManager_createClass(e, r, t) { return r && UIManager_defineProperties(e.prototype, r), t && UIManager_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction UIManager_toPropertyKey(t) { var i = UIManager_toPrimitive(t, \"string\"); return \"symbol\" == UIManager_typeof(i) ? i : i + \"\"; }\nfunction UIManager_toPrimitive(t, r) { if (\"object\" != UIManager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != UIManager_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * UI Manager - Professional user interface state management\r\n * Handles status messages, progress tracking, button states, and UI updates\r\n */\n\nvar UIManager = /*#__PURE__*/function () {\n  function UIManager() {\n    UIManager_classCallCheck(this, UIManager);\n    this.statusMessageId = 0;\n    this.maxStatusMessages = 50;\n    this.autoHideDelay = 5000; // 5 seconds\n    this.completedVideos = [];\n    this.videoReadyMessageShown = false;\n    console.log('🎨 UI Manager initialized');\n  }\n\n  /**\r\n   * Initialize UI Manager\r\n   */\n  return UIManager_createClass(UIManager, [{\n    key: \"init\",\n    value: function init() {\n      this.setupEventListeners();\n      this.initializeProgressTracking();\n      console.log('🎨 UI Manager ready');\n    }\n\n    /**\r\n     * Setup UI event listeners\r\n     */\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      // Clear logs button\n      var clearLogsBtn = core_DOMManager.get('clearLogsBtn');\n      if (clearLogsBtn) {\n        clearLogsBtn.addEventListener('click', function () {\n          return _this.clearStatusMessages();\n        });\n      }\n\n      // Generate button state management\n      var generateButton = core_DOMManager.get('generateButton');\n      if (generateButton) {\n        generateButton.addEventListener('click', function (e) {\n          if (generateButton.disabled) {\n            e.preventDefault();\n            _this.addStatusMessage('warning', '⚠️', 'Please wait for current generation to complete');\n          }\n        });\n      }\n    }\n\n    /**\r\n     * Initialize progress tracking system\r\n     */\n  }, {\n    key: \"initializeProgressTracking\",\n    value: function initializeProgressTracking() {\n      core_DOMManager.hide('progressContainer');\n    }\n\n    // === Status Message Management ===\n\n    /**\r\n     * Add professional status message to UI\r\n     * @param {string} type - Message type (success, error, info, warning)\r\n     * @param {string} emoji - Emoji icon\r\n     * @param {string} message - Message text\r\n     * @param {boolean} autoHide - Whether to auto-hide message\r\n     */\n  }, {\n    key: \"addStatusMessage\",\n    value: function addStatusMessage(type, emoji, message) {\n      var _this2 = this;\n      var autoHide = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var statusMessages = core_DOMManager.get('statusMessages');\n      if (!statusMessages) {\n        console.warn('⚠️ Status messages container not found');\n        return;\n      }\n      this.statusMessageId++;\n      var messageId = \"status-msg-\".concat(this.statusMessageId);\n      var timestamp = new Date().toLocaleTimeString();\n\n      // Create message element\n      var messageElement = document.createElement('div');\n      messageElement.id = messageId;\n      messageElement.className = \"alert alert-\".concat(this.getBootstrapClass(type), \" alert-dismissible fade show\");\n      messageElement.innerHTML = \"\\n            <div class=\\\"d-flex align-items-center\\\">\\n                <span class=\\\"me-2\\\" style=\\\"font-size: 1.2em;\\\">\".concat(emoji, \"</span>\\n                <div class=\\\"flex-grow-1\\\">\\n                    <strong>\").concat(message, \"</strong>\\n                    <small class=\\\"text-muted d-block\\\">\\n                        <i class=\\\"fas fa-clock me-1\\\"></i>\").concat(timestamp, \"\\n                    </small>\\n                </div>\\n                <button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"alert\\\"></button>\\n            </div>\\n        \");\n\n      // Add to container (newest at top)\n      statusMessages.insertBefore(messageElement, statusMessages.firstChild);\n\n      // Auto-hide if enabled\n      if (autoHide && type !== 'error') {\n        setTimeout(function () {\n          _this2.removeStatusMessage(messageId);\n        }, this.autoHideDelay);\n      }\n\n      // Limit number of messages\n      this.limitStatusMessages();\n\n      // Scroll to show new message\n      messageElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest'\n      });\n      console.log(\"\\uD83D\\uDCDD Status: \".concat(type, \" - \").concat(message));\n    }\n\n    /**\r\n     * Get Bootstrap CSS class for message type\r\n     * @param {string} type - Message type\r\n     * @returns {string} Bootstrap class\r\n     */\n  }, {\n    key: \"getBootstrapClass\",\n    value: function getBootstrapClass(type) {\n      var classMap = {\n        success: 'success',\n        error: 'danger',\n        warning: 'warning',\n        info: 'info',\n        primary: 'primary'\n      };\n      return classMap[type] || 'info';\n    }\n\n    /**\r\n     * Remove status message by ID\r\n     * @param {string} messageId - Message ID to remove\r\n     */\n  }, {\n    key: \"removeStatusMessage\",\n    value: function removeStatusMessage(messageId) {\n      var element = document.getElementById(messageId);\n      if (element) {\n        element.classList.add('fade');\n        setTimeout(function () {\n          if (element.parentNode) {\n            element.parentNode.removeChild(element);\n          }\n        }, 150);\n      }\n    }\n\n    /**\r\n     * Clear all status messages\r\n     */\n  }, {\n    key: \"clearStatusMessages\",\n    value: function clearStatusMessages() {\n      var statusMessages = core_DOMManager.get('statusMessages');\n      if (statusMessages) {\n        statusMessages.innerHTML = '';\n        this.statusMessageId = 0;\n        console.log('🧹 Status messages cleared');\n      }\n    }\n\n    /**\r\n     * Limit number of status messages\r\n     */\n  }, {\n    key: \"limitStatusMessages\",\n    value: function limitStatusMessages() {\n      var statusMessages = core_DOMManager.get('statusMessages');\n      if (!statusMessages) return;\n      var messages = statusMessages.children;\n      while (messages.length > this.maxStatusMessages) {\n        statusMessages.removeChild(messages[messages.length - 1]);\n      }\n    }\n\n    // === Progress Bar Management ===\n\n    /**\r\n     * Show progress bar\r\n     */\n  }, {\n    key: \"showProgress\",\n    value: function showProgress() {\n      core_DOMManager.show('progressContainer');\n      this.updateProgress(0, 'Initializing...');\n    }\n\n    /**\r\n     * Hide progress bar\r\n     */\n  }, {\n    key: \"hideProgress\",\n    value: function hideProgress() {\n      core_DOMManager.hide('progressContainer');\n    }\n\n    /**\r\n     * Update progress bar with percentage and message\r\n     * @param {number} percentage - Progress percentage (0-100)\r\n     * @param {string} message - Progress message\r\n     */\n  }, {\n    key: \"updateProgress\",\n    value: function updateProgress(percentage) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var progressBar = core_DOMManager.get('progressBar');\n      if (progressBar) {\n        progressBar.style.width = \"\".concat(percentage, \"%\");\n        progressBar.setAttribute('aria-valuenow', percentage);\n\n        // Update progress text\n        if (message) {\n          progressBar.textContent = \"\".concat(Math.round(percentage), \"% - \").concat(message);\n        } else {\n          progressBar.textContent = \"\".concat(Math.round(percentage), \"%\");\n        }\n\n        // Update progress bar color based on percentage\n        progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated ' + this.getProgressBarClass(percentage);\n      }\n    }\n\n    /**\r\n     * Get progress bar CSS class based on percentage\r\n     * @param {number} percentage - Progress percentage\r\n     * @returns {string} CSS class\r\n     */\n  }, {\n    key: \"getProgressBarClass\",\n    value: function getProgressBarClass(percentage) {\n      if (percentage >= 100) return 'bg-success';\n      if (percentage >= 75) return 'bg-info';\n      if (percentage >= 50) return 'bg-warning';\n      return 'bg-primary';\n    }\n\n    // === Button State Management ===\n\n    /**\r\n     * Enable generate button\r\n     */\n  }, {\n    key: \"enableGenerateButton\",\n    value: function enableGenerateButton() {\n      var button = core_DOMManager.get('generateButton');\n      if (button) {\n        button.disabled = false;\n        button.innerHTML = '<i class=\"fas fa-play me-2\"></i>Generate Video';\n        button.classList.remove('btn-secondary');\n        button.classList.add('btn-primary');\n      }\n    }\n\n    /**\r\n     * Disable generate button with custom message\r\n     * @param {string} message - Button message during disabled state\r\n     */\n  }, {\n    key: \"disableGenerateButton\",\n    value: function disableGenerateButton() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Processing...';\n      var button = core_DOMManager.get('generateButton');\n      if (button) {\n        button.disabled = true;\n        button.innerHTML = \"<i class=\\\"fas fa-spinner fa-spin me-2\\\"></i>\".concat(message);\n        button.classList.remove('btn-primary');\n        button.classList.add('btn-secondary');\n      }\n    }\n\n    // === Queue Status Display ===\n\n    /**\r\n     * Update queue statistics in UI\r\n     * @param {Object} stats - Queue statistics from server\r\n     */\n  }, {\n    key: \"updateQueueStats\",\n    value: function updateQueueStats(stats) {\n      // Update basic queue stats\n      core_DOMManager.setText('queue-pending', stats.pending || 0);\n      core_DOMManager.setText('queue-processing', stats.processing || 0);\n      core_DOMManager.setText('queue-completed', stats.completed || 0);\n      core_DOMManager.setText('queue-failed', stats.failed || 0);\n\n      // Update worker information\n      this.updateWorkerStats(stats);\n\n      // Show debug info if available\n      if (stats._debug || stats._poolUsed || stats._fallback) {\n        var debugInfo = [];\n        if (stats._debug) debugInfo.push(\"API: \".concat(stats._debug.duration));\n        if (stats._poolUsed) debugInfo.push('Pool: ✓');\n        if (stats._fallback) debugInfo.push('Fallback: ✓');\n        if (stats._error) debugInfo.push(\"Errors: \".concat(stats._errorCount || 0));\n        console.log('📊 Queue update:', UIManager_objectSpread(UIManager_objectSpread({}, stats), {}, {\n          debug: debugInfo.join(', ')\n        }));\n      }\n    }\n\n    /**\r\n     * Update worker statistics display\r\n     * @param {Object} stats - Queue statistics\r\n     */\n  }, {\n    key: \"updateWorkerStats\",\n    value: function updateWorkerStats(stats) {\n      var elements = {\n        'queue-active-workers': stats.activeWorkers || 0,\n        'queue-available-workers': stats.availableWorkers || stats.maxWorkers || 3,\n        'queue-max-workers': stats.maxWorkers || 3\n      };\n      Object.entries(elements).forEach(function (_ref) {\n        var _ref2 = UIManager_slicedToArray(_ref, 2),\n          id = _ref2[0],\n          value = _ref2[1];\n        var element = document.getElementById(id);\n        if (element) {\n          element.textContent = value;\n        }\n      });\n\n      // Update concurrent processing status\n      var concurrentElement = document.getElementById('queue-concurrent-enabled');\n      if (concurrentElement) {\n        var isEnabled = stats.concurrentProcessing;\n        concurrentElement.textContent = isEnabled ? 'Yes' : 'No';\n        concurrentElement.className = \"badge \".concat(isEnabled ? 'bg-info' : 'bg-secondary');\n      }\n    }\n\n    // === Form Preview Management ===\n\n    /**\r\n     * Update form preview display\r\n     */\n  }, {\n    key: \"updateFormPreview\",\n    value: function updateFormPreview() {\n      var _DOMManager$get, _DOMManager$get2, _DOMManager$get3, _DOMManager$get4, _DOMManager$get5, _DOMManager$get6, _DOMManager$get7, _DOMManager$get8;\n      var formData = core_DOMManager.getFormData();\n\n      // Get display names for dropdowns\n      var countryText = ((_DOMManager$get = core_DOMManager.get('countrySelect')) === null || _DOMManager$get === void 0 || (_DOMManager$get = _DOMManager$get.options[(_DOMManager$get2 = core_DOMManager.get('countrySelect')) === null || _DOMManager$get2 === void 0 ? void 0 : _DOMManager$get2.selectedIndex]) === null || _DOMManager$get === void 0 ? void 0 : _DOMManager$get.text) || '-';\n      var platformText = ((_DOMManager$get3 = core_DOMManager.get('platformSelect')) === null || _DOMManager$get3 === void 0 || (_DOMManager$get3 = _DOMManager$get3.options[(_DOMManager$get4 = core_DOMManager.get('platformSelect')) === null || _DOMManager$get4 === void 0 ? void 0 : _DOMManager$get4.selectedIndex]) === null || _DOMManager$get3 === void 0 ? void 0 : _DOMManager$get3.text) || '-';\n      var genreText = ((_DOMManager$get5 = core_DOMManager.get('genreSelect')) === null || _DOMManager$get5 === void 0 || (_DOMManager$get5 = _DOMManager$get5.options[(_DOMManager$get6 = core_DOMManager.get('genreSelect')) === null || _DOMManager$get6 === void 0 ? void 0 : _DOMManager$get6.selectedIndex]) === null || _DOMManager$get5 === void 0 ? void 0 : _DOMManager$get5.text) || '-';\n      var templateText = ((_DOMManager$get7 = core_DOMManager.get('templateSelect')) === null || _DOMManager$get7 === void 0 || (_DOMManager$get7 = _DOMManager$get7.options[(_DOMManager$get8 = core_DOMManager.get('templateSelect')) === null || _DOMManager$get8 === void 0 ? void 0 : _DOMManager$get8.selectedIndex]) === null || _DOMManager$get7 === void 0 ? void 0 : _DOMManager$get7.text) || '-';\n\n      // Update preview elements\n      core_DOMManager.setText('previewCountry', countryText);\n      core_DOMManager.setText('previewPlatform', platformText);\n      core_DOMManager.setText('previewGenre', genreText);\n      core_DOMManager.setText('previewTemplate', templateText);\n      core_DOMManager.setText('previewType', formData.contentType || '-');\n\n      // Generate and display preview URL\n      var previewUrl = this.generateStreamGankUrl(formData);\n      core_DOMManager.setText('previewUrl', previewUrl);\n    }\n\n    /**\r\n     * Generate StreamGang URL from form data\r\n     * @param {Object} formData - Form data object\r\n     * @returns {string} Generated URL\r\n     */\n  }, {\n    key: \"generateStreamGankUrl\",\n    value: function generateStreamGankUrl(formData) {\n      if (!formData.country || !formData.platform || !formData.contentType) {\n        return 'Select all parameters to generate URL';\n      }\n      var baseUrl = 'https://streamgank.com';\n      var params = new URLSearchParams();\n      if (formData.country) params.set('country', formData.country);\n      if (formData.platform) params.set('platform', formData.platform);\n      if (formData.contentType && formData.contentType !== 'all') {\n        params.set('type', formData.contentType);\n      }\n      if (formData.genre && formData.genre !== 'all') {\n        params.set('genre', formData.genre);\n      }\n      return \"\".concat(baseUrl, \"?\").concat(params.toString());\n    }\n\n    // === Video Results Management ===\n\n    /**\r\n     * Show video results section\r\n     */\n  }, {\n    key: \"showVideoResults\",\n    value: function showVideoResults() {\n      core_DOMManager.show('videoResults');\n    }\n\n    /**\r\n     * Hide video results section\r\n     */\n  }, {\n    key: \"hideVideoResults\",\n    value: function hideVideoResults() {\n      core_DOMManager.hide('videoResults');\n    }\n\n    /**\r\n     * Display completed video in gallery\r\n     * @param {Object} videoData - Video data object\r\n     */\n  }, {\n    key: \"displayVideo\",\n    value: function displayVideo(videoData) {\n      var videoGallery = core_DOMManager.get('videoGallery');\n      if (!videoGallery) return;\n      var videoElement = this.createVideoElement(videoData);\n      videoGallery.appendChild(videoElement);\n      this.completedVideos.push(videoData);\n      this.updateVideoCount();\n      this.showVideoResults();\n      this.addStatusMessage('success', '🎬', 'Video is ready for viewing!');\n    }\n\n    /**\r\n     * Create video element for gallery\r\n     * @param {Object} videoData - Video data\r\n     * @returns {HTMLElement} Video element\r\n     */\n  }, {\n    key: \"createVideoElement\",\n    value: function createVideoElement(videoData) {\n      var videoElement = document.createElement('div');\n      videoElement.className = 'video-item mb-3';\n      videoElement.setAttribute('data-job-id', videoData.jobId || 'unknown');\n      var timestamp = new Date().toLocaleString();\n      var formData = core_DOMManager.getFormData();\n      videoElement.innerHTML = \"\\n            <div class=\\\"card\\\">\\n                <div class=\\\"card-body\\\">\\n                    <h6 class=\\\"card-title\\\">\\n                        <i class=\\\"fas fa-video me-2\\\"></i>Video \".concat(this.completedVideos.length + 1, \"\\n                        <span class=\\\"badge bg-success ms-2\\\">\").concat(videoData.jobId || 'N/A', \"</span>\\n                        <small class=\\\"text-muted ms-2\\\">\").concat(timestamp, \"</small>\\n                    </h6>\\n                    <div class=\\\"video-info mb-2\\\">\\n                        <small class=\\\"text-muted\\\">\\n                            \").concat(formData.country || 'Unknown', \" \\u2022 \").concat(formData.platform || 'Unknown', \" \\u2022 \\n                            \").concat(formData.genre || 'Unknown', \" \\u2022 \").concat(formData.contentType || 'Unknown', \"\\n                            \").concat(videoData.creatomateId ? \" \\u2022 ID: \".concat(videoData.creatomateId) : '', \"\\n                        </small>\\n                    </div>\\n                    <video controls class=\\\"w-100 mb-3\\\" style=\\\"max-height: 400px;\\\" preload=\\\"metadata\\\">\\n                        <source src=\\\"\").concat(videoData.videoUrl, \"\\\" type=\\\"video/mp4\\\">\\n                        Your browser does not support the video tag.\\n                    </video>\\n                    <div class=\\\"d-flex gap-2 flex-wrap\\\">\\n                        <a href=\\\"\").concat(videoData.videoUrl, \"\\\" target=\\\"_blank\\\" class=\\\"btn btn-primary btn-sm\\\">\\n                            <i class=\\\"fas fa-external-link-alt me-1\\\"></i>Open Video\\n                        </a>\\n                        <a href=\\\"\").concat(videoData.videoUrl, \"\\\" download class=\\\"btn btn-outline-secondary btn-sm\\\">\\n                            <i class=\\\"fas fa-download me-1\\\"></i>Download\\n                        </a>\\n                        <button class=\\\"btn btn-outline-info btn-sm copy-url-btn\\\" data-url=\\\"\").concat(videoData.videoUrl, \"\\\">\\n                            <i class=\\\"fas fa-copy me-1\\\"></i>Copy URL\\n                        </button>\\n                        <button class=\\\"btn btn-outline-danger btn-sm remove-video-btn\\\" data-job-id=\\\"\").concat(videoData.jobId, \"\\\">\\n                            <i class=\\\"fas fa-trash me-1\\\"></i>Remove\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n\n      // Setup video element event listeners\n      this.setupVideoEventHandlers(videoElement);\n      return videoElement;\n    }\n\n    /**\r\n     * Setup event handlers for video element\r\n     * @param {HTMLElement} videoElement - Video element\r\n     */\n  }, {\n    key: \"setupVideoEventHandlers\",\n    value: function setupVideoEventHandlers(videoElement) {\n      var _this3 = this;\n      var video = videoElement.querySelector('video');\n      var copyBtn = videoElement.querySelector('.copy-url-btn');\n      var removeBtn = videoElement.querySelector('.remove-video-btn');\n\n      // Video event handlers\n      if (video) {\n        video.addEventListener('loadstart', function () {\n          if (!_this3.videoReadyMessageShown) {\n            _this3.addStatusMessage('info', '📥', 'Video started loading...');\n          }\n        });\n        video.addEventListener('canplay', function () {\n          if (!_this3.videoReadyMessageShown) {\n            _this3.addStatusMessage('success', '🎬', 'Video is ready to play!');\n            _this3.videoReadyMessageShown = true;\n          }\n        });\n        video.addEventListener('error', function (e) {\n          _this3.addStatusMessage('error', '❌', 'Video failed to load. Please try the direct link.');\n          console.error('Video load error:', e);\n        });\n      }\n\n      // Copy URL button\n      if (copyBtn) {\n        copyBtn.addEventListener('click', function () {\n          var url = copyBtn.getAttribute('data-url');\n          navigator.clipboard.writeText(url).then(function () {\n            _this3.addStatusMessage('success', '📋', 'Video URL copied to clipboard!');\n          }).catch(function () {\n            _this3.addStatusMessage('error', '❌', 'Failed to copy URL to clipboard');\n          });\n        });\n      }\n\n      // Remove video button\n      if (removeBtn) {\n        removeBtn.addEventListener('click', function () {\n          if (confirm('Remove this video from the gallery?')) {\n            videoElement.remove();\n            var jobId = removeBtn.getAttribute('data-job-id');\n            _this3.completedVideos = _this3.completedVideos.filter(function (v) {\n              return v.jobId !== jobId;\n            });\n            _this3.updateVideoCount();\n            _this3.addStatusMessage('info', '🗑️', 'Video removed from gallery');\n          }\n        });\n      }\n    }\n\n    /**\r\n     * Update video count display\r\n     */\n  }, {\n    key: \"updateVideoCount\",\n    value: function updateVideoCount() {\n      var count = this.completedVideos.length;\n      core_DOMManager.setText('videosCount', count);\n      var badge = core_DOMManager.get('videoCountBadge');\n      if (badge) {\n        badge.textContent = count;\n        badge.style.display = count > 0 ? 'inline' : 'none';\n      }\n    }\n\n    /**\r\n     * Clear all video results\r\n     */\n  }, {\n    key: \"clearVideoResults\",\n    value: function clearVideoResults() {\n      var videoGallery = core_DOMManager.get('videoGallery');\n      if (videoGallery) {\n        videoGallery.innerHTML = '';\n      }\n      this.completedVideos = [];\n      this.updateVideoCount();\n      this.hideVideoResults();\n      this.videoReadyMessageShown = false;\n    }\n\n    // === Utility Methods ===\n\n    /**\r\n     * Format duration from milliseconds\r\n     * @param {number} ms - Duration in milliseconds\r\n     * @returns {string} Formatted duration\r\n     */\n  }, {\n    key: \"formatDuration\",\n    value: function formatDuration(ms) {\n      if (!ms || ms < 0) return '-';\n      var seconds = Math.floor(ms / 1000);\n      var minutes = Math.floor(seconds / 60);\n      var hours = Math.floor(minutes / 60);\n      if (hours > 0) {\n        return \"\".concat(hours, \"h \").concat(minutes % 60, \"m \").concat(seconds % 60, \"s\");\n      } else if (minutes > 0) {\n        return \"\".concat(minutes, \"m \").concat(seconds % 60, \"s\");\n      } else {\n        return \"\".concat(seconds, \"s\");\n      }\n    }\n\n    /**\r\n     * Get current UI state for debugging\r\n     * @returns {Object} Current UI state\r\n     */\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return {\n        completedVideos: this.completedVideos.length,\n        statusMessages: this.statusMessageId,\n        videoReadyMessageShown: this.videoReadyMessageShown\n      };\n    }\n  }]);\n}();\n\n// Export singleton instance\n/* harmony default export */ var components_UIManager = (new UIManager());\n;// ./src/services/RealtimeService.js\nfunction RealtimeService_typeof(o) { \"@babel/helpers - typeof\"; return RealtimeService_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, RealtimeService_typeof(o); }\nfunction RealtimeService_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction RealtimeService_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? RealtimeService_ownKeys(Object(t), !0).forEach(function (r) { RealtimeService_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : RealtimeService_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction RealtimeService_defineProperty(e, r, t) { return (r = RealtimeService_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction RealtimeService_regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return RealtimeService_regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (RealtimeService_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, RealtimeService_regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, RealtimeService_regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), RealtimeService_regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", RealtimeService_regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), RealtimeService_regeneratorDefine2(u), RealtimeService_regeneratorDefine2(u, o, \"Generator\"), RealtimeService_regeneratorDefine2(u, n, function () { return this; }), RealtimeService_regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (RealtimeService_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction RealtimeService_regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } RealtimeService_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { RealtimeService_regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, RealtimeService_regeneratorDefine2(e, r, n, t); }\nfunction RealtimeService_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction RealtimeService_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { RealtimeService_asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { RealtimeService_asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction RealtimeService_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction RealtimeService_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, RealtimeService_toPropertyKey(o.key), o); } }\nfunction RealtimeService_createClass(e, r, t) { return r && RealtimeService_defineProperties(e.prototype, r), t && RealtimeService_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction RealtimeService_toPropertyKey(t) { var i = RealtimeService_toPrimitive(t, \"string\"); return \"symbol\" == RealtimeService_typeof(i) ? i : i + \"\"; }\nfunction RealtimeService_toPrimitive(t, r) { if (\"object\" != RealtimeService_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != RealtimeService_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction RealtimeService_callSuper(t, o, e) { return o = RealtimeService_getPrototypeOf(o), RealtimeService_possibleConstructorReturn(t, RealtimeService_isNativeReflectConstruct() ? Reflect.construct(o, e || [], RealtimeService_getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction RealtimeService_possibleConstructorReturn(t, e) { if (e && (\"object\" == RealtimeService_typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return RealtimeService_assertThisInitialized(t); }\nfunction RealtimeService_assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction RealtimeService_inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && RealtimeService_setPrototypeOf(t, e); }\nfunction RealtimeService_wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return RealtimeService_wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !RealtimeService_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return RealtimeService_construct(t, arguments, RealtimeService_getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), RealtimeService_setPrototypeOf(Wrapper, t); }, RealtimeService_wrapNativeSuper(t); }\nfunction RealtimeService_construct(t, e, r) { if (RealtimeService_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && RealtimeService_setPrototypeOf(p, r.prototype), p; }\nfunction RealtimeService_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (RealtimeService_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction RealtimeService_isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction RealtimeService_setPrototypeOf(t, e) { return RealtimeService_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, RealtimeService_setPrototypeOf(t, e); }\nfunction RealtimeService_getPrototypeOf(t) { return RealtimeService_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, RealtimeService_getPrototypeOf(t); }\n/**\r\n * Realtime Service - Professional real-time communication service\r\n * Handles Server-Sent Events (SSE) and fallback polling for queue status updates\r\n */\n\n\nvar RealtimeService = /*#__PURE__*/function (_EventTarget) {\n  function RealtimeService() {\n    var _this;\n    RealtimeService_classCallCheck(this, RealtimeService);\n    _this = RealtimeService_callSuper(this, RealtimeService);\n    _this.eventSource = null;\n    _this.isSSEEnabled = false;\n    _this.sseRetryCount = 0;\n    _this.maxSSERetries = 5;\n    _this.reconnectAttempts = 0;\n    _this.maxReconnectAttempts = 3;\n\n    // Polling fallback configuration\n    _this.pollingTimer = null;\n    _this.isPolling = false;\n    _this.pollingInterval = 3000; // 3 seconds default\n    _this.adaptivePollingConfig = {\n      fast: 2000,\n      // 2 seconds during active operations\n      normal: 3000,\n      // 3 seconds normal\n      slow: 8000,\n      // 8 seconds when idle\n      slowest: 15000 // 15 seconds when very idle\n    };\n\n    // Connection state\n    _this.isConnected = false;\n    _this.lastUpdateTime = 0;\n    _this.consecutiveErrors = 0;\n    _this.maxConsecutiveErrors = 5;\n    console.log('📡 Realtime Service initialized');\n    return _this;\n  }\n\n  /**\r\n   * Initialize Realtime Service\r\n   */\n  RealtimeService_inherits(RealtimeService, _EventTarget);\n  return RealtimeService_createClass(RealtimeService, [{\n    key: \"init\",\n    value: function init() {\n      this.setupEventListeners();\n      this.initializeConnection();\n      console.log('📡 Realtime Service ready');\n    }\n\n    /**\r\n     * Setup event listeners\r\n     */\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this2 = this;\n      // Page visibility API for smart connection management\n      document.addEventListener('visibilitychange', function () {\n        if (document.hidden) {\n          _this2.handlePageHidden();\n        } else {\n          _this2.handlePageVisible();\n        }\n      });\n\n      // Connection recovery on network changes\n      window.addEventListener('online', function () {\n        console.log('📡 Network back online, attempting to reconnect...');\n        _this2.reconnect();\n      });\n      window.addEventListener('offline', function () {\n        console.log('📡 Network offline detected');\n        _this2.disconnect();\n      });\n\n      // Cleanup on page unload\n      window.addEventListener('beforeunload', function () {\n        _this2.cleanup();\n      });\n    }\n\n    /**\r\n     * Initialize real-time connection (SSE preferred, polling fallback)\r\n     */\n  }, {\n    key: \"initializeConnection\",\n    value: function initializeConnection() {\n      // Try SSE first, fallback to polling\n      if (this.canUseSSE()) {\n        this.initializeSSE();\n      } else {\n        console.log('📡 SSE not supported, using polling fallback');\n        this.startPolling('normal');\n      }\n    }\n\n    /**\r\n     * Check if Server-Sent Events are supported\r\n     * @returns {boolean} SSE support status\r\n     */\n  }, {\n    key: \"canUseSSE\",\n    value: function canUseSSE() {\n      return typeof EventSource !== 'undefined' && !navigator.userAgent.includes('Edge/') &&\n      // Edge has SSE issues\n      this.sseRetryCount < this.maxSSERetries;\n    }\n\n    /**\r\n     * Initialize Server-Sent Events connection\r\n     */\n  }, {\n    key: \"initializeSSE\",\n    value: function initializeSSE() {\n      var _this3 = this;\n      if (this.eventSource || this.isSSEEnabled) {\n        return;\n      }\n      try {\n        console.log('📡 Initializing Server-Sent Events...');\n        this.eventSource = new EventSource('/api/queue/status/stream');\n        this.eventSource.onopen = function (event) {\n          console.log('📡 SSE connection opened');\n          _this3.isSSEEnabled = true;\n          _this3.isConnected = true;\n          _this3.sseRetryCount = 0;\n          _this3.consecutiveErrors = 0;\n\n          // Stop any active polling\n          _this3.stopPolling();\n\n          // Emit connection event\n          _this3.emit('connected', {\n            type: 'sse'\n          });\n          components_UIManager.addStatusMessage('success', '📡', 'Real-time updates enabled');\n        };\n        this.eventSource.onmessage = function (event) {\n          _this3.handleSSEMessage(event);\n        };\n\n        // Handle specific event types\n        this.eventSource.addEventListener('status', function (event) {\n          _this3.handleSSEMessage(event);\n        });\n        this.eventSource.addEventListener('heartbeat', function (event) {\n          // Keep connection alive - just update last activity\n          _this3.lastUpdateTime = Date.now();\n        });\n        this.eventSource.onerror = function (event) {\n          _this3.handleSSEError(event);\n        };\n      } catch (error) {\n        console.error('❌ Failed to initialize SSE:', error);\n        this.fallbackToPolling();\n      }\n    }\n\n    /**\r\n     * Handle SSE message\r\n     * @param {MessageEvent} event - SSE message event\r\n     */\n  }, {\n    key: \"handleSSEMessage\",\n    value: function handleSSEMessage(event) {\n      try {\n        var data = JSON.parse(event.data);\n        if (data.success && data.stats) {\n          this.lastUpdateTime = Date.now();\n          this.consecutiveErrors = 0;\n\n          // Update UI with queue stats\n          components_UIManager.updateQueueStats(data.stats);\n\n          // Emit update event for other components\n          this.emit('queueUpdate', {\n            stats: data.stats,\n            source: 'sse'\n          });\n\n          // Log debugging info\n          if (data.stats._debug) {\n            console.log(\"\\uD83D\\uDCCA SSE queue update: \".concat(data.stats._debug));\n          }\n        }\n      } catch (error) {\n        console.error('❌ Failed to parse SSE message:', error);\n        this.consecutiveErrors++;\n        if (this.consecutiveErrors >= this.maxConsecutiveErrors) {\n          console.warn('⚠️ Too many consecutive SSE parsing errors, falling back to polling');\n          this.fallbackToPolling();\n        }\n      }\n    }\n\n    /**\r\n     * Handle SSE connection errors\r\n     * @param {Event} event - Error event\r\n     */\n  }, {\n    key: \"handleSSEError\",\n    value: function handleSSEError(event) {\n      var _this4 = this;\n      console.warn('⚠️ SSE connection error, attempting fallback');\n      this.isSSEEnabled = false;\n      this.isConnected = false;\n      this.sseRetryCount++;\n\n      // Close existing connection\n      if (this.eventSource) {\n        this.eventSource.close();\n        this.eventSource = null;\n      }\n\n      // Emit disconnection event\n      this.emit('disconnected', {\n        type: 'sse',\n        error: event\n      });\n\n      // Fallback to polling\n      this.fallbackToPolling();\n\n      // Try to reconnect SSE later with exponential backoff\n      if (this.sseRetryCount < this.maxSSERetries) {\n        var retryDelay = Math.min(1000 * Math.pow(2, this.sseRetryCount), 30000);\n        console.log(\"\\uD83D\\uDCE1 Retrying SSE connection in \".concat(retryDelay, \"ms (attempt \").concat(this.sseRetryCount + 1, \"/\").concat(this.maxSSERetries, \")\"));\n        setTimeout(function () {\n          if (!_this4.isSSEEnabled && _this4.canUseSSE()) {\n            _this4.initializeSSE();\n          }\n        }, retryDelay);\n      } else {\n        components_UIManager.addStatusMessage('warning', '⚠️', 'Real-time updates unavailable, using fallback polling');\n      }\n    }\n\n    /**\r\n     * Fallback to polling when SSE fails\r\n     */\n  }, {\n    key: \"fallbackToPolling\",\n    value: function fallbackToPolling() {\n      if (this.isPolling) {\n        return; // Already polling\n      }\n      console.log('📡 Falling back to adaptive polling');\n      this.startPolling('fast'); // Use fast polling as fallback\n    }\n\n    /**\r\n     * Start adaptive polling based on activity level\r\n     * @param {string} mode - Polling mode (fast, normal, slow, slowest)\r\n     */\n  }, {\n    key: \"startPolling\",\n    value: function startPolling() {\n      var _this5 = this;\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'normal';\n      if (this.pollingTimer) {\n        this.stopPolling();\n      }\n      this.isPolling = true;\n      this.pollingInterval = this.adaptivePollingConfig[mode] || this.adaptivePollingConfig.normal;\n      console.log(\"\\uD83D\\uDCE1 Starting \".concat(mode, \" polling (\").concat(this.pollingInterval, \"ms interval)\"));\n\n      // Initial poll\n      this.pollQueueStatus();\n\n      // Setup polling timer\n      this.pollingTimer = setInterval(function () {\n        _this5.pollQueueStatus();\n      }, this.pollingInterval);\n\n      // Emit polling started event\n      this.emit('pollingStarted', {\n        mode: mode,\n        interval: this.pollingInterval\n      });\n    }\n\n    /**\r\n     * Stop polling\r\n     */\n  }, {\n    key: \"stopPolling\",\n    value: function stopPolling() {\n      if (this.pollingTimer) {\n        clearInterval(this.pollingTimer);\n        this.pollingTimer = null;\n        this.isPolling = false;\n        console.log('📡 Polling stopped');\n      }\n    }\n\n    /**\r\n     * Poll queue status via API\r\n     */\n  }, {\n    key: \"pollQueueStatus\",\n    value: (function () {\n      var _pollQueueStatus = RealtimeService_asyncToGenerator(/*#__PURE__*/RealtimeService_regenerator().m(function _callee() {\n        var startTime, result, duration, _t;\n        return RealtimeService_regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              startTime = Date.now();\n              _context.n = 1;\n              return services_APIService.getQueueStatus();\n            case 1:\n              result = _context.v;\n              duration = Date.now() - startTime;\n              if (result.success && result.stats) {\n                this.lastUpdateTime = Date.now();\n                this.consecutiveErrors = 0;\n\n                // Update UI\n                components_UIManager.updateQueueStats(result.stats);\n\n                // Emit update event\n                this.emit('queueUpdate', {\n                  stats: result.stats,\n                  source: 'polling',\n                  duration: duration\n                });\n\n                // Adaptive polling based on response time and activity\n                this.adjustPollingInterval(duration, result.stats);\n              } else {\n                this.consecutiveErrors++;\n                console.warn('⚠️ Polling received invalid response');\n              }\n              _context.n = 3;\n              break;\n            case 2:\n              _context.p = 2;\n              _t = _context.v;\n              this.consecutiveErrors++;\n              console.error('❌ Polling error:', _t);\n\n              // Slow down polling if too many errors\n              if (this.consecutiveErrors >= this.maxConsecutiveErrors) {\n                console.warn('⚠️ Too many polling errors, slowing down interval');\n                this.startPolling('slowest');\n              }\n            case 3:\n              return _context.a(2);\n          }\n        }, _callee, this, [[0, 2]]);\n      }));\n      function pollQueueStatus() {\n        return _pollQueueStatus.apply(this, arguments);\n      }\n      return pollQueueStatus;\n    }()\n    /**\r\n     * Adjust polling interval based on server performance and activity\r\n     * @param {number} responseTime - API response time in milliseconds\r\n     * @param {Object} stats - Queue statistics\r\n     */\n    )\n  }, {\n    key: \"adjustPollingInterval\",\n    value: function adjustPollingInterval(responseTime, stats) {\n      var newMode = 'normal';\n\n      // Fast polling during active processing\n      if (stats.processing > 0 || stats.pending > 0) {\n        newMode = 'fast';\n      }\n      // Slow polling when server is slow or idle\n      else if (responseTime > 2000) {\n        newMode = 'slow';\n      }\n      // Very slow polling when completely idle\n      else if (stats.processing === 0 && stats.pending === 0 && Date.now() - this.lastUpdateTime > 60000) {\n        newMode = 'slowest';\n      }\n\n      // Update polling if mode changed\n      var newInterval = this.adaptivePollingConfig[newMode];\n      if (newInterval !== this.pollingInterval) {\n        console.log(\"\\uD83D\\uDCE1 Adjusting polling: \".concat(newMode, \" (\").concat(newInterval, \"ms)\"));\n        this.startPolling(newMode);\n      }\n    }\n\n    /**\r\n     * Handle page becoming hidden (tab switched, minimized)\r\n     */\n  }, {\n    key: \"handlePageHidden\",\n    value: function handlePageHidden() {\n      console.log('📡 Page hidden, reducing update frequency');\n      if (this.isPolling) {\n        this.startPolling('slowest');\n      }\n      // SSE continues automatically but server can detect inactive clients\n    }\n\n    /**\r\n     * Handle page becoming visible (tab focused)\r\n     */\n  }, {\n    key: \"handlePageVisible\",\n    value: function handlePageVisible() {\n      console.log('📡 Page visible, resuming normal updates');\n      if (this.isPolling) {\n        this.startPolling('normal');\n      } else if (!this.isSSEEnabled && this.canUseSSE()) {\n        // Try to re-establish SSE when page becomes active\n        this.initializeSSE();\n      }\n\n      // Immediate update when page becomes visible\n      if (this.isPolling) {\n        this.pollQueueStatus();\n      }\n    }\n\n    /**\r\n     * Manually trigger queue status refresh\r\n     */\n  }, {\n    key: \"refreshStatus\",\n    value: (function () {\n      var _refreshStatus = RealtimeService_asyncToGenerator(/*#__PURE__*/RealtimeService_regenerator().m(function _callee2() {\n        var result, _t2;\n        return RealtimeService_regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              console.log('📡 Manual status refresh requested');\n              _context2.p = 1;\n              _context2.n = 2;\n              return services_APIService.getQueueStatus();\n            case 2:\n              result = _context2.v;\n              if (result.success && result.stats) {\n                components_UIManager.updateQueueStats(result.stats);\n                this.emit('queueUpdate', {\n                  stats: result.stats,\n                  source: 'manual'\n                });\n                components_UIManager.addStatusMessage('success', '🔄', 'Status refreshed successfully');\n              }\n              _context2.n = 4;\n              break;\n            case 3:\n              _context2.p = 3;\n              _t2 = _context2.v;\n              console.error('❌ Manual refresh failed:', _t2);\n              components_UIManager.addStatusMessage('error', '❌', 'Failed to refresh status');\n            case 4:\n              return _context2.a(2);\n          }\n        }, _callee2, this, [[1, 3]]);\n      }));\n      function refreshStatus() {\n        return _refreshStatus.apply(this, arguments);\n      }\n      return refreshStatus;\n    }()\n    /**\r\n     * Reconnect to real-time updates\r\n     */\n    )\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this6 = this;\n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.warn('⚠️ Max reconnection attempts reached');\n        return;\n      }\n      this.reconnectAttempts++;\n      console.log(\"\\uD83D\\uDCE1 Reconnecting... (attempt \".concat(this.reconnectAttempts, \"/\").concat(this.maxReconnectAttempts, \")\"));\n\n      // Clean up existing connections\n      this.disconnect();\n\n      // Wait a moment then reinitialize\n      setTimeout(function () {\n        _this6.initializeConnection();\n      }, 2000);\n    }\n\n    /**\r\n     * Disconnect from real-time updates\r\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      // Close SSE connection\n      if (this.eventSource) {\n        this.eventSource.close();\n        this.eventSource = null;\n      }\n\n      // Stop polling\n      this.stopPolling();\n\n      // Update state\n      this.isSSEEnabled = false;\n      this.isConnected = false;\n      this.isPolling = false;\n      console.log('📡 Disconnected from real-time updates');\n    }\n\n    /**\r\n     * Get connection status\r\n     * @returns {Object} Connection status information\r\n     */\n  }, {\n    key: \"getConnectionStatus\",\n    value: function getConnectionStatus() {\n      return {\n        isConnected: this.isConnected,\n        connectionType: this.isSSEEnabled ? 'sse' : this.isPolling ? 'polling' : 'none',\n        isSSEEnabled: this.isSSEEnabled,\n        isPolling: this.isPolling,\n        pollingInterval: this.pollingInterval,\n        sseRetryCount: this.sseRetryCount,\n        consecutiveErrors: this.consecutiveErrors,\n        lastUpdateTime: this.lastUpdateTime,\n        timeSinceLastUpdate: Date.now() - this.lastUpdateTime\n      };\n    }\n\n    /**\r\n     * Get connection statistics\r\n     * @returns {Object} Connection statistics\r\n     */\n  }, {\n    key: \"getConnectionStats\",\n    value: function getConnectionStats() {\n      var status = this.getConnectionStatus();\n      return RealtimeService_objectSpread(RealtimeService_objectSpread({}, status), {}, {\n        uptime: Date.now() - (this.lastUpdateTime || Date.now()),\n        reliability: this.consecutiveErrors === 0 ? 100 : Math.max(0, 100 - this.consecutiveErrors * 20)\n      });\n    }\n\n    /**\r\n     * Force reconnection with clean state\r\n     */\n  }, {\n    key: \"forceReconnect\",\n    value: function forceReconnect() {\n      var _this7 = this;\n      console.log('📡 Forcing reconnection...');\n      this.sseRetryCount = 0;\n      this.reconnectAttempts = 0;\n      this.consecutiveErrors = 0;\n      this.disconnect();\n      setTimeout(function () {\n        _this7.initializeConnection();\n      }, 1000);\n    }\n\n    /**\r\n     * Cleanup resources\r\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.disconnect();\n      console.log('🧹 Realtime Service cleaned up');\n    }\n  }]);\n}(/*#__PURE__*/RealtimeService_wrapNativeSuper(EventTarget));\n\n// Export singleton instance\n/* harmony default export */ var services_RealtimeService = (new RealtimeService());\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.assign.js\nvar es_object_assign = __webpack_require__(9085);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.set.js\nvar es_set = __webpack_require__(1415);\n;// ./src/services/JobManager.js\nfunction JobManager_typeof(o) { \"@babel/helpers - typeof\"; return JobManager_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, JobManager_typeof(o); }\nfunction JobManager_slicedToArray(r, e) { return JobManager_arrayWithHoles(r) || JobManager_iterableToArrayLimit(r, e) || JobManager_unsupportedIterableToArray(r, e) || JobManager_nonIterableRest(); }\nfunction JobManager_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction JobManager_unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return JobManager_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? JobManager_arrayLikeToArray(r, a) : void 0; } }\nfunction JobManager_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction JobManager_iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction JobManager_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction JobManager_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction JobManager_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? JobManager_ownKeys(Object(t), !0).forEach(function (r) { JobManager_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : JobManager_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction JobManager_defineProperty(e, r, t) { return (r = JobManager_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction JobManager_regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return JobManager_regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (JobManager_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, JobManager_regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, JobManager_regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), JobManager_regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", JobManager_regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), JobManager_regeneratorDefine2(u), JobManager_regeneratorDefine2(u, o, \"Generator\"), JobManager_regeneratorDefine2(u, n, function () { return this; }), JobManager_regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (JobManager_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction JobManager_regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } JobManager_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { JobManager_regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, JobManager_regeneratorDefine2(e, r, n, t); }\nfunction JobManager_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction JobManager_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { JobManager_asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { JobManager_asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction JobManager_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction JobManager_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, JobManager_toPropertyKey(o.key), o); } }\nfunction JobManager_createClass(e, r, t) { return r && JobManager_defineProperties(e.prototype, r), t && JobManager_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction JobManager_toPropertyKey(t) { var i = JobManager_toPrimitive(t, \"string\"); return \"symbol\" == JobManager_typeof(i) ? i : i + \"\"; }\nfunction JobManager_toPrimitive(t, r) { if (\"object\" != JobManager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != JobManager_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction JobManager_callSuper(t, o, e) { return o = JobManager_getPrototypeOf(o), JobManager_possibleConstructorReturn(t, JobManager_isNativeReflectConstruct() ? Reflect.construct(o, e || [], JobManager_getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction JobManager_possibleConstructorReturn(t, e) { if (e && (\"object\" == JobManager_typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return JobManager_assertThisInitialized(t); }\nfunction JobManager_assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction JobManager_inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && JobManager_setPrototypeOf(t, e); }\nfunction JobManager_wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return JobManager_wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !JobManager_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return JobManager_construct(t, arguments, JobManager_getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), JobManager_setPrototypeOf(Wrapper, t); }, JobManager_wrapNativeSuper(t); }\nfunction JobManager_construct(t, e, r) { if (JobManager_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && JobManager_setPrototypeOf(p, r.prototype), p; }\nfunction JobManager_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (JobManager_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction JobManager_isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction JobManager_setPrototypeOf(t, e) { return JobManager_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, JobManager_setPrototypeOf(t, e); }\nfunction JobManager_getPrototypeOf(t) { return JobManager_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, JobManager_getPrototypeOf(t); }\n/**\r\n * Job Manager - Professional job lifecycle management\r\n * Handles video generation jobs, monitoring, progress tracking, and status updates\r\n */\n\n\nvar JobManager = /*#__PURE__*/function (_EventTarget) {\n  function JobManager() {\n    var _this;\n    JobManager_classCallCheck(this, JobManager);\n    _this = JobManager_callSuper(this, JobManager);\n    _this.activeJobs = new Map();\n    _this.jobHistory = new Map();\n    _this.currentJob = null;\n    _this.maxJobHistory = 100;\n    _this.monitoringInterval = 5000; // 5 seconds\n    _this.monitoringTimer = null;\n    _this.isGenerationActive = false;\n    _this.creatomateMessages = new Set(); // Track unique messages\n\n    console.log('💼 Job Manager initialized');\n    return _this;\n  }\n\n  /**\r\n   * Initialize Job Manager\r\n   */\n  JobManager_inherits(JobManager, _EventTarget);\n  return JobManager_createClass(JobManager, [{\n    key: \"init\",\n    value: function init() {\n      this.setupEventListeners();\n      console.log('💼 Job Manager ready');\n    }\n\n    /**\r\n     * Setup event listeners\r\n     */\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this2 = this;\n      // Listen for page unload to cleanup\n      window.addEventListener('beforeunload', function () {\n        _this2.cleanup();\n      });\n    }\n\n    /**\r\n     * Start video generation job with comprehensive monitoring\r\n     * @param {Object} params - Generation parameters\r\n     * @returns {Promise<Object>} Job creation result\r\n     */\n  }, {\n    key: \"startVideoGeneration\",\n    value: (function () {\n      var _startVideoGeneration = JobManager_asyncToGenerator(/*#__PURE__*/JobManager_regenerator().m(function _callee(params) {\n        var result, job, _t;\n        return JobManager_regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              // Validate parameters\n              this.validateGenerationParams(params);\n\n              // Prevent concurrent generations\n              if (!this.isGenerationActive) {\n                _context.n = 1;\n                break;\n              }\n              throw new Error('Another video generation is already in progress');\n            case 1:\n              this.isGenerationActive = true;\n\n              // Update UI state\n              components_UIManager.showProgress();\n              components_UIManager.disableGenerateButton('Starting generation...');\n              components_UIManager.addStatusMessage('info', '🚀', 'Starting video generation...');\n\n              // Reset message tracking\n              this.creatomateMessages.clear();\n\n              // Create job via API\n              _context.n = 2;\n              return services_APIService.generateVideo(params);\n            case 2:\n              result = _context.v;\n              if (result.success) {\n                _context.n = 3;\n                break;\n              }\n              throw new Error(result.message || 'Failed to start video generation');\n            case 3:\n              // Setup job tracking\n              job = this.createJobObject(result, params); // Store and monitor job\n              this.activeJobs.set(job.id, job);\n              this.currentJob = job;\n              this.startJobMonitoring(job.id);\n\n              // Update UI\n              components_UIManager.addStatusMessage('success', '✅', \"Job queued successfully! \".concat(job.queuePosition ? \"Position: \".concat(job.queuePosition) : ''));\n              components_UIManager.updateProgress(5, 'Job queued, waiting to start...');\n\n              // Emit job started event\n              this.emit('jobStarted', {\n                job: job\n              });\n              console.log(\"\\uD83D\\uDCBC Job started: \".concat(job.id));\n              return _context.a(2, {\n                success: true,\n                job: job\n              });\n            case 4:\n              _context.p = 4;\n              _t = _context.v;\n              console.error('❌ Failed to start video generation:', _t);\n\n              // Reset UI state\n              this.resetGenerationState();\n              components_UIManager.addStatusMessage('error', '❌', \"Failed to start generation: \".concat(_t.message));\n              this.emit('jobError', {\n                error: _t\n              });\n              throw _t;\n            case 5:\n              return _context.a(2);\n          }\n        }, _callee, this, [[0, 4]]);\n      }));\n      function startVideoGeneration(_x) {\n        return _startVideoGeneration.apply(this, arguments);\n      }\n      return startVideoGeneration;\n    }()\n    /**\r\n     * Create job object from API result\r\n     * @param {Object} result - API result\r\n     * @param {Object} params - Generation parameters\r\n     * @returns {Object} Job object\r\n     */\n    )\n  }, {\n    key: \"createJobObject\",\n    value: function createJobObject(result, params) {\n      return {\n        id: result.jobId,\n        params: params,\n        status: 'pending',\n        progress: 0,\n        createdAt: new Date().toISOString(),\n        startedAt: null,\n        completedAt: null,\n        queuePosition: result.queuePosition || 0,\n        error: null,\n        result: null,\n        creatomateId: null,\n        videoUrl: null\n      };\n    }\n\n    /**\r\n     * Validate generation parameters\r\n     * @param {Object} params - Parameters to validate\r\n     * @throws {Error} If validation fails\r\n     */\n  }, {\n    key: \"validateGenerationParams\",\n    value: function validateGenerationParams(params) {\n      var required = ['country', 'platform', 'genre', 'contentType'];\n      var missing = required.filter(function (field) {\n        return !params[field];\n      });\n      if (missing.length > 0) {\n        throw new Error(\"Missing required parameters: \".concat(missing.join(', ')));\n      }\n      console.log('✅ Parameters validated:', params);\n    }\n\n    /**\r\n     * Start monitoring a specific job\r\n     * @param {string} jobId - Job ID to monitor\r\n     */\n  }, {\n    key: \"startJobMonitoring\",\n    value: (function () {\n      var _startJobMonitoring = JobManager_asyncToGenerator(/*#__PURE__*/JobManager_regenerator().m(function _callee3(jobId) {\n        var _this3 = this;\n        return JobManager_regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              if (this.monitoringTimer) {\n                clearInterval(this.monitoringTimer);\n              }\n              console.log(\"\\uD83D\\uDC40 Started monitoring job: \".concat(jobId));\n              this.monitoringTimer = setInterval(/*#__PURE__*/JobManager_asyncToGenerator(/*#__PURE__*/JobManager_regenerator().m(function _callee2() {\n                var _t2;\n                return JobManager_regenerator().w(function (_context2) {\n                  while (1) switch (_context2.p = _context2.n) {\n                    case 0:\n                      _context2.p = 0;\n                      _context2.n = 1;\n                      return _this3.updateJobStatus(jobId);\n                    case 1:\n                      _context2.n = 3;\n                      break;\n                    case 2:\n                      _context2.p = 2;\n                      _t2 = _context2.v;\n                      console.error('❌ Job monitoring error:', _t2);\n\n                      // Stop monitoring on repeated failures\n                      if (_this3.consecutiveErrors > 3) {\n                        _this3.stopJobMonitoring();\n                        components_UIManager.addStatusMessage('warning', '⚠️', 'Job monitoring stopped due to repeated errors');\n                      }\n                    case 3:\n                      return _context2.a(2);\n                  }\n                }, _callee2, null, [[0, 2]]);\n              })), this.monitoringInterval);\n            case 1:\n              return _context3.a(2);\n          }\n        }, _callee3, this);\n      }));\n      function startJobMonitoring(_x2) {\n        return _startJobMonitoring.apply(this, arguments);\n      }\n      return startJobMonitoring;\n    }()\n    /**\r\n     * Stop job monitoring\r\n     */\n    )\n  }, {\n    key: \"stopJobMonitoring\",\n    value: function stopJobMonitoring() {\n      if (this.monitoringTimer) {\n        clearInterval(this.monitoringTimer);\n        this.monitoringTimer = null;\n        console.log('⏹️ Job monitoring stopped');\n      }\n    }\n\n    /**\r\n     * Update job status from API\r\n     * @param {string} jobId - Job ID to update\r\n     */\n  }, {\n    key: \"updateJobStatus\",\n    value: (function () {\n      var _updateJobStatus = JobManager_asyncToGenerator(/*#__PURE__*/JobManager_regenerator().m(function _callee4(jobId) {\n        var job, result, _t3;\n        return JobManager_regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              job = this.activeJobs.get(jobId);\n              if (job) {\n                _context4.n = 1;\n                break;\n              }\n              return _context4.a(2);\n            case 1:\n              _context4.p = 1;\n              _context4.n = 2;\n              return services_APIService.getJobStatus(jobId);\n            case 2:\n              result = _context4.v;\n              if (result.success && result.job) {\n                this.processJobUpdate(result.job);\n              }\n              _context4.n = 4;\n              break;\n            case 3:\n              _context4.p = 3;\n              _t3 = _context4.v;\n              console.error(\"\\u274C Failed to update job status for \".concat(jobId, \":\"), _t3);\n              throw _t3;\n            case 4:\n              return _context4.a(2);\n          }\n        }, _callee4, this, [[1, 3]]);\n      }));\n      function updateJobStatus(_x3) {\n        return _updateJobStatus.apply(this, arguments);\n      }\n      return updateJobStatus;\n    }()\n    /**\r\n     * Process comprehensive job status update\r\n     * @param {Object} jobData - Updated job data from API\r\n     */\n    )\n  }, {\n    key: \"processJobUpdate\",\n    value: function processJobUpdate(jobData) {\n      var job = this.activeJobs.get(jobData.id);\n      if (!job) return;\n      var previousStatus = job.status;\n      var previousProgress = job.progress;\n\n      // Update job data\n      Object.assign(job, {\n        status: jobData.status,\n        progress: jobData.progress || 0,\n        currentStep: jobData.currentStep,\n        startedAt: jobData.startedAt || job.startedAt,\n        completedAt: jobData.completedAt,\n        error: jobData.error,\n        result: jobData,\n        creatomateId: jobData.creatomateId,\n        videoUrl: jobData.videoUrl\n      });\n\n      // Handle status changes\n      if (previousStatus !== job.status) {\n        this.handleJobStatusChange(job, previousStatus);\n      }\n\n      // Handle progress changes\n      if (previousProgress !== job.progress) {\n        this.updateJobProgress(job);\n      }\n\n      // Handle creatomate monitoring for rendering jobs\n      if (job.creatomateId && !job.videoUrl && job.status === 'completed') {\n        this.startCreatomateMonitoring(job);\n      }\n\n      // Emit job updated event\n      this.emit('jobUpdated', {\n        job: job,\n        previousStatus: previousStatus\n      });\n      console.log(\"\\uD83D\\uDCBC Job \".concat(job.id, \" updated: \").concat(job.status, \" (\").concat(job.progress, \"%)\"));\n    }\n\n    /**\r\n     * Handle comprehensive job status changes\r\n     * @param {Object} job - Job object\r\n     * @param {string} previousStatus - Previous job status\r\n     */\n  }, {\n    key: \"handleJobStatusChange\",\n    value: function handleJobStatusChange(job, previousStatus) {\n      switch (job.status) {\n        case 'processing':\n          if (previousStatus === 'pending') {\n            components_UIManager.addStatusMessage('info', '⚡', 'Job started processing!');\n            job.startedAt = new Date().toISOString();\n          }\n          break;\n        case 'completed':\n          this.handleJobCompletion(job);\n          break;\n        case 'failed':\n          this.handleJobFailure(job);\n          break;\n        case 'cancelled':\n          this.handleJobCancellation(job);\n          break;\n      }\n    }\n\n    /**\r\n     * Handle job completion with video URL or Creatomate ID\r\n     * @param {Object} job - Completed job\r\n     */\n  }, {\n    key: \"handleJobCompletion\",\n    value: function handleJobCompletion(job) {\n      console.log(\"\\u2705 Job completed: \".concat(job.id));\n      if (job.videoUrl) {\n        // Direct video URL available\n        this.finishSuccessfulGeneration(job);\n      } else if (job.creatomateId) {\n        // Video is rendering, start Creatomate monitoring\n        components_UIManager.updateProgress(90, 'Python script completed, video rendering...');\n        components_UIManager.addStatusMessage('info', '🎬', \"Video rendering started (ID: \".concat(job.creatomateId, \"). Monitoring progress...\"));\n        this.startCreatomateMonitoring(job);\n      } else {\n        // Completed but missing video data\n        components_UIManager.addStatusMessage('warning', '⚠️', 'Job completed but video URL not yet available');\n        this.moveJobToHistory(job);\n      }\n      this.emit('jobCompleted', {\n        job: job\n      });\n    }\n\n    /**\r\n     * Start monitoring Creatomate rendering status\r\n     * @param {Object} job - Job with Creatomate ID\r\n     */\n  }, {\n    key: \"startCreatomateMonitoring\",\n    value: function startCreatomateMonitoring(job) {\n      var _this4 = this;\n      var attempts = 0;\n      var maxAttempts = 40; // 20 minutes max (30s * 40)\n\n      var _checkStatus = /*#__PURE__*/function () {\n        var _ref2 = JobManager_asyncToGenerator(/*#__PURE__*/JobManager_regenerator().m(function _callee5() {\n          var statusData, status, statusText, messageKey, progressPercent, _t4;\n          return JobManager_regenerator().w(function (_context5) {\n            while (1) switch (_context5.p = _context5.n) {\n              case 0:\n                attempts++;\n                _context5.p = 1;\n                _context5.n = 2;\n                return services_APIService.getCreatomateStatus(job.creatomateId);\n              case 2:\n                statusData = _context5.v;\n                if (statusData.success && statusData.videoUrl) {\n                  // Video is ready!\n                  job.videoUrl = statusData.videoUrl;\n                  job.result.videoUrl = statusData.videoUrl;\n                  _this4.finishSuccessfulGeneration(job);\n                } else if (statusData.success && statusData.status) {\n                  // Still rendering\n                  status = statusData.status.toLowerCase();\n                  statusText = status.charAt(0).toUpperCase() + status.slice(1);\n                  if (attempts % 4 === 0) {\n                    // Every 2 minutes\n                    messageKey = \"rendering-update-\".concat(Math.floor(attempts / 4));\n                    if (!_this4.creatomateMessages.has(messageKey)) {\n                      components_UIManager.addStatusMessage('info', '⏳', \"Video status: \".concat(statusText, \"... (\").concat(attempts, \"/\").concat(maxAttempts, \")\"));\n                      _this4.creatomateMessages.add(messageKey);\n                    }\n                  }\n\n                  // Update progress\n                  progressPercent = 90 + attempts / maxAttempts * 10;\n                  if (status.includes('render') || status.includes('process')) {\n                    progressPercent = Math.min(95, progressPercent);\n                  }\n                  components_UIManager.updateProgress(progressPercent, \"Rendering: \".concat(statusText));\n\n                  // Schedule next check\n                  if (attempts < maxAttempts) {\n                    setTimeout(function () {\n                      return _checkStatus();\n                    }, 30000);\n                  } else {\n                    _this4.handleCreatomateTimeout(job);\n                  }\n                } else {\n                  _this4.handleCreatomateError(job, statusData.message, attempts, maxAttempts, _checkStatus);\n                }\n                _context5.n = 4;\n                break;\n              case 3:\n                _context5.p = 3;\n                _t4 = _context5.v;\n                _this4.handleCreatomateNetworkError(job, _t4, attempts, maxAttempts, _checkStatus);\n              case 4:\n                return _context5.a(2);\n            }\n          }, _callee5, null, [[1, 3]]);\n        }));\n        return function checkStatus() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      // Start monitoring\n      _checkStatus();\n    }\n\n    /**\r\n     * Handle Creatomate monitoring timeout\r\n     * @param {Object} job - Job object\r\n     */\n  }, {\n    key: \"handleCreatomateTimeout\",\n    value: function handleCreatomateTimeout(job) {\n      var timeoutKey = 'creatomate-timeout';\n      if (!this.creatomateMessages.has(timeoutKey)) {\n        components_UIManager.addStatusMessage('warning', '⚠️', 'Video rendering is taking longer than expected. Use \"Check Status\" to monitor manually.');\n        this.creatomateMessages.add(timeoutKey);\n      }\n\n      // Keep the job active for manual status checking\n      components_UIManager.enableGenerateButton();\n      this.isGenerationActive = false;\n    }\n\n    /**\r\n     * Handle Creatomate API errors\r\n     * @param {Object} job - Job object\r\n     * @param {string} message - Error message\r\n     * @param {number} attempts - Current attempt number\r\n     * @param {number} maxAttempts - Maximum attempts\r\n     * @param {Function} checkStatus - Status check function\r\n     */\n  }, {\n    key: \"handleCreatomateError\",\n    value: function handleCreatomateError(job, message, attempts, maxAttempts, checkStatus) {\n      var errorKey = \"creatomate-error-\".concat(message);\n      if (!this.creatomateMessages.has(errorKey)) {\n        components_UIManager.addStatusMessage('error', '❌', \"Render status check failed: \".concat(message || 'Unknown error'));\n        this.creatomateMessages.add(errorKey);\n      }\n      if (attempts < maxAttempts) {\n        setTimeout(function () {\n          return checkStatus();\n        }, 30000);\n      } else {\n        components_UIManager.addStatusMessage('error', '❌', 'Unable to check render status after multiple attempts.');\n        this.moveJobToHistory(job);\n      }\n    }\n\n    /**\r\n     * Handle Creatomate network errors\r\n     * @param {Object} job - Job object\r\n     * @param {Error} error - Network error\r\n     * @param {number} attempts - Current attempt number\r\n     * @param {number} maxAttempts - Maximum attempts\r\n     * @param {Function} checkStatus - Status check function\r\n     */\n  }, {\n    key: \"handleCreatomateNetworkError\",\n    value: function handleCreatomateNetworkError(job, error, attempts, maxAttempts, checkStatus) {\n      console.error('Creatomate status check error:', error);\n      var networkErrorKey = \"network-error-\".concat(attempts);\n      if (attempts % 3 === 0 && !this.creatomateMessages.has(networkErrorKey)) {\n        components_UIManager.addStatusMessage('warning', '⚠️', \"Network error checking render status (attempt \".concat(attempts, \")\"));\n        this.creatomateMessages.add(networkErrorKey);\n      }\n      if (attempts < maxAttempts) {\n        setTimeout(function () {\n          return checkStatus();\n        }, 30000);\n      } else {\n        components_UIManager.addStatusMessage('error', '❌', 'Network errors prevented render status monitoring.');\n        this.moveJobToHistory(job);\n      }\n    }\n\n    /**\r\n     * Finish successful video generation\r\n     * @param {Object} job - Completed job with video URL\r\n     */\n  }, {\n    key: \"finishSuccessfulGeneration\",\n    value: function finishSuccessfulGeneration(job) {\n      components_UIManager.updateProgress(100, 'Generation completed!');\n      components_UIManager.addStatusMessage('success', '🎉', 'Video generation completed successfully!');\n\n      // Display video in UI\n      components_UIManager.displayVideo({\n        jobId: job.id,\n        videoUrl: job.videoUrl,\n        creatomateId: job.creatomateId,\n        timestamp: new Date().toLocaleString()\n      });\n\n      // Cleanup and reset\n      this.moveJobToHistory(job);\n      this.resetGenerationState();\n    }\n\n    /**\r\n     * Handle job failure\r\n     * @param {Object} job - Failed job\r\n     */\n  }, {\n    key: \"handleJobFailure\",\n    value: function handleJobFailure(job) {\n      console.error(\"\\u274C Job failed: \".concat(job.id), job.error);\n      components_UIManager.updateProgress(0, 'Generation failed');\n      components_UIManager.addStatusMessage('error', '❌', \"Generation failed: \".concat(job.error || 'Unknown error'), false);\n      this.moveJobToHistory(job);\n      this.emit('jobFailed', {\n        job: job\n      });\n      this.resetGenerationState();\n    }\n\n    /**\r\n     * Handle job cancellation\r\n     * @param {Object} job - Cancelled job\r\n     */\n  }, {\n    key: \"handleJobCancellation\",\n    value: function handleJobCancellation(job) {\n      console.log(\"\\u23F9\\uFE0F Job cancelled: \".concat(job.id));\n      components_UIManager.addStatusMessage('warning', '⏹️', 'Job was cancelled');\n      this.moveJobToHistory(job);\n      this.emit('jobCancelled', {\n        job: job\n      });\n      this.resetGenerationState();\n    }\n\n    /**\r\n     * Update job progress in UI\r\n     * @param {Object} job - Job object\r\n     */\n  }, {\n    key: \"updateJobProgress\",\n    value: function updateJobProgress(job) {\n      if (job === this.currentJob) {\n        components_UIManager.updateProgress(job.progress, job.currentStep || 'Processing...');\n      }\n    }\n\n    /**\r\n     * Reset generation state after completion/failure\r\n     */\n  }, {\n    key: \"resetGenerationState\",\n    value: function resetGenerationState() {\n      components_UIManager.hideProgress();\n      components_UIManager.enableGenerateButton();\n      this.isGenerationActive = false;\n      this.stopJobMonitoring();\n    }\n\n    /**\r\n     * Cancel active job\r\n     * @param {string} jobId - Job ID to cancel\r\n     * @returns {Promise<boolean>} Cancellation success\r\n     */\n  }, {\n    key: \"cancelJob\",\n    value: (function () {\n      var _cancelJob = JobManager_asyncToGenerator(/*#__PURE__*/JobManager_regenerator().m(function _callee6(jobId) {\n        var result, _t5;\n        return JobManager_regenerator().w(function (_context6) {\n          while (1) switch (_context6.p = _context6.n) {\n            case 0:\n              _context6.p = 0;\n              _context6.n = 1;\n              return services_APIService.cancelJob(jobId);\n            case 1:\n              result = _context6.v;\n              if (!result.success) {\n                _context6.n = 2;\n                break;\n              }\n              components_UIManager.addStatusMessage('info', '⏹️', 'Job cancellation requested');\n              return _context6.a(2, true);\n            case 2:\n              throw new Error(result.message || 'Failed to cancel job');\n            case 3:\n              _context6.n = 5;\n              break;\n            case 4:\n              _context6.p = 4;\n              _t5 = _context6.v;\n              console.error('❌ Failed to cancel job:', _t5);\n              components_UIManager.addStatusMessage('error', '❌', \"Failed to cancel job: \".concat(_t5.message));\n              return _context6.a(2, false);\n            case 5:\n              return _context6.a(2);\n          }\n        }, _callee6, null, [[0, 4]]);\n      }));\n      function cancelJob(_x4) {\n        return _cancelJob.apply(this, arguments);\n      }\n      return cancelJob;\n    }()\n    /**\r\n     * Stop video generation\r\n     */\n    )\n  }, {\n    key: \"stopVideoGeneration\",\n    value: function stopVideoGeneration() {\n      if (this.currentJob) {\n        this.cancelJob(this.currentJob.id);\n      }\n      this.resetGenerationState();\n      components_UIManager.addStatusMessage('warning', '⏹️', 'Video generation stopped');\n    }\n\n    /**\r\n     * Move job from active to history\r\n     * @param {Object} job - Job to move\r\n     */\n  }, {\n    key: \"moveJobToHistory\",\n    value: function moveJobToHistory(job) {\n      this.activeJobs.delete(job.id);\n      this.jobHistory.set(job.id, JobManager_objectSpread(JobManager_objectSpread({}, job), {}, {\n        movedToHistoryAt: new Date().toISOString()\n      }));\n      if (this.currentJob && this.currentJob.id === job.id) {\n        this.currentJob = null;\n      }\n      this.limitJobHistory();\n    }\n\n    /**\r\n     * Limit job history size\r\n     */\n  }, {\n    key: \"limitJobHistory\",\n    value: function limitJobHistory() {\n      var _this5 = this;\n      if (this.jobHistory.size > this.maxJobHistory) {\n        var entries = Array.from(this.jobHistory.entries());\n        var toRemove = entries.slice(0, entries.length - this.maxJobHistory);\n        toRemove.forEach(function (_ref3) {\n          var _ref4 = JobManager_slicedToArray(_ref3, 1),\n            jobId = _ref4[0];\n          _this5.jobHistory.delete(jobId);\n        });\n        console.log(\"\\uD83E\\uDDF9 Cleaned up \".concat(toRemove.length, \" old job records\"));\n      }\n    }\n\n    /**\r\n     * Get job by ID\r\n     * @param {string} jobId - Job ID\r\n     * @returns {Object|null} Job object or null\r\n     */\n  }, {\n    key: \"getJob\",\n    value: function getJob(jobId) {\n      return this.activeJobs.get(jobId) || this.jobHistory.get(jobId) || null;\n    }\n\n    /**\r\n     * Get all active jobs\r\n     * @returns {Array} Array of active jobs\r\n     */\n  }, {\n    key: \"getActiveJobs\",\n    value: function getActiveJobs() {\n      return Array.from(this.activeJobs.values());\n    }\n\n    /**\r\n     * Get job statistics\r\n     * @returns {Object} Job statistics\r\n     */\n  }, {\n    key: \"getJobStats\",\n    value: function getJobStats() {\n      var _this$currentJob;\n      return {\n        active: this.activeJobs.size,\n        history: this.jobHistory.size,\n        total: this.activeJobs.size + this.jobHistory.size,\n        currentJob: ((_this$currentJob = this.currentJob) === null || _this$currentJob === void 0 ? void 0 : _this$currentJob.id) || null,\n        isMonitoring: !!this.monitoringTimer,\n        isGenerationActive: this.isGenerationActive\n      };\n    }\n\n    /**\r\n     * Cleanup resources\r\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.stopJobMonitoring();\n      console.log('🧹 Job Manager cleaned up');\n    }\n  }]);\n}(/*#__PURE__*/JobManager_wrapNativeSuper(EventTarget));\n\n// Export singleton instance\n/* harmony default export */ var services_JobManager = (new JobManager());\n;// ./src/components/FormManager.js\nfunction FormManager_typeof(o) { \"@babel/helpers - typeof\"; return FormManager_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, FormManager_typeof(o); }\nfunction FormManager_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction FormManager_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? FormManager_ownKeys(Object(t), !0).forEach(function (r) { FormManager_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : FormManager_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction FormManager_defineProperty(e, r, t) { return (r = FormManager_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction FormManager_slicedToArray(r, e) { return FormManager_arrayWithHoles(r) || FormManager_iterableToArrayLimit(r, e) || FormManager_unsupportedIterableToArray(r, e) || FormManager_nonIterableRest(); }\nfunction FormManager_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction FormManager_unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return FormManager_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? FormManager_arrayLikeToArray(r, a) : void 0; } }\nfunction FormManager_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction FormManager_iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction FormManager_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction FormManager_regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return FormManager_regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (FormManager_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, FormManager_regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, FormManager_regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), FormManager_regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", FormManager_regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), FormManager_regeneratorDefine2(u), FormManager_regeneratorDefine2(u, o, \"Generator\"), FormManager_regeneratorDefine2(u, n, function () { return this; }), FormManager_regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (FormManager_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction FormManager_regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } FormManager_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { FormManager_regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, FormManager_regeneratorDefine2(e, r, n, t); }\nfunction FormManager_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction FormManager_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { FormManager_asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { FormManager_asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction FormManager_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction FormManager_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, FormManager_toPropertyKey(o.key), o); } }\nfunction FormManager_createClass(e, r, t) { return r && FormManager_defineProperties(e.prototype, r), t && FormManager_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction FormManager_toPropertyKey(t) { var i = FormManager_toPrimitive(t, \"string\"); return \"symbol\" == FormManager_typeof(i) ? i : i + \"\"; }\nfunction FormManager_toPrimitive(t, r) { if (\"object\" != FormManager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != FormManager_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * Form Manager - Professional form handling and validation\r\n * Manages form interactions, validations, dynamic updates, and preview generation\r\n */\n\n\n\nvar FormManager = /*#__PURE__*/function () {\n  function FormManager() {\n    FormManager_classCallCheck(this, FormManager);\n    this.genresByCountry = {};\n    this.templatesByGenre = {};\n    this.platformsByCountry = {};\n    this.formState = {\n      country: '',\n      platform: '',\n      genre: '',\n      template: '',\n      contentType: ''\n    };\n    this.isValidating = false;\n    this.validationCache = new Map();\n    console.log('📋 Form Manager initialized');\n  }\n\n  /**\r\n   * Initialize Form Manager with data and event listeners\r\n   */\n  return FormManager_createClass(FormManager, [{\n    key: \"init\",\n    value: (function () {\n      var _init = FormManager_asyncToGenerator(/*#__PURE__*/FormManager_regenerator().m(function _callee() {\n        return FormManager_regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              _context.n = 1;\n              return this.loadFormConfiguration();\n            case 1:\n              this.setupEventListeners();\n              this.initializeFormState();\n              console.log('📋 Form Manager ready');\n            case 2:\n              return _context.a(2);\n          }\n        }, _callee, this);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\r\n     * Load form configuration data (genres, templates, etc.)\r\n     */\n    )\n  }, {\n    key: \"loadFormConfiguration\",\n    value: (function () {\n      var _loadFormConfiguration = FormManager_asyncToGenerator(/*#__PURE__*/FormManager_regenerator().m(function _callee2() {\n        return FormManager_regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              // Load static genre data for countries\n              this.loadGenresByCountry();\n              this.loadTemplatesByGenre();\n\n              // Initialize platform data from API if needed\n              this.initializePlatformData();\n            case 1:\n              return _context2.a(2);\n          }\n        }, _callee2, this);\n      }));\n      function loadFormConfiguration() {\n        return _loadFormConfiguration.apply(this, arguments);\n      }\n      return loadFormConfiguration;\n    }()\n    /**\r\n     * Load genres by country configuration\r\n     */\n    )\n  }, {\n    key: \"loadGenresByCountry\",\n    value: function loadGenresByCountry() {\n      this.genresByCountry = {\n        FR: {\n          'Action & Aventure': 'Action & Adventure',\n          Animation: 'Animation',\n          Comédie: 'Comedy',\n          'Comédie Romantique': 'Romantic Comedy',\n          'Crime & Thriller': 'Crime & Thriller',\n          Documentaire: 'Documentary',\n          Drame: 'Drama',\n          Fantastique: 'Fantasy',\n          'Film de guerre': 'War Movies',\n          Histoire: 'History',\n          Horreur: 'Horror',\n          'Musique & Comédie Musicale': 'Music & Musical Comedy',\n          'Mystère & Thriller': 'Mystery & Thriller',\n          'Pour enfants': 'Kids',\n          'Reality TV': 'Reality TV',\n          'Réalisé en Europe': 'Made in Europe',\n          'Science-Fiction': 'Science Fiction',\n          'Sport & Fitness': 'Sport & Fitness',\n          Western: 'Western'\n        },\n        US: {\n          'Action & Adventure': 'Action & Adventure',\n          Animation: 'Animation',\n          Comedy: 'Comedy',\n          Crime: 'Crime',\n          Documentary: 'Documentary',\n          Drama: 'Drama',\n          Fantasy: 'Fantasy',\n          History: 'History',\n          Horror: 'Horror',\n          'Kids & Family': 'Kids & Family',\n          'Made in Europe': 'Made in Europe',\n          'Music & Musical': 'Music & Musical',\n          'Mystery & Thriller': 'Mystery & Thriller',\n          'Reality TV': 'Reality TV',\n          'Romance Movies': 'Romance Movies',\n          'Science Fiction': 'Science Fiction',\n          'Sport & Fitness': 'Sport & Fitness',\n          'Stand-up Comedy': 'Stand-up Comedy',\n          Western: 'Western'\n        }\n      };\n    }\n\n    /**\r\n     * Load template mappings for genres\r\n     */\n  }, {\n    key: \"loadTemplatesByGenre\",\n    value: function loadTemplatesByGenre() {\n      // Genre-specific HeyGen templates (from memory)\n      this.templatesByGenre = {\n        // Horror templates\n        'Horror': 'e2ad0e5c7e71483991536f5c93594e42',\n        'Horreur': 'e2ad0e5c7e71483991536f5c93594e42',\n        // Comedy templates  \n        'Comedy': '15d9eadcb46a45dbbca1834aa0a23ede',\n        'Comédie': '15d9eadcb46a45dbbca1834aa0a23ede',\n        'Stand-up Comedy': '15d9eadcb46a45dbbca1834aa0a23ede',\n        // Action templates\n        'Action & Adventure': 'e44b139a1b94446a997a7f2ac5ac4178',\n        'Action & Aventure': 'e44b139a1b94446a997a7f2ac5ac4178',\n        // Default template for other genres\n        'default': 'cc6718c5363e42b282a123f99b94b335'\n      };\n    }\n\n    /**\r\n     * Initialize platform data\r\n     */\n  }, {\n    key: \"initializePlatformData\",\n    value: function initializePlatformData() {\n      // This could be loaded from API in the future\n      // For now, we'll rely on server-side platform detection\n    }\n\n    /**\r\n     * Setup comprehensive form event listeners\r\n     */\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      // Country selection\n      var countrySelect = core_DOMManager.get('countrySelect');\n      if (countrySelect) {\n        countrySelect.addEventListener('change', function (e) {\n          _this.handleCountryChange(e.target.value);\n        });\n      }\n\n      // Platform selection\n      var platformSelect = core_DOMManager.get('platformSelect');\n      if (platformSelect) {\n        platformSelect.addEventListener('change', function (e) {\n          _this.handlePlatformChange(e.target.value);\n        });\n      }\n\n      // Genre selection\n      var genreSelect = core_DOMManager.get('genreSelect');\n      if (genreSelect) {\n        genreSelect.addEventListener('change', function (e) {\n          _this.handleGenreChange(e.target.value);\n        });\n      }\n\n      // Template selection\n      var templateSelect = core_DOMManager.get('templateSelect');\n      if (templateSelect) {\n        templateSelect.addEventListener('change', function (e) {\n          _this.handleTemplateChange(e.target.value);\n        });\n      }\n\n      // Content type radio buttons\n      var contentTypeRadios = core_DOMManager.get('contentTypeRadios');\n      if (contentTypeRadios) {\n        Array.from(contentTypeRadios).forEach(function (radio) {\n          radio.addEventListener('change', function (e) {\n            if (e.target.checked) {\n              _this.handleContentTypeChange(e.target.value);\n            }\n          });\n        });\n      }\n\n      // Form validation on submit\n      var generateButton = core_DOMManager.get('generateButton');\n      if (generateButton) {\n        generateButton.addEventListener('click', function (e) {\n          e.preventDefault();\n          _this.handleFormSubmit();\n        });\n      }\n    }\n\n    /**\r\n     * Initialize form state from current form values\r\n     */\n  }, {\n    key: \"initializeFormState\",\n    value: function initializeFormState() {\n      var formData = core_DOMManager.getFormData();\n      Object.assign(this.formState, formData);\n\n      // Set up initial dependencies\n      if (this.formState.country) {\n        this.updatePlatforms(this.formState.country);\n      }\n      if (this.formState.country && this.formState.platform) {\n        this.updateGenres(this.formState.country, this.formState.platform);\n      }\n      if (this.formState.genre) {\n        this.updateTemplates(this.formState.genre);\n      }\n      this.updatePreview();\n    }\n\n    // === Form Event Handlers ===\n\n    /**\r\n     * Handle country selection change\r\n     * @param {string} countryCode - Selected country code\r\n     */\n  }, {\n    key: \"handleCountryChange\",\n    value: function () {\n      var _handleCountryChange = FormManager_asyncToGenerator(/*#__PURE__*/FormManager_regenerator().m(function _callee3(countryCode) {\n        return FormManager_regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              console.log(\"\\uD83D\\uDCCB Country changed: \".concat(countryCode));\n              this.formState.country = countryCode;\n\n              // Reset dependent fields\n              this.resetPlatformSelection();\n              this.resetGenreSelection();\n              this.resetTemplateSelection();\n              if (!countryCode) {\n                _context3.n = 1;\n                break;\n              }\n              _context3.n = 1;\n              return this.updatePlatforms(countryCode);\n            case 1:\n              this.updatePreview();\n            case 2:\n              return _context3.a(2);\n          }\n        }, _callee3, this);\n      }));\n      function handleCountryChange(_x) {\n        return _handleCountryChange.apply(this, arguments);\n      }\n      return handleCountryChange;\n    }()\n    /**\r\n     * Handle platform selection change\r\n     * @param {string} platformValue - Selected platform value\r\n     */\n  }, {\n    key: \"handlePlatformChange\",\n    value: (function () {\n      var _handlePlatformChange = FormManager_asyncToGenerator(/*#__PURE__*/FormManager_regenerator().m(function _callee4(platformValue) {\n        return FormManager_regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              console.log(\"\\uD83D\\uDCCB Platform changed: \".concat(platformValue));\n              this.formState.platform = platformValue;\n\n              // Reset dependent fields\n              this.resetGenreSelection();\n              this.resetTemplateSelection();\n              if (!(this.formState.country && platformValue)) {\n                _context4.n = 1;\n                break;\n              }\n              _context4.n = 1;\n              return this.updateGenres(this.formState.country, platformValue);\n            case 1:\n              this.updatePreview();\n            case 2:\n              return _context4.a(2);\n          }\n        }, _callee4, this);\n      }));\n      function handlePlatformChange(_x2) {\n        return _handlePlatformChange.apply(this, arguments);\n      }\n      return handlePlatformChange;\n    }()\n    /**\r\n     * Handle genre selection change\r\n     * @param {string} genreValue - Selected genre value\r\n     */\n    )\n  }, {\n    key: \"handleGenreChange\",\n    value: function handleGenreChange(genreValue) {\n      console.log(\"\\uD83D\\uDCCB Genre changed: \".concat(genreValue));\n      this.formState.genre = genreValue;\n      this.resetTemplateSelection();\n      if (genreValue) {\n        this.updateTemplates(genreValue);\n      }\n      this.updatePreview();\n    }\n\n    /**\r\n     * Handle template selection change\r\n     * @param {string} templateValue - Selected template value\r\n     */\n  }, {\n    key: \"handleTemplateChange\",\n    value: function handleTemplateChange(templateValue) {\n      console.log(\"\\uD83D\\uDCCB Template changed: \".concat(templateValue));\n      this.formState.template = templateValue;\n      this.updatePreview();\n    }\n\n    /**\r\n     * Handle content type change\r\n     * @param {string} contentType - Selected content type\r\n     */\n  }, {\n    key: \"handleContentTypeChange\",\n    value: function handleContentTypeChange(contentType) {\n      console.log(\"\\uD83D\\uDCCB Content type changed: \".concat(contentType));\n      this.formState.contentType = contentType;\n      this.updatePreview();\n    }\n\n    // === Form Update Methods ===\n\n    /**\r\n     * Update platforms dropdown based on country\r\n     * @param {string} countryCode - Country code\r\n     */\n  }, {\n    key: \"updatePlatforms\",\n    value: function () {\n      var _updatePlatforms = FormManager_asyncToGenerator(/*#__PURE__*/FormManager_regenerator().m(function _callee5(countryCode) {\n        var result, _t;\n        return FormManager_regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              _context5.p = 0;\n              components_UIManager.addStatusMessage('info', '🔄', 'Loading platforms...');\n              _context5.n = 1;\n              return services_APIService.getPlatforms(countryCode);\n            case 1:\n              result = _context5.v;\n              if (result.success && result.platforms) {\n                this.populatePlatformSelect(result.platforms);\n                components_UIManager.addStatusMessage('success', '✅', 'Platforms loaded');\n              } else {\n                this.populateDefaultPlatforms(countryCode);\n              }\n              _context5.n = 3;\n              break;\n            case 2:\n              _context5.p = 2;\n              _t = _context5.v;\n              console.error('❌ Failed to load platforms:', _t);\n              this.populateDefaultPlatforms(countryCode);\n              components_UIManager.addStatusMessage('warning', '⚠️', 'Using default platforms');\n            case 3:\n              return _context5.a(2);\n          }\n        }, _callee5, this, [[0, 2]]);\n      }));\n      function updatePlatforms(_x3) {\n        return _updatePlatforms.apply(this, arguments);\n      }\n      return updatePlatforms;\n    }()\n    /**\r\n     * Populate platform select with options\r\n     * @param {Array} platforms - Array of platform objects\r\n     */\n  }, {\n    key: \"populatePlatformSelect\",\n    value: function populatePlatformSelect(platforms) {\n      var platformSelect = core_DOMManager.get('platformSelect');\n      if (!platformSelect) return;\n\n      // Clear existing options (except first)\n      while (platformSelect.children.length > 1) {\n        platformSelect.removeChild(platformSelect.lastChild);\n      }\n\n      // Add platform options\n      platforms.forEach(function (platform) {\n        var option = document.createElement('option');\n        option.value = platform.value;\n        option.textContent = platform.name;\n        platformSelect.appendChild(option);\n      });\n    }\n\n    /**\r\n     * Populate default platforms when API fails\r\n     * @param {string} countryCode - Country code\r\n     */\n  }, {\n    key: \"populateDefaultPlatforms\",\n    value: function populateDefaultPlatforms(countryCode) {\n      var defaultPlatforms = [{\n        value: 'Netflix',\n        name: 'Netflix'\n      }, {\n        value: 'Prime Video',\n        name: 'Prime Video'\n      }, {\n        value: 'Disney+',\n        name: 'Disney+'\n      }, {\n        value: 'Apple TV+',\n        name: 'Apple TV+'\n      }, {\n        value: 'HBO Max',\n        name: 'HBO Max'\n      }];\n      this.populatePlatformSelect(defaultPlatforms);\n    }\n\n    /**\r\n     * Update genres based on country and platform\r\n     * @param {string} countryCode - Country code\r\n     * @param {string} platformValue - Platform value\r\n     */\n  }, {\n    key: \"updateGenres\",\n    value: (function () {\n      var _updateGenres = FormManager_asyncToGenerator(/*#__PURE__*/FormManager_regenerator().m(function _callee6(countryCode, platformValue) {\n        var result, _t2;\n        return FormManager_regenerator().w(function (_context6) {\n          while (1) switch (_context6.p = _context6.n) {\n            case 0:\n              _context6.p = 0;\n              _context6.n = 1;\n              return services_APIService.getGenres(countryCode, platformValue);\n            case 1:\n              result = _context6.v;\n              if (!(result.success && result.genres)) {\n                _context6.n = 2;\n                break;\n              }\n              this.populateGenreSelect(result.genres);\n              return _context6.a(2);\n            case 2:\n              _context6.n = 4;\n              break;\n            case 3:\n              _context6.p = 3;\n              _t2 = _context6.v;\n              console.error('❌ Failed to load genres from API:', _t2);\n            case 4:\n              // Fallback to static genre data\n              this.populateGenreSelectFromStatic(countryCode);\n            case 5:\n              return _context6.a(2);\n          }\n        }, _callee6, this, [[0, 3]]);\n      }));\n      function updateGenres(_x4, _x5) {\n        return _updateGenres.apply(this, arguments);\n      }\n      return updateGenres;\n    }()\n    /**\r\n     * Populate genre select from API data\r\n     * @param {Array} genres - Array of genre objects\r\n     */\n    )\n  }, {\n    key: \"populateGenreSelect\",\n    value: function populateGenreSelect(genres) {\n      var genreSelect = core_DOMManager.get('genreSelect');\n      if (!genreSelect) return;\n\n      // Clear existing options (except first)\n      while (genreSelect.children.length > 1) {\n        genreSelect.removeChild(genreSelect.lastChild);\n      }\n\n      // Add genre options\n      genres.forEach(function (genre) {\n        var option = document.createElement('option');\n        option.value = genre.value;\n        option.textContent = genre.name;\n        genreSelect.appendChild(option);\n      });\n    }\n\n    /**\r\n     * Populate genre select from static data\r\n     * @param {string} countryCode - Country code\r\n     */\n  }, {\n    key: \"populateGenreSelectFromStatic\",\n    value: function populateGenreSelectFromStatic(countryCode) {\n      var genres = this.genresByCountry[countryCode];\n      if (!genres) return;\n      var genreSelect = core_DOMManager.get('genreSelect');\n      if (!genreSelect) return;\n\n      // Clear existing options (except first)\n      while (genreSelect.children.length > 1) {\n        genreSelect.removeChild(genreSelect.lastChild);\n      }\n\n      // Add genre options\n      Object.entries(genres).forEach(function (_ref) {\n        var _ref2 = FormManager_slicedToArray(_ref, 2),\n          displayName = _ref2[0],\n          value = _ref2[1];\n        var option = document.createElement('option');\n        option.value = value;\n        option.textContent = displayName;\n        genreSelect.appendChild(option);\n      });\n    }\n\n    /**\r\n     * Update templates based on genre\r\n     * @param {string} genreValue - Selected genre value\r\n     */\n  }, {\n    key: \"updateTemplates\",\n    value: function updateTemplates(genreValue) {\n      var _this2 = this;\n      var templateSelect = core_DOMManager.get('templateSelect');\n      if (!templateSelect) return;\n\n      // Get appropriate template ID\n      var templateId = this.getTemplateForGenre(genreValue);\n\n      // Find and select the matching template\n      Array.from(templateSelect.options).forEach(function (option) {\n        if (option.value === templateId) {\n          option.selected = true;\n          _this2.formState.template = templateId;\n        }\n      });\n      console.log(\"\\uD83D\\uDCCB Template auto-selected for genre '\".concat(genreValue, \"': \").concat(templateId));\n    }\n\n    /**\r\n     * Get template ID for specific genre\r\n     * @param {string} genreValue - Genre value\r\n     * @returns {string} Template ID\r\n     */\n  }, {\n    key: \"getTemplateForGenre\",\n    value: function getTemplateForGenre(genreValue) {\n      // Check for exact match\n      if (this.templatesByGenre[genreValue]) {\n        return this.templatesByGenre[genreValue];\n      }\n\n      // Check for case-insensitive match\n      var genreLower = genreValue.toLowerCase();\n      for (var _i = 0, _Object$entries = Object.entries(this.templatesByGenre); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = FormManager_slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          templateId = _Object$entries$_i[1];\n        if (key.toLowerCase() === genreLower) {\n          return templateId;\n        }\n      }\n\n      // Return default template\n      return this.templatesByGenre.default;\n    }\n\n    // === Form Reset Methods ===\n\n    /**\r\n     * Reset platform selection\r\n     */\n  }, {\n    key: \"resetPlatformSelection\",\n    value: function resetPlatformSelection() {\n      var platformSelect = core_DOMManager.get('platformSelect');\n      if (platformSelect) {\n        platformSelect.selectedIndex = 0;\n        // Clear all options except the first\n        while (platformSelect.children.length > 1) {\n          platformSelect.removeChild(platformSelect.lastChild);\n        }\n      }\n      this.formState.platform = '';\n    }\n\n    /**\r\n     * Reset genre selection\r\n     */\n  }, {\n    key: \"resetGenreSelection\",\n    value: function resetGenreSelection() {\n      var genreSelect = core_DOMManager.get('genreSelect');\n      if (genreSelect) {\n        genreSelect.selectedIndex = 0;\n        // Clear all options except the first\n        while (genreSelect.children.length > 1) {\n          genreSelect.removeChild(genreSelect.lastChild);\n        }\n      }\n      this.formState.genre = '';\n    }\n\n    /**\r\n     * Reset template selection\r\n     */\n  }, {\n    key: \"resetTemplateSelection\",\n    value: function resetTemplateSelection() {\n      var templateSelect = core_DOMManager.get('templateSelect');\n      if (templateSelect) {\n        templateSelect.selectedIndex = 0;\n      }\n      this.formState.template = '';\n    }\n\n    // === Form Validation ===\n\n    /**\r\n     * Validate current form state\r\n     * @returns {Object} Validation result\r\n     */\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      var errors = [];\n      var warnings = [];\n\n      // Required field validation\n      if (!this.formState.country) {\n        errors.push('Country is required');\n      }\n      if (!this.formState.platform) {\n        errors.push('Platform is required');\n      }\n      if (!this.formState.genre) {\n        errors.push('Genre is required');\n      }\n      if (!this.formState.contentType) {\n        errors.push('Content type is required');\n      }\n\n      // Template validation (warning only)\n      if (!this.formState.template) {\n        warnings.push('No template selected - default will be used');\n      }\n      return {\n        isValid: errors.length === 0,\n        errors: errors,\n        warnings: warnings\n      };\n    }\n\n    /**\r\n     * Validate StreamGank URL\r\n     * @param {string} url - URL to validate\r\n     * @returns {Promise<Object>} Validation result\r\n     */\n  }, {\n    key: \"validateStreamGankUrl\",\n    value: (function () {\n      var _validateStreamGankUrl = FormManager_asyncToGenerator(/*#__PURE__*/FormManager_regenerator().m(function _callee7(url) {\n        var cacheKey, result, validation, _validation, _t3;\n        return FormManager_regenerator().w(function (_context7) {\n          while (1) switch (_context7.p = _context7.n) {\n            case 0:\n              if (!(!url || url.includes('Select all parameters'))) {\n                _context7.n = 1;\n                break;\n              }\n              return _context7.a(2, {\n                valid: false,\n                message: 'Please complete the form to generate a valid URL'\n              });\n            case 1:\n              cacheKey = \"url:\".concat(url);\n              if (!this.validationCache.has(cacheKey)) {\n                _context7.n = 2;\n                break;\n              }\n              return _context7.a(2, this.validationCache.get(cacheKey));\n            case 2:\n              _context7.p = 2;\n              components_UIManager.addStatusMessage('info', '🔍', 'Validating URL...');\n              this.isValidating = true;\n              _context7.n = 3;\n              return services_APIService.validateUrl(url);\n            case 3:\n              result = _context7.v;\n              validation = {\n                valid: result.success,\n                message: result.message,\n                moviesCount: result.moviesCount,\n                timestamp: new Date().toISOString()\n              }; // Cache validation result\n              this.validationCache.set(cacheKey, validation);\n              if (validation.valid) {\n                components_UIManager.addStatusMessage('success', '✅', \"URL validated! Found \".concat(validation.moviesCount, \" items\"));\n              } else {\n                components_UIManager.addStatusMessage('error', '❌', \"URL validation failed: \".concat(validation.message));\n              }\n              return _context7.a(2, validation);\n            case 4:\n              _context7.p = 4;\n              _t3 = _context7.v;\n              console.error('❌ URL validation error:', _t3);\n              _validation = {\n                valid: false,\n                message: _t3.message || 'Validation failed',\n                timestamp: new Date().toISOString()\n              };\n              components_UIManager.addStatusMessage('error', '❌', \"Validation error: \".concat(_validation.message));\n              return _context7.a(2, _validation);\n            case 5:\n              _context7.p = 5;\n              this.isValidating = false;\n              return _context7.f(5);\n            case 6:\n              return _context7.a(2);\n          }\n        }, _callee7, this, [[2, 4, 5, 6]]);\n      }));\n      function validateStreamGankUrl(_x6) {\n        return _validateStreamGankUrl.apply(this, arguments);\n      }\n      return validateStreamGankUrl;\n    }() // === Form Submission ===\n    /**\r\n     * Handle form submission\r\n     */\n    )\n  }, {\n    key: \"handleFormSubmit\",\n    value: function () {\n      var _handleFormSubmit = FormManager_asyncToGenerator(/*#__PURE__*/FormManager_regenerator().m(function _callee8() {\n        var validation, previewUrl, urlValidation, _t4;\n        return FormManager_regenerator().w(function (_context8) {\n          while (1) switch (_context8.p = _context8.n) {\n            case 0:\n              _context8.p = 0;\n              // Update form state from DOM\n              this.updateFormStateFromDOM();\n\n              // Validate form\n              validation = this.validateForm();\n              if (validation.isValid) {\n                _context8.n = 1;\n                break;\n              }\n              validation.errors.forEach(function (error) {\n                components_UIManager.addStatusMessage('error', '❌', error);\n              });\n              return _context8.a(2);\n            case 1:\n              // Show warnings if any\n              validation.warnings.forEach(function (warning) {\n                components_UIManager.addStatusMessage('warning', '⚠️', warning);\n              });\n\n              // Generate and validate URL\n              previewUrl = this.generateStreamGankUrl();\n              _context8.n = 2;\n              return this.validateStreamGankUrl(previewUrl);\n            case 2:\n              urlValidation = _context8.v;\n              if (urlValidation.valid) {\n                _context8.n = 3;\n                break;\n              }\n              return _context8.a(2);\n            case 3:\n              // Emit form submission event with data\n              this.emit('formSubmit', {\n                formData: FormManager_objectSpread({}, this.formState),\n                previewUrl: previewUrl,\n                validation: urlValidation\n              });\n              _context8.n = 5;\n              break;\n            case 4:\n              _context8.p = 4;\n              _t4 = _context8.v;\n              console.error('❌ Form submission error:', _t4);\n              components_UIManager.addStatusMessage('error', '❌', \"Form submission failed: \".concat(_t4.message));\n            case 5:\n              return _context8.a(2);\n          }\n        }, _callee8, this, [[0, 4]]);\n      }));\n      function handleFormSubmit() {\n        return _handleFormSubmit.apply(this, arguments);\n      }\n      return handleFormSubmit;\n    }()\n    /**\r\n     * Update form state from current DOM values\r\n     */\n  }, {\n    key: \"updateFormStateFromDOM\",\n    value: function updateFormStateFromDOM() {\n      var formData = core_DOMManager.getFormData();\n      Object.assign(this.formState, formData);\n    }\n\n    // === Preview Generation ===\n\n    /**\r\n     * Update form preview display\r\n     */\n  }, {\n    key: \"updatePreview\",\n    value: function updatePreview() {\n      components_UIManager.updateFormPreview();\n    }\n\n    /**\r\n     * Generate StreamGank URL from current form state\r\n     * @returns {string} Generated URL\r\n     */\n  }, {\n    key: \"generateStreamGankUrl\",\n    value: function generateStreamGankUrl() {\n      if (!this.formState.country || !this.formState.platform || !this.formState.contentType) {\n        return 'Select all parameters to generate URL';\n      }\n      var baseUrl = 'https://streamgank.com';\n      var params = new URLSearchParams();\n      if (this.formState.country) params.set('country', this.formState.country);\n      if (this.formState.platform) params.set('platform', this.formState.platform);\n\n      // Only add content type if not 'all'\n      if (this.formState.contentType && this.formState.contentType !== 'all') {\n        params.set('type', this.formState.contentType);\n      }\n\n      // Only add genre if not 'all'\n      if (this.formState.genre && this.formState.genre !== 'all') {\n        params.set('genre', this.formState.genre);\n      }\n      return \"\".concat(baseUrl, \"?\").concat(params.toString());\n    }\n\n    // === Utility Methods ===\n\n    /**\r\n     * Get current form data\r\n     * @returns {Object} Current form state\r\n     */\n  }, {\n    key: \"getFormData\",\n    value: function getFormData() {\n      this.updateFormStateFromDOM();\n      return FormManager_objectSpread({}, this.formState);\n    }\n\n    /**\r\n     * Set form data\r\n     * @param {Object} data - Form data to set\r\n     */\n  }, {\n    key: \"setFormData\",\n    value: function setFormData(data) {\n      Object.assign(this.formState, data);\n\n      // Update DOM elements\n      Object.entries(data).forEach(function (_ref3) {\n        var _ref4 = FormManager_slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n        var element = core_DOMManager.get(\"\".concat(key, \"Select\")) || core_DOMManager.get(key);\n        if (element && element.value !== undefined) {\n          element.value = value;\n        }\n      });\n      this.updatePreview();\n    }\n\n    /**\r\n     * Reset form to initial state\r\n     */\n  }, {\n    key: \"resetForm\",\n    value: function resetForm() {\n      this.formState = {\n        country: '',\n        platform: '',\n        genre: '',\n        template: '',\n        contentType: ''\n      };\n\n      // Reset DOM elements\n      ['countrySelect', 'platformSelect', 'genreSelect', 'templateSelect'].forEach(function (selectName) {\n        var select = core_DOMManager.get(selectName);\n        if (select) {\n          select.selectedIndex = 0;\n        }\n      });\n\n      // Reset radio buttons\n      var contentTypeRadios = core_DOMManager.get('contentTypeRadios');\n      if (contentTypeRadios) {\n        Array.from(contentTypeRadios).forEach(function (radio) {\n          radio.checked = false;\n        });\n      }\n\n      // Clear validation cache\n      this.validationCache.clear();\n      this.updatePreview();\n      console.log('📋 Form reset');\n    }\n\n    /**\r\n     * Get form validation state\r\n     * @returns {Object} Current validation state\r\n     */\n  }, {\n    key: \"getValidationState\",\n    value: function getValidationState() {\n      return {\n        isValidating: this.isValidating,\n        cacheSize: this.validationCache.size,\n        lastValidation: null // Could track this if needed\n      };\n    }\n  }]);\n}();\n\n// Make FormManager an EventTarget for form submission events\nObject.assign(FormManager.prototype, {\n  emit: function emit(eventName, data) {\n    var event = new CustomEvent(eventName, {\n      detail: data\n    });\n    this.dispatchEvent(event);\n  },\n  addEventListener: EventTarget.prototype.addEventListener,\n  removeEventListener: EventTarget.prototype.removeEventListener,\n  dispatchEvent: EventTarget.prototype.dispatchEvent\n});\n\n// Export singleton instance\n/* harmony default export */ var components_FormManager = (new FormManager());\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.fixed.js\nvar es_string_fixed = __webpack_require__(4298);\n;// ./src/components/Navigation.js\nfunction Navigation_typeof(o) { \"@babel/helpers - typeof\"; return Navigation_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, Navigation_typeof(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Navigation_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction Navigation_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, Navigation_toPropertyKey(o.key), o); } }\nfunction Navigation_createClass(e, r, t) { return r && Navigation_defineProperties(e.prototype, r), t && Navigation_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction Navigation_toPropertyKey(t) { var i = Navigation_toPrimitive(t, \"string\"); return \"symbol\" == Navigation_typeof(i) ? i : i + \"\"; }\nfunction Navigation_toPrimitive(t, r) { if (\"object\" != Navigation_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != Navigation_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * Navigation Component - Professional navigation bar\r\n * Provides consistent navigation across all pages with active states\r\n */\n\n\nvar Navigation = /*#__PURE__*/function () {\n  function Navigation() {\n    Navigation_classCallCheck(this, Navigation);\n    this.currentRoute = null;\n    this.navigationData = {\n      brand: {\n        title: 'StreamGank',\n        subtitle: 'AMBUSH THE BEST VOD TOGETHER',\n        version: 'BETA v1.3'\n      },\n      links: [{\n        path: '/dashboard',\n        label: 'Dashboard',\n        icon: '📊',\n        description: 'Video generation and queue management'\n      }, {\n        path: '/jobs',\n        label: 'Jobs',\n        icon: '📋',\n        description: 'View all jobs and their status'\n      }]\n    };\n    console.log('🧭 Navigation Component initialized');\n  }\n\n  /**\r\n   * Initialize navigation component\r\n   */\n  return Navigation_createClass(Navigation, [{\n    key: \"init\",\n    value: function init() {\n      this.setupRouterListener();\n      console.log('🧭 Navigation Component ready');\n    }\n\n    /**\r\n     * Setup router event listener to update active states\r\n     */\n  }, {\n    key: \"setupRouterListener\",\n    value: function setupRouterListener() {\n      var _this = this;\n      core_Router.addEventListener('routeChange', function (event) {\n        _this.currentRoute = event.detail.path;\n        _this.updateActiveStates();\n      });\n    }\n\n    /**\r\n     * Render navigation bar\r\n     * @param {Object} options - Navigation options\r\n     * @returns {string} Navigation HTML\r\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _options$showBrand = options.showBrand,\n        showBrand = _options$showBrand === void 0 ? true : _options$showBrand,\n        _options$showVersion = options.showVersion,\n        showVersion = _options$showVersion === void 0 ? true : _options$showVersion,\n        _options$showLogin = options.showLogin,\n        showLogin = _options$showLogin === void 0 ? true : _options$showLogin,\n        _options$fixed = options.fixed,\n        fixed = _options$fixed === void 0 ? false : _options$fixed,\n        _options$theme = options.theme,\n        theme = _options$theme === void 0 ? 'default' : _options$theme;\n      return \"\\n            <nav class=\\\"streamgank-navbar \".concat(fixed ? 'fixed-top' : '', \" \").concat(theme, \"\\\">\\n                <div class=\\\"container-fluid\\\">\\n                    <div class=\\\"row py-2 align-items-center w-100\\\">\\n                        <!-- Brand Section -->\\n                        \").concat(showBrand ? this.renderBrand(showVersion) : '', \"\\n                        \\n                        <!-- Navigation Links -->\\n                        <div class=\\\"col-auto navigation-links\\\">\\n                            \").concat(this.renderNavigationLinks(), \"\\n                        </div>\\n                        \\n                        <!-- Actions Section -->\\n                        <div class=\\\"col-auto ms-auto\\\">\\n                            <div class=\\\"navbar-actions d-flex align-items-center gap-2\\\">\\n                                \").concat(this.renderStatusIndicator(), \"\\n                                \").concat(this.renderQuickActions(), \"\\n                                \").concat(showLogin ? this.renderLoginButton() : '', \"\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </nav>\\n        \");\n    }\n\n    /**\r\n     * Render brand section\r\n     * @param {boolean} showVersion - Whether to show version\r\n     * @returns {string} Brand HTML\r\n     */\n  }, {\n    key: \"renderBrand\",\n    value: function renderBrand(showVersion) {\n      return \"\\n            <div class=\\\"col\\\">\\n                <a href=\\\"/dashboard\\\" class=\\\"brand-container d-flex align-items-center text-decoration-none\\\">\\n                    <h1 class=\\\"brand-title mb-0\\\">\\n                        \".concat(this.navigationData.brand.title, \"\\n                        <span class=\\\"text-accent\\\">Gank</span>\\n                    </h1>\\n                    \").concat(showVersion ? \"\\n                    <span class=\\\"version-badge ms-2\\\">\".concat(this.navigationData.brand.version, \"</span>\\n                    \") : '', \"\\n                </a>\\n                <span class=\\\"brand-subtitle d-block\\\">\").concat(this.navigationData.brand.subtitle, \"</span>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Render navigation links\r\n     * @returns {string} Navigation links HTML\r\n     */\n  }, {\n    key: \"renderNavigationLinks\",\n    value: function renderNavigationLinks() {\n      var _this2 = this;\n      return this.navigationData.links.map(function (link) {\n        var isActive = _this2.isActiveRoute(link.path);\n        return \"\\n                <a href=\\\"\".concat(link.path, \"\\\" \\n                   class=\\\"nav-link btn \").concat(isActive ? 'btn-primary' : 'btn-outline-primary', \" me-2\\\"\\n                   data-route=\\\"\").concat(link.path, \"\\\"\\n                   title=\\\"\").concat(link.description, \"\\\">\\n                    <span class=\\\"nav-icon\\\">\").concat(link.icon, \"</span>\\n                    <span class=\\\"nav-label\\\">\").concat(link.label, \"</span>\\n                </a>\\n            \");\n      }).join('');\n    }\n\n    /**\r\n     * Render status indicator\r\n     * @returns {string} Status indicator HTML\r\n     */\n  }, {\n    key: \"renderStatusIndicator\",\n    value: function renderStatusIndicator() {\n      return \"\\n            <div class=\\\"status-indicator d-none d-md-flex align-items-center me-3\\\">\\n                <div class=\\\"connection-status me-2\\\" id=\\\"nav-connection-status\\\">\\n                    <div class=\\\"status-dot bg-success\\\" title=\\\"Connected\\\"></div>\\n                </div>\\n                <div class=\\\"queue-summary\\\" id=\\\"nav-queue-summary\\\">\\n                    <small class=\\\"text-muted\\\">\\n                        Queue: <span id=\\\"nav-queue-count\\\" class=\\\"badge bg-info\\\">0</span>\\n                    </small>\\n                </div>\\n            </div>\\n        \";\n    }\n\n    /**\r\n     * Render quick actions\r\n     * @returns {string} Quick actions HTML\r\n     */\n  }, {\n    key: \"renderQuickActions\",\n    value: function renderQuickActions() {\n      return \"\\n            <div class=\\\"quick-actions d-flex gap-1\\\">\\n                <button class=\\\"btn btn-outline-secondary btn-sm\\\" \\n                        id=\\\"nav-refresh-btn\\\"\\n                        title=\\\"Refresh Status\\\">\\n                    \\uD83D\\uDD04\\n                </button>\\n                <div class=\\\"dropdown\\\">\\n                    <button class=\\\"btn btn-outline-secondary btn-sm dropdown-toggle\\\" \\n                            type=\\\"button\\\" \\n                            data-bs-toggle=\\\"dropdown\\\">\\n                        \\u2699\\uFE0F\\n                    </button>\\n                    <ul class=\\\"dropdown-menu\\\">\\n                        <li><a class=\\\"dropdown-item\\\" href=\\\"#\\\" onclick=\\\"toggleQueueDashboard()\\\">Queue Dashboard</a></li>\\n                        <li><a class=\\\"dropdown-item\\\" href=\\\"#\\\" onclick=\\\"clearAllLogs()\\\">Clear Logs</a></li>\\n                        <li><hr class=\\\"dropdown-divider\\\"></li>\\n                        <li><a class=\\\"dropdown-item\\\" href=\\\"#\\\" onclick=\\\"showAppStatus()\\\">App Status</a></li>\\n                    </ul>\\n                </div>\\n            </div>\\n        \";\n    }\n\n    /**\r\n     * Render login button\r\n     * @returns {string} Login button HTML\r\n     */\n  }, {\n    key: \"renderLoginButton\",\n    value: function renderLoginButton() {\n      return \"\\n            <button class=\\\"btn btn-primary login-btn\\\">\\n                \\uD83D\\uDC64 LOGIN\\n            </button>\\n        \";\n    }\n\n    /**\r\n     * Check if route is currently active\r\n     * @param {string} path - Path to check\r\n     * @returns {boolean} Whether route is active\r\n     */\n  }, {\n    key: \"isActiveRoute\",\n    value: function isActiveRoute(path) {\n      if (!this.currentRoute) {\n        this.currentRoute = window.location.pathname;\n      }\n\n      // Exact match\n      if (this.currentRoute === path) {\n        return true;\n      }\n\n      // Special cases\n      if (path === '/dashboard' && (this.currentRoute === '/' || this.currentRoute === '')) {\n        return true;\n      }\n      if (path === '/jobs' && this.currentRoute.startsWith('/job/')) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\r\n     * Update active states after route change\r\n     */\n  }, {\n    key: \"updateActiveStates\",\n    value: function updateActiveStates() {\n      var _this3 = this;\n      var navLinks = document.querySelectorAll('.nav-link[data-route]');\n      navLinks.forEach(function (link) {\n        var routePath = link.getAttribute('data-route');\n        var isActive = _this3.isActiveRoute(routePath);\n        if (isActive) {\n          link.classList.remove('btn-outline-primary');\n          link.classList.add('btn-primary');\n        } else {\n          link.classList.remove('btn-primary');\n          link.classList.add('btn-outline-primary');\n        }\n      });\n    }\n\n    /**\r\n     * Update navigation status indicators\r\n     * @param {Object} status - Status data\r\n     */\n  }, {\n    key: \"updateStatus\",\n    value: function updateStatus(status) {\n      // Update connection status\n      var connectionStatus = document.getElementById('nav-connection-status');\n      if (connectionStatus) {\n        var dot = connectionStatus.querySelector('.status-dot');\n        if (status.connected) {\n          dot.className = 'status-dot bg-success';\n          dot.title = \"Connected via \".concat(status.connectionType || 'unknown');\n        } else {\n          dot.className = 'status-dot bg-warning';\n          dot.title = 'Disconnected - using fallback';\n        }\n      }\n\n      // Update queue count\n      var queueCount = document.getElementById('nav-queue-count');\n      if (queueCount && status.queue) {\n        var totalJobs = (status.queue.pending || 0) + (status.queue.processing || 0);\n        queueCount.textContent = totalJobs;\n        queueCount.className = totalJobs > 0 ? 'badge bg-warning' : 'badge bg-info';\n      }\n    }\n\n    /**\r\n     * Setup navigation event handlers\r\n     */\n  }, {\n    key: \"setupEventHandlers\",\n    value: function setupEventHandlers() {\n      // Handle navigation link clicks\n      document.addEventListener('click', function (event) {\n        var navLink = event.target.closest('.nav-link[data-route]');\n        if (navLink) {\n          event.preventDefault();\n          var route = navLink.getAttribute('data-route');\n          core_Router.navigate(route);\n        }\n      });\n\n      // Handle refresh button\n      var refreshBtn = document.getElementById('nav-refresh-btn');\n      if (refreshBtn) {\n        refreshBtn.addEventListener('click', function () {\n          // Emit refresh event that other components can listen to\n          window.dispatchEvent(new CustomEvent('nav-refresh-requested'));\n        });\n      }\n    }\n\n    /**\r\n     * Add custom navigation link\r\n     * @param {Object} linkConfig - Link configuration\r\n     */\n  }, {\n    key: \"addNavigationLink\",\n    value: function addNavigationLink(linkConfig) {\n      this.navigationData.links.push(linkConfig);\n    }\n\n    /**\r\n     * Remove navigation link\r\n     * @param {string} path - Path of link to remove\r\n     */\n  }, {\n    key: \"removeNavigationLink\",\n    value: function removeNavigationLink(path) {\n      this.navigationData.links = this.navigationData.links.filter(function (link) {\n        return link.path !== path;\n      });\n    }\n\n    /**\r\n     * Get current navigation state\r\n     * @returns {Object} Navigation state\r\n     */\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return {\n        currentRoute: this.currentRoute,\n        links: this.navigationData.links\n      };\n    }\n\n    /**\r\n     * Cleanup navigation resources\r\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      // Remove event listeners if needed\n      console.log('🧭 Navigation Component cleaned up');\n    }\n  }]);\n}();\n\n// Global functions for dropdown actions\nwindow.toggleQueueDashboard = function () {\n  var dashboard = document.getElementById('queue-dashboard');\n  if (dashboard) {\n    dashboard.style.display = dashboard.style.display === 'none' ? 'block' : 'none';\n  }\n};\nwindow.clearAllLogs = function () {\n  if (confirm('Clear all status messages?')) {\n    var statusMessages = document.getElementById('status-messages');\n    if (statusMessages) {\n      statusMessages.innerHTML = '';\n    }\n  }\n};\nwindow.showAppStatus = function () {\n  // This could open a modal with app status information\n  alert('App Status: OK\\nConnection: Active\\nBuild: Production');\n};\n\n// Export singleton instance\n/* harmony default export */ var components_Navigation = (new Navigation());\n;// ./src/pages/Dashboard.js\n\n\n\n\n\n\n\n\n\n\nfunction Dashboard_typeof(o) { \"@babel/helpers - typeof\"; return Dashboard_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, Dashboard_typeof(o); }\nfunction Dashboard_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction Dashboard_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, Dashboard_toPropertyKey(o.key), o); } }\nfunction Dashboard_createClass(e, r, t) { return r && Dashboard_defineProperties(e.prototype, r), t && Dashboard_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction Dashboard_toPropertyKey(t) { var i = Dashboard_toPrimitive(t, \"string\"); return \"symbol\" == Dashboard_typeof(i) ? i : i + \"\"; }\nfunction Dashboard_toPrimitive(t, r) { if (\"object\" != Dashboard_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != Dashboard_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * Dashboard Page - Main video generation interface\r\n * Works with existing HTML structure, doesn't replace it\r\n */\n\n\n\n\n\nvar DashboardPage = /*#__PURE__*/function () {\n  function DashboardPage() {\n    Dashboard_classCallCheck(this, DashboardPage);\n    this.isInitialized = false;\n    console.log('📊 Dashboard Page initialized');\n  }\n\n  /**\r\n   * Initialize dashboard page\r\n   */\n  return Dashboard_createClass(DashboardPage, [{\n    key: \"init\",\n    value: function init() {\n      if (this.isInitialized) return;\n\n      // The dashboard uses the existing form and UI managers\n      // which are already initialized in main.js\n      this.isInitialized = true;\n      console.log('📊 Dashboard Page ready');\n    }\n\n    /**\r\n     * Activate dashboard functionality with existing HTML\r\n     * @param {HTMLElement} container - Container (optional, uses existing DOM)\r\n     */\n  }, {\n    key: \"render\",\n    value: function render(container) {\n      // Work with existing DOM structure - don't replace it\n      console.log('📊 Dashboard: Activating with existing HTML structure');\n\n      // Re-cache DOM elements from existing structure\n      core_DOMManager.init();\n\n      // Initialize form and UI managers for existing DOM\n      components_FormManager.init();\n      components_UIManager.init();\n\n      // Start real-time updates if not already running\n      if (!services_RealtimeService.isInitialized) {\n        services_RealtimeService.init();\n      }\n      console.log('📊 Dashboard functionality activated');\n    }\n\n    /**\r\n     * Handle page activation (when navigated to)\r\n     */\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      // Update page title\n      document.title = 'Dashboard - StreamGank Video Generator';\n\n      // Refresh queue status when dashboard becomes active\n      services_RealtimeService.refreshStatus();\n      console.log('📊 Dashboard activated');\n    }\n\n    /**\r\n     * Handle page deactivation (when navigating away)\r\n     */\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      // Optional cleanup when leaving dashboard\n      console.log('📊 Dashboard deactivated');\n    }\n\n    /**\r\n     * Get current dashboard state\r\n     * @returns {Object} Dashboard state\r\n     */\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return {\n        initialized: this.isInitialized,\n        formData: components_FormManager && typeof components_FormManager.getFormData === 'function' ? components_FormManager.getFormData() : null,\n        uiState: components_UIManager && typeof components_UIManager.getState === 'function' ? components_UIManager.getState() : null\n      };\n    }\n\n    /**\r\n     * Cleanup dashboard resources\r\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.isInitialized = false;\n      console.log('📊 Dashboard Page cleaned up');\n    }\n  }]);\n}();\n\n// Export singleton instance\n/* harmony default export */ var Dashboard = (new DashboardPage());\n;// ./src/pages/JobDetail.js\nfunction JobDetail_typeof(o) { \"@babel/helpers - typeof\"; return JobDetail_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, JobDetail_typeof(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction JobDetail_regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return JobDetail_regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (JobDetail_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, JobDetail_regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, JobDetail_regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), JobDetail_regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", JobDetail_regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), JobDetail_regeneratorDefine2(u), JobDetail_regeneratorDefine2(u, o, \"Generator\"), JobDetail_regeneratorDefine2(u, n, function () { return this; }), JobDetail_regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (JobDetail_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction JobDetail_regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } JobDetail_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { JobDetail_regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, JobDetail_regeneratorDefine2(e, r, n, t); }\nfunction JobDetail_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction JobDetail_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { JobDetail_asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { JobDetail_asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction JobDetail_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction JobDetail_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, JobDetail_toPropertyKey(o.key), o); } }\nfunction JobDetail_createClass(e, r, t) { return r && JobDetail_defineProperties(e.prototype, r), t && JobDetail_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction JobDetail_toPropertyKey(t) { var i = JobDetail_toPrimitive(t, \"string\"); return \"symbol\" == JobDetail_typeof(i) ? i : i + \"\"; }\nfunction JobDetail_toPrimitive(t, r) { if (\"object\" != JobDetail_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != JobDetail_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * JobDetail Page - Individual job information and monitoring\r\n * Shows detailed job progress, logs, and results\r\n */\n\n\n\n\n\n\nvar JobDetailPage = /*#__PURE__*/function () {\n  function JobDetailPage() {\n    JobDetail_classCallCheck(this, JobDetailPage);\n    this.currentJobId = null;\n    this.jobData = null;\n    this.refreshTimer = null;\n    this.refreshInterval = 5000; // 5 seconds\n\n    console.log('📄 JobDetail Page initialized');\n  }\n\n  /**\r\n   * Render the job detail page\r\n   * @param {HTMLElement} container - Container to render into\r\n   * @param {Object} params - Route parameters (contains jobId)\r\n   */\n  return JobDetail_createClass(JobDetailPage, [{\n    key: \"render\",\n    value: (function () {\n      var _render = JobDetail_asyncToGenerator(/*#__PURE__*/JobDetail_regenerator().m(function _callee(container) {\n        var params,\n          jobId,\n          _args = arguments,\n          _t;\n        return JobDetail_regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              params = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              jobId = params.jobId;\n              if (container) {\n                _context.n = 1;\n                break;\n              }\n              console.error('📄 JobDetail: No container provided');\n              return _context.a(2);\n            case 1:\n              if (jobId) {\n                _context.n = 2;\n                break;\n              }\n              console.error('📄 JobDetail: No job ID provided');\n              this.renderError(container, 'No job ID specified');\n              return _context.a(2);\n            case 2:\n              this.currentJobId = jobId;\n\n              // Show loading state first\n              container.innerHTML = this.createLoadingTemplate();\n              _context.p = 3;\n              _context.n = 4;\n              return this.loadJobData(jobId);\n            case 4:\n              // Render job details\n              container.innerHTML = this.createJobTemplate();\n\n              // Start auto-refresh for active jobs\n              this.startAutoRefresh();\n              console.log(\"\\uD83D\\uDCC4 JobDetail rendered for job: \".concat(jobId));\n              _context.n = 6;\n              break;\n            case 5:\n              _context.p = 5;\n              _t = _context.v;\n              console.error('📄 JobDetail render error:', _t);\n              this.renderError(container, _t.message);\n            case 6:\n              return _context.a(2);\n          }\n        }, _callee, this, [[3, 5]]);\n      }));\n      function render(_x) {\n        return _render.apply(this, arguments);\n      }\n      return render;\n    }()\n    /**\r\n     * Load job data from API or local storage\r\n     * @param {string} jobId - Job ID to load\r\n     */\n    )\n  }, {\n    key: \"loadJobData\",\n    value: (function () {\n      var _loadJobData = JobDetail_asyncToGenerator(/*#__PURE__*/JobDetail_regenerator().m(function _callee2(jobId) {\n        var job, response, _t2;\n        return JobDetail_regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              _context2.p = 0;\n              // First try to get from JobManager (active jobs)\n              job = services_JobManager.getJob(jobId);\n              if (job) {\n                _context2.n = 2;\n                break;\n              }\n              _context2.n = 1;\n              return services_APIService.getJobStatus(jobId);\n            case 1:\n              response = _context2.v;\n              if (response.success) {\n                job = response.job;\n              }\n            case 2:\n              if (job) {\n                _context2.n = 3;\n                break;\n              }\n              throw new Error(\"Job \".concat(jobId, \" not found\"));\n            case 3:\n              this.jobData = job;\n\n              // Update page title\n              document.title = \"Job \".concat(jobId, \" - StreamGank\");\n              _context2.n = 5;\n              break;\n            case 4:\n              _context2.p = 4;\n              _t2 = _context2.v;\n              throw new Error(\"Failed to load job data: \".concat(_t2.message));\n            case 5:\n              return _context2.a(2);\n          }\n        }, _callee2, this, [[0, 4]]);\n      }));\n      function loadJobData(_x2) {\n        return _loadJobData.apply(this, arguments);\n      }\n      return loadJobData;\n    }()\n    /**\r\n     * Create loading template\r\n     * @returns {string} Loading HTML\r\n     */\n    )\n  }, {\n    key: \"createLoadingTemplate\",\n    value: function createLoadingTemplate() {\n      return \"\\n            <div class=\\\"job-detail-page\\\">\\n                <div class=\\\"container-fluid\\\">\\n                    <!-- Header with navigation -->\\n                    <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n                        <div>\\n                            <button class=\\\"btn btn-outline-secondary me-3\\\" onclick=\\\"history.back()\\\">\\n                                \\u2190 Back\\n                            </button>\\n                            <h1 class=\\\"h3 mb-0\\\">Loading Job...</h1>\\n                        </div>\\n                        <div class=\\\"nav-links\\\">\\n                            <a href=\\\"/dashboard\\\" class=\\\"btn btn-outline-primary me-2\\\">Dashboard</a>\\n                        </div>\\n                    </div>\\n                    \\n                    <!-- Loading State -->\\n                    <div class=\\\"text-center py-5\\\">\\n                        <div class=\\\"spinner-border text-primary\\\" role=\\\"status\\\">\\n                            <span class=\\\"visually-hidden\\\">Loading...</span>\\n                        </div>\\n                        <p class=\\\"mt-3 text-muted\\\">Loading job details...</p>\\n                    </div>\\n                </div>\\n            </div>\\n        \";\n    }\n\n    /**\r\n     * Create main job detail template\r\n     * @returns {string} Job detail HTML\r\n     */\n  }, {\n    key: \"createJobTemplate\",\n    value: function createJobTemplate() {\n      var _job$params, _job$params2, _job$params3, _job$params4, _job$params5, _job$params6;\n      var job = this.jobData;\n      var statusClass = this.getStatusClass(job.status);\n      var statusIcon = this.getStatusIcon(job.status);\n      return \"\\n            <div class=\\\"job-detail-page\\\">\\n                <div class=\\\"container-fluid\\\">\\n                    <!-- Header with navigation and actions -->\\n                    <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n                        <div>\\n                            <button class=\\\"btn btn-outline-secondary me-3\\\" onclick=\\\"history.back()\\\">\\n                                \\u2190 Back\\n                            </button>\\n                            <h1 class=\\\"h3 mb-0\\\">Job \".concat(job.id, \"</h1>\\n                            <div class=\\\"mt-1\\\">\\n                                <span class=\\\"badge \").concat(statusClass, \" me-2\\\">\").concat(statusIcon, \" \").concat(job.status.toUpperCase(), \"</span>\\n                                <small class=\\\"text-muted\\\">Created: \").concat(this.formatDate(job.createdAt), \"</small>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"nav-links\\\">\\n                            <a href=\\\"/dashboard\\\" class=\\\"btn btn-outline-primary me-2\\\">Dashboard</a>\\n                            \").concat(this.createActionButtons(job), \"\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"row\\\">\\n                        <!-- Left Column - Job Information -->\\n                        <div class=\\\"col-md-6\\\">\\n                            <!-- Job Parameters -->\\n                            <div class=\\\"card mb-4\\\">\\n                                <div class=\\\"card-header\\\">\\n                                    <h5 class=\\\"mb-0\\\">\\uD83D\\uDCCB Job Parameters</h5>\\n                                </div>\\n                                <div class=\\\"card-body\\\">\\n                                    <dl class=\\\"row mb-0\\\">\\n                                        <dt class=\\\"col-sm-4\\\">Country:</dt>\\n                                        <dd class=\\\"col-sm-8\\\">\").concat(((_job$params = job.params) === null || _job$params === void 0 ? void 0 : _job$params.country) || 'N/A', \"</dd>\\n                                        \\n                                        <dt class=\\\"col-sm-4\\\">Platform:</dt>\\n                                        <dd class=\\\"col-sm-8\\\">\").concat(((_job$params2 = job.params) === null || _job$params2 === void 0 ? void 0 : _job$params2.platform) || 'N/A', \"</dd>\\n                                        \\n                                        <dt class=\\\"col-sm-4\\\">Genre:</dt>\\n                                        <dd class=\\\"col-sm-8\\\">\").concat(((_job$params3 = job.params) === null || _job$params3 === void 0 ? void 0 : _job$params3.genre) || 'N/A', \"</dd>\\n                                        \\n                                        <dt class=\\\"col-sm-4\\\">Content Type:</dt>\\n                                        <dd class=\\\"col-sm-8\\\">\").concat(((_job$params4 = job.params) === null || _job$params4 === void 0 ? void 0 : _job$params4.contentType) || 'N/A', \"</dd>\\n                                        \\n                                        <dt class=\\\"col-sm-4\\\">Template:</dt>\\n                                        <dd class=\\\"col-sm-8\\\">\").concat(((_job$params5 = job.params) === null || _job$params5 === void 0 ? void 0 : _job$params5.template) || 'Default', \"</dd>\\n                                        \\n                                        \").concat((_job$params6 = job.params) !== null && _job$params6 !== void 0 && _job$params6.url ? \"\\n                                        <dt class=\\\"col-sm-4\\\">Source URL:</dt>\\n                                        <dd class=\\\"col-sm-8\\\">\\n                                            <a href=\\\"\".concat(job.params.url, \"\\\" target=\\\"_blank\\\" class=\\\"text-break\\\">\\n                                                \").concat(job.params.url, \"\\n                                            </a>\\n                                        </dd>\\n                                        \") : '', \"\\n                                    </dl>\\n                                </div>\\n                            </div>\\n\\n                            <!-- Job Timeline -->\\n                            <div class=\\\"card mb-4\\\">\\n                                <div class=\\\"card-header\\\">\\n                                    <h5 class=\\\"mb-0\\\">\\u23F1\\uFE0F Timeline</h5>\\n                                </div>\\n                                <div class=\\\"card-body\\\">\\n                                    \").concat(this.createTimeline(job), \"\\n                                </div>\\n                            </div>\\n\\n                            <!-- Video Result (if available) -->\\n                            \").concat(job.videoUrl ? this.createVideoResult(job) : '', \"\\n                        </div>\\n\\n                        <!-- Right Column - Progress and Status -->\\n                        <div class=\\\"col-md-6\\\">\\n                            <!-- Progress Card -->\\n                            <div class=\\\"card mb-4\\\">\\n                                <div class=\\\"card-header\\\">\\n                                    <h5 class=\\\"mb-0\\\">\\uD83D\\uDCCA Progress</h5>\\n                                </div>\\n                                <div class=\\\"card-body\\\">\\n                                    <div class=\\\"mb-3\\\">\\n                                        <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                                            <span class=\\\"fw-medium\\\">\").concat(job.currentStep || 'Processing', \"</span>\\n                                            <span class=\\\"text-muted\\\">\").concat(job.progress || 0, \"%</span>\\n                                        </div>\\n                                        <div class=\\\"progress\\\">\\n                                            <div class=\\\"progress-bar \").concat(this.getProgressClass(job.progress), \"\\\" \\n                                                 role=\\\"progressbar\\\" style=\\\"width: \").concat(job.progress || 0, \"%\\\">\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                    \\n                                    \").concat(job.error ? \"\\n                                    <div class=\\\"alert alert-danger\\\">\\n                                        <h6 class=\\\"alert-heading\\\">\\u274C Error</h6>\\n                                        <p class=\\\"mb-0\\\">\".concat(job.error, \"</p>\\n                                    </div>\\n                                    \") : '', \"\\n                                    \\n                                    \").concat(job.creatomateId ? \"\\n                                    <div class=\\\"mt-3\\\">\\n                                        <h6>\\uD83C\\uDFAC Creatomate Render</h6>\\n                                        <p class=\\\"mb-1\\\">\\n                                            <strong>ID:</strong> \\n                                            <code>\".concat(job.creatomateId, \"</code>\\n                                        </p>\\n                                        <button class=\\\"btn btn-outline-primary btn-sm\\\" onclick=\\\"checkCreatomateStatus('\").concat(job.creatomateId, \"')\\\">\\n                                            Check Render Status\\n                                        </button>\\n                                    </div>\\n                                    \") : '', \"\\n                                </div>\\n                            </div>\\n\\n                            <!-- Queue Information -->\\n                            <div class=\\\"card mb-4\\\">\\n                                <div class=\\\"card-header\\\">\\n                                    <h5 class=\\\"mb-0\\\">\\uD83D\\uDCCB Queue Information</h5>\\n                                </div>\\n                                <div class=\\\"card-body\\\">\\n                                    <dl class=\\\"row mb-0\\\">\\n                                        <dt class=\\\"col-sm-6\\\">Queue Position:</dt>\\n                                        <dd class=\\\"col-sm-6\\\">\").concat(job.queuePosition || 'N/A', \"</dd>\\n                                        \\n                                        <dt class=\\\"col-sm-6\\\">Processing Time:</dt>\\n                                        <dd class=\\\"col-sm-6\\\">\").concat(this.calculateDuration(job), \"</dd>\\n                                        \\n                                        <dt class=\\\"col-sm-6\\\">Last Updated:</dt>\\n                                        <dd class=\\\"col-sm-6\\\">\").concat(this.formatDate(job.updatedAt || job.createdAt), \"</dd>\\n                                    </dl>\\n                                </div>\\n                            </div>\\n\\n                            <!-- Status Messages -->\\n                            <div class=\\\"card\\\">\\n                                <div class=\\\"card-header\\\">\\n                                    <h5 class=\\\"mb-0\\\">\\uD83D\\uDCDD Status Messages</h5>\\n                                </div>\\n                                <div class=\\\"card-body\\\">\\n                                    <div id=\\\"job-status-messages\\\" class=\\\"status-messages\\\" style=\\\"max-height: 300px; overflow-y: auto;\\\">\\n                                        <!-- Status messages will be populated here -->\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Create action buttons based on job status\r\n     * @param {Object} job - Job data\r\n     * @returns {string} Action buttons HTML\r\n     */\n  }, {\n    key: \"createActionButtons\",\n    value: function createActionButtons(job) {\n      var buttons = [];\n      if (job.status === 'processing' || job.status === 'pending') {\n        buttons.push(\"\\n                <button class=\\\"btn btn-warning me-2\\\" onclick=\\\"cancelJob('\".concat(job.id, \"')\\\">\\n                    \\u23F9\\uFE0F Cancel Job\\n                </button>\\n            \"));\n      }\n      if (job.status === 'failed') {\n        buttons.push(\"\\n                <button class=\\\"btn btn-primary me-2\\\" onclick=\\\"retryJob('\".concat(job.id, \"')\\\">\\n                    \\uD83D\\uDD04 Retry Job\\n                </button>\\n            \"));\n      }\n      buttons.push(\"\\n            <button class=\\\"btn btn-outline-secondary me-2\\\" onclick=\\\"refreshJobData('\".concat(job.id, \"')\\\">\\n                \\uD83D\\uDD04 Refresh\\n            </button>\\n        \"));\n      return buttons.join('');\n    }\n\n    /**\r\n     * Create timeline HTML\r\n     * @param {Object} job - Job data\r\n     * @returns {string} Timeline HTML\r\n     */\n  }, {\n    key: \"createTimeline\",\n    value: function createTimeline(job) {\n      var _this = this;\n      var events = [];\n      events.push({\n        time: job.createdAt,\n        status: 'created',\n        message: 'Job created and queued'\n      });\n      if (job.startedAt) {\n        events.push({\n          time: job.startedAt,\n          status: 'started',\n          message: 'Job processing started'\n        });\n      }\n      if (job.completedAt) {\n        events.push({\n          time: job.completedAt,\n          status: 'completed',\n          message: 'Job completed successfully'\n        });\n      }\n      return events.map(function (event) {\n        return \"\\n            <div class=\\\"timeline-item mb-3\\\">\\n                <div class=\\\"d-flex align-items-start\\\">\\n                    <div class=\\\"timeline-icon me-3\\\">\\n                        \".concat(_this.getStatusIcon(event.status), \"\\n                    </div>\\n                    <div class=\\\"timeline-content\\\">\\n                        <p class=\\\"mb-1 fw-medium\\\">\").concat(event.message, \"</p>\\n                        <small class=\\\"text-muted\\\">\").concat(_this.formatDate(event.time), \"</small>\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n      }).join('');\n    }\n\n    /**\r\n     * Create video result section\r\n     * @param {Object} job - Job data\r\n     * @returns {string} Video result HTML\r\n     */\n  }, {\n    key: \"createVideoResult\",\n    value: function createVideoResult(job) {\n      return \"\\n            <div class=\\\"card mb-4\\\">\\n                <div class=\\\"card-header\\\">\\n                    <h5 class=\\\"mb-0\\\">\\uD83C\\uDFAC Video Result</h5>\\n                </div>\\n                <div class=\\\"card-body\\\">\\n                    <video controls class=\\\"w-100 mb-3\\\" style=\\\"max-height: 400px;\\\">\\n                        <source src=\\\"\".concat(job.videoUrl, \"\\\" type=\\\"video/mp4\\\">\\n                        Your browser does not support the video tag.\\n                    </video>\\n                    <div class=\\\"d-flex gap-2\\\">\\n                        <a href=\\\"\").concat(job.videoUrl, \"\\\" target=\\\"_blank\\\" class=\\\"btn btn-primary\\\">\\n                            \\uD83D\\uDD17 Open Video\\n                        </a>\\n                        <a href=\\\"\").concat(job.videoUrl, \"\\\" download class=\\\"btn btn-outline-secondary\\\">\\n                            \\uD83D\\uDCBE Download\\n                        </a>\\n                        <button class=\\\"btn btn-outline-info\\\" onclick=\\\"copyToClipboard('\").concat(job.videoUrl, \"')\\\">\\n                            \\uD83D\\uDCCB Copy URL\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Start auto-refresh timer for active jobs\r\n     */\n  }, {\n    key: \"startAutoRefresh\",\n    value: function startAutoRefresh() {\n      var _this2 = this;\n      this.stopAutoRefresh();\n      if (this.jobData && ['pending', 'processing'].includes(this.jobData.status)) {\n        this.refreshTimer = setInterval(function () {\n          _this2.refreshJobData(_this2.currentJobId);\n        }, this.refreshInterval);\n        console.log(\"\\uD83D\\uDCC4 Auto-refresh started for job \".concat(this.currentJobId));\n      }\n    }\n\n    /**\r\n     * Stop auto-refresh timer\r\n     */\n  }, {\n    key: \"stopAutoRefresh\",\n    value: function stopAutoRefresh() {\n      if (this.refreshTimer) {\n        clearInterval(this.refreshTimer);\n        this.refreshTimer = null;\n      }\n    }\n\n    /**\r\n     * Refresh job data\r\n     * @param {string} jobId - Job ID to refresh\r\n     */\n  }, {\n    key: \"refreshJobData\",\n    value: (function () {\n      var _refreshJobData = JobDetail_asyncToGenerator(/*#__PURE__*/JobDetail_regenerator().m(function _callee3(jobId) {\n        var container, _t3;\n        return JobDetail_regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              _context3.n = 1;\n              return this.loadJobData(jobId);\n            case 1:\n              if (!(this.currentJobId === jobId)) {\n                _context3.n = 2;\n                break;\n              }\n              container = document.querySelector('.job-detail-page').parentElement;\n              _context3.n = 2;\n              return this.render(container, {\n                jobId: jobId\n              });\n            case 2:\n              _context3.n = 4;\n              break;\n            case 3:\n              _context3.p = 3;\n              _t3 = _context3.v;\n              console.error('📄 Failed to refresh job data:', _t3);\n            case 4:\n              return _context3.a(2);\n          }\n        }, _callee3, this, [[0, 3]]);\n      }));\n      function refreshJobData(_x3) {\n        return _refreshJobData.apply(this, arguments);\n      }\n      return refreshJobData;\n    }()\n    /**\r\n     * Render error state\r\n     * @param {HTMLElement} container - Container element\r\n     * @param {string} message - Error message\r\n     */\n    )\n  }, {\n    key: \"renderError\",\n    value: function renderError(container, message) {\n      container.innerHTML = \"\\n            <div class=\\\"job-detail-page\\\">\\n                <div class=\\\"container-fluid\\\">\\n                    <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n                        <div>\\n                            <button class=\\\"btn btn-outline-secondary me-3\\\" onclick=\\\"history.back()\\\">\\n                                \\u2190 Back\\n                            </button>\\n                            <h1 class=\\\"h3 mb-0\\\">Job Not Found</h1>\\n                        </div>\\n                        <div class=\\\"nav-links\\\">\\n                            <a href=\\\"/dashboard\\\" class=\\\"btn btn-outline-primary me-2\\\">Dashboard</a>\\n                        </div>\\n                    </div>\\n                    \\n                    <div class=\\\"alert alert-danger\\\">\\n                        <h4 class=\\\"alert-heading\\\">\\u274C Error</h4>\\n                        <p class=\\\"mb-0\\\">\".concat(message, \"</p>\\n                        <hr>\\n                        <a href=\\\"/dashboard\\\" class=\\\"btn btn-primary\\\">Return to Dashboard</a>\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Handle page activation\r\n     */\n  }, {\n    key: \"activate\",\n    value: function activate(params) {\n      console.log(\"\\uD83D\\uDCC4 JobDetail activated for job: \".concat(params.jobId));\n    }\n\n    /**\r\n     * Handle page deactivation\r\n     */\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      this.stopAutoRefresh();\n      console.log('📄 JobDetail deactivated');\n    }\n\n    /**\r\n     * Get status CSS class\r\n     * @param {string} status - Job status\r\n     * @returns {string} CSS class\r\n     */\n  }, {\n    key: \"getStatusClass\",\n    value: function getStatusClass(status) {\n      var classes = {\n        pending: 'bg-warning',\n        processing: 'bg-info',\n        completed: 'bg-success',\n        failed: 'bg-danger',\n        cancelled: 'bg-secondary'\n      };\n      return classes[status] || 'bg-secondary';\n    }\n\n    /**\r\n     * Get status icon\r\n     * @param {string} status - Job status\r\n     * @returns {string} Icon\r\n     */\n  }, {\n    key: \"getStatusIcon\",\n    value: function getStatusIcon(status) {\n      var icons = {\n        created: '➕',\n        started: '▶️',\n        pending: '⏳',\n        processing: '🔄',\n        completed: '✅',\n        failed: '❌',\n        cancelled: '⏹️'\n      };\n      return icons[status] || '📄';\n    }\n\n    /**\r\n     * Get progress bar CSS class\r\n     * @param {number} progress - Progress percentage\r\n     * @returns {string} CSS class\r\n     */\n  }, {\n    key: \"getProgressClass\",\n    value: function getProgressClass(progress) {\n      if (progress >= 100) return 'bg-success';\n      if (progress >= 75) return 'bg-info';\n      if (progress >= 50) return 'bg-warning';\n      return 'bg-primary';\n    }\n\n    /**\r\n     * Format date for display\r\n     * @param {string} dateString - ISO date string\r\n     * @returns {string} Formatted date\r\n     */\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      return new Date(dateString).toLocaleString();\n    }\n\n    /**\r\n     * Calculate job duration\r\n     * @param {Object} job - Job data\r\n     * @returns {string} Duration string\r\n     */\n  }, {\n    key: \"calculateDuration\",\n    value: function calculateDuration(job) {\n      if (!job.startedAt) return 'Not started';\n      var start = new Date(job.startedAt);\n      var end = job.completedAt ? new Date(job.completedAt) : new Date();\n      var duration = end - start;\n      return components_UIManager.formatDuration(duration);\n    }\n\n    /**\r\n     * Cleanup resources\r\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.stopAutoRefresh();\n      console.log('📄 JobDetail Page cleaned up');\n    }\n  }]);\n}();\n\n// Global functions for button actions (called from template)\nwindow.cancelJob = /*#__PURE__*/function () {\n  var _ref = JobDetail_asyncToGenerator(/*#__PURE__*/JobDetail_regenerator().m(function _callee4(jobId) {\n    var result, _t4;\n    return JobDetail_regenerator().w(function (_context4) {\n      while (1) switch (_context4.p = _context4.n) {\n        case 0:\n          if (!confirm('Are you sure you want to cancel this job?')) {\n            _context4.n = 4;\n            break;\n          }\n          _context4.p = 1;\n          _context4.n = 2;\n          return services_JobManager.cancelJob(jobId);\n        case 2:\n          result = _context4.v;\n          if (result) {\n            location.reload();\n          }\n          _context4.n = 4;\n          break;\n        case 3:\n          _context4.p = 3;\n          _t4 = _context4.v;\n          alert(\"Failed to cancel job: \".concat(_t4.message));\n        case 4:\n          return _context4.a(2);\n      }\n    }, _callee4, null, [[1, 3]]);\n  }));\n  return function (_x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nwindow.retryJob = /*#__PURE__*/function () {\n  var _ref2 = JobDetail_asyncToGenerator(/*#__PURE__*/JobDetail_regenerator().m(function _callee5(jobId) {\n    return JobDetail_regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          alert('Retry functionality not yet implemented');\n        case 1:\n          return _context5.a(2);\n      }\n    }, _callee5);\n  }));\n  return function (_x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nwindow.refreshJobData = function (jobId) {\n  location.reload();\n};\nwindow.checkCreatomateStatus = /*#__PURE__*/function () {\n  var _ref3 = JobDetail_asyncToGenerator(/*#__PURE__*/JobDetail_regenerator().m(function _callee6(creatomateId) {\n    var result, _t5;\n    return JobDetail_regenerator().w(function (_context6) {\n      while (1) switch (_context6.p = _context6.n) {\n        case 0:\n          _context6.p = 0;\n          _context6.n = 1;\n          return services_APIService.getCreatomateStatus(creatomateId);\n        case 1:\n          result = _context6.v;\n          if (result.success) {\n            alert(\"Creatomate Status: \".concat(result.status, \"\\nProgress: \").concat(result.progress || 'N/A', \"%\"));\n          } else {\n            alert(\"Error: \".concat(result.message));\n          }\n          _context6.n = 3;\n          break;\n        case 2:\n          _context6.p = 2;\n          _t5 = _context6.v;\n          alert(\"Error checking status: \".concat(_t5.message));\n        case 3:\n          return _context6.a(2);\n      }\n    }, _callee6, null, [[0, 2]]);\n  }));\n  return function (_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nwindow.copyToClipboard = /*#__PURE__*/function () {\n  var _ref4 = JobDetail_asyncToGenerator(/*#__PURE__*/JobDetail_regenerator().m(function _callee7(text) {\n    var _t6;\n    return JobDetail_regenerator().w(function (_context7) {\n      while (1) switch (_context7.p = _context7.n) {\n        case 0:\n          _context7.p = 0;\n          _context7.n = 1;\n          return navigator.clipboard.writeText(text);\n        case 1:\n          alert('URL copied to clipboard!');\n          _context7.n = 3;\n          break;\n        case 2:\n          _context7.p = 2;\n          _t6 = _context7.v;\n          alert('Failed to copy URL');\n        case 3:\n          return _context7.a(2);\n      }\n    }, _callee7, null, [[0, 2]]);\n  }));\n  return function (_x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n// Export singleton instance\n/* harmony default export */ var JobDetail = (new JobDetailPage());\n;// ./src/main.js\nfunction main_typeof(o) { \"@babel/helpers - typeof\"; return main_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, main_typeof(o); }\nfunction main_slicedToArray(r, e) { return main_arrayWithHoles(r) || main_iterableToArrayLimit(r, e) || main_unsupportedIterableToArray(r, e) || main_nonIterableRest(); }\nfunction main_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction main_unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return main_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? main_arrayLikeToArray(r, a) : void 0; } }\nfunction main_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction main_iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction main_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction main_regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return main_regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (main_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, main_regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, main_regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), main_regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", main_regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), main_regeneratorDefine2(u), main_regeneratorDefine2(u, o, \"Generator\"), main_regeneratorDefine2(u, n, function () { return this; }), main_regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (main_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction main_regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } main_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { main_regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, main_regeneratorDefine2(e, r, n, t); }\nfunction main_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction main_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { main_asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { main_asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction main_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction main_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, main_toPropertyKey(o.key), o); } }\nfunction main_createClass(e, r, t) { return r && main_defineProperties(e.prototype, r), t && main_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction main_toPropertyKey(t) { var i = main_toPrimitive(t, \"string\"); return \"symbol\" == main_typeof(i) ? i : i + \"\"; }\nfunction main_toPrimitive(t, r) { if (\"object\" != main_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != main_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * StreamGank Video Generator - Professional Modular Frontend\r\n * Main Application Entry Point\r\n *\r\n * This is the core orchestrator that initializes and coordinates all modules:\r\n * - DOM Management (Element caching and manipulation)\r\n * - API Communication (HTTP client with caching and retry logic)\r\n * - Real-time Updates (SSE with polling fallback)\r\n * - Job Management (Video generation lifecycle)\r\n * - UI Management (Status messages, progress, video display)\r\n * - Form Management (Validation, dynamic updates, preview)\r\n */\n\n// Core modules\n\n\n\n// Service modules\n\n\n\n\n// Component modules\n\n\n\n\n// Page modules\n\n\n\n/**\r\n * Main Application Class - Orchestrates all modules\r\n */\nvar StreamGankApp = /*#__PURE__*/function () {\n  function StreamGankApp() {\n    main_classCallCheck(this, StreamGankApp);\n    this.isInitialized = false;\n    this.currentPage = null;\n    this.appContainer = null;\n    this.modules = {\n      dom: core_DOMManager,\n      router: core_Router,\n      api: services_APIService,\n      realtime: services_RealtimeService,\n      jobs: services_JobManager,\n      ui: components_UIManager,\n      form: components_FormManager,\n      navigation: components_Navigation\n    };\n    this.pages = {\n      dashboard: Dashboard,\n      jobDetail: JobDetail\n    };\n    console.log('🚀 StreamGank App initializing...');\n  }\n\n  /**\r\n   * Initialize the entire application\r\n   */\n  return main_createClass(StreamGankApp, [{\n    key: \"init\",\n    value: (function () {\n      var _init = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee() {\n        var _t;\n        return main_regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              if (!this.isInitialized) {\n                _context.n = 1;\n                break;\n              }\n              console.warn('⚠️ App already initialized');\n              return _context.a(2);\n            case 1:\n              _context.p = 1;\n              console.log('🏗️ Initializing StreamGank Video Generator...');\n\n              // Phase 1: Initialize core systems\n              _context.n = 2;\n              return this.initializeCore();\n            case 2:\n              // Phase 2: Setup application container\n              this.setupAppContainer();\n\n              // Phase 3: Initialize routing system\n              this.setupRouting();\n\n              // Phase 4: Initialize services\n              _context.n = 3;\n              return this.initializeServices();\n            case 3:\n              _context.n = 4;\n              return this.initializeComponents();\n            case 4:\n              // Phase 6: Setup cross-module event handlers\n              this.setupEventHandlers();\n\n              // Phase 7: Start routing and real-time services\n              this.startServices();\n              this.isInitialized = true;\n              console.log('✅ StreamGank App initialized successfully');\n              components_UIManager.addStatusMessage('success', '🚀', 'Application ready for video generation!');\n              _context.n = 6;\n              break;\n            case 5:\n              _context.p = 5;\n              _t = _context.v;\n              console.error('❌ Failed to initialize app:', _t);\n              this.handleInitializationError(_t);\n            case 6:\n              return _context.a(2);\n          }\n        }, _callee, this, [[1, 5]]);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\r\n     * Phase 1: Initialize core systems\r\n     */\n    )\n  }, {\n    key: \"initializeCore\",\n    value: (function () {\n      var _initializeCore = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee2() {\n        return main_regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              console.log('🎯 Initializing core systems...');\n\n              // Initialize DOM manager (must be first)\n              core_DOMManager.init();\n              console.log('✅ Core systems ready');\n            case 1:\n              return _context2.a(2);\n          }\n        }, _callee2);\n      }));\n      function initializeCore() {\n        return _initializeCore.apply(this, arguments);\n      }\n      return initializeCore;\n    }()\n    /**\r\n    * Phase 2: Setup application container\r\n    */\n    )\n  }, {\n    key: \"setupAppContainer\",\n    value: function setupAppContainer() {\n      console.log('📦 Setting up application container...');\n\n      // Use the existing HTML structure - DON'T replace it\n      this.appContainer = document.body;\n\n      // Find existing main content area or use body\n      this.mainContent = document.querySelector('.main-content') || document.querySelector('.container-fluid') || this.appContainer;\n      console.log('✅ Using existing application structure');\n    }\n\n    /**\r\n     * Phase 3: Setup routing system\r\n     */\n  }, {\n    key: \"setupRouting\",\n    value: function setupRouting() {\n      var _this = this;\n      console.log('🛤️ Setting up routing system...');\n\n      // Define routes\n      core_Router.addRoute('/', function () {\n        return _this.renderPage('dashboard');\n      }, {\n        title: 'Dashboard - StreamGank Video Generator'\n      });\n      core_Router.addRoute('/dashboard', function () {\n        return _this.renderPage('dashboard');\n      }, {\n        title: 'Dashboard - StreamGank Video Generator'\n      });\n      core_Router.addRoute('/job/:jobId', function (params) {\n        return _this.renderPage('jobDetail', params);\n      }, {\n        title: 'Job Details - StreamGank Video Generator'\n      });\n      core_Router.addRoute('/jobs', function () {\n        return _this.renderJobsPage();\n      }, {\n        title: 'All Jobs - StreamGank Video Generator'\n      });\n\n      // Setup router event handlers\n      core_Router.addEventListener('routeChange', function (event) {\n        console.log(\"\\uD83D\\uDEE4\\uFE0F Route changed: \".concat(event.detail.path));\n      });\n      core_Router.addEventListener('notFound', function (event) {\n        console.warn(\"\\uD83D\\uDEE4\\uFE0F Route not found: \".concat(event.detail.path));\n        // Redirect to dashboard for unknown routes\n        core_Router.navigate('/dashboard', {\n          replace: true\n        });\n      });\n      console.log('✅ Routing system ready');\n    }\n\n    /**\r\n     * Phase 4: Initialize services\r\n     */\n  }, {\n    key: \"initializeServices\",\n    value: (function () {\n      var _initializeServices = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee3() {\n        return main_regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              console.log('⚙️ Initializing services...');\n\n              // API Service is ready by default (no async init needed)\n              console.log('📡 API Service ready');\n\n              // Initialize Job Manager\n              services_JobManager.init();\n              console.log('💼 Job Manager ready');\n              console.log('✅ Services ready');\n            case 1:\n              return _context3.a(2);\n          }\n        }, _callee3);\n      }));\n      function initializeServices() {\n        return _initializeServices.apply(this, arguments);\n      }\n      return initializeServices;\n    }()\n    /**\r\n     * Phase 5: Initialize components\r\n     */\n    )\n  }, {\n    key: \"initializeComponents\",\n    value: (function () {\n      var _initializeComponents = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee4() {\n        return main_regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              console.log('🎨 Initializing components...');\n\n              // Initialize Navigation Component\n              components_Navigation.init();\n              console.log('🧭 Navigation ready');\n\n              // Initialize page components\n              Dashboard.init();\n              console.log('📊 Dashboard Page ready');\n\n              // JobDetail page initialized when needed\n\n              console.log('✅ Components ready');\n            case 1:\n              return _context4.a(2);\n          }\n        }, _callee4);\n      }));\n      function initializeComponents() {\n        return _initializeComponents.apply(this, arguments);\n      }\n      return initializeComponents;\n    }()\n    /**\r\n     * Phase 4: Setup cross-module event handlers\r\n     */\n    )\n  }, {\n    key: \"setupEventHandlers\",\n    value: function setupEventHandlers() {\n      var _this2 = this;\n      console.log('🔗 Setting up cross-module event handlers...');\n\n      // Form submission -> Job creation (only for dashboard page)\n      document.addEventListener('formSubmit', function (event) {\n        _this2.handleFormSubmission(event.detail);\n      });\n\n      // Job events -> UI updates\n      services_JobManager.addEventListener('jobStarted', function (event) {\n        console.log('💼 Job started:', event.detail.job.id);\n      });\n      services_JobManager.addEventListener('jobCompleted', function (event) {\n        console.log('✅ Job completed:', event.detail.job.id);\n      });\n      services_JobManager.addEventListener('jobFailed', function (event) {\n        console.error('❌ Job failed:', event.detail.job.id, event.detail.error);\n      });\n\n      // Realtime connection events\n      services_RealtimeService.addEventListener('connected', function (event) {\n        console.log('📡 Real-time connection established:', event.detail.type);\n\n        // Update navigation status\n        components_Navigation.updateStatus({\n          connected: true,\n          connectionType: event.detail.type\n        });\n      });\n      services_RealtimeService.addEventListener('disconnected', function (event) {\n        console.warn('📡 Real-time connection lost:', event.detail.type);\n\n        // Update navigation status\n        components_Navigation.updateStatus({\n          connected: false,\n          connectionType: event.detail.type\n        });\n      });\n      services_RealtimeService.addEventListener('queueUpdate', function (event) {\n        // Update navigation with queue info\n        components_Navigation.updateStatus({\n          connected: true,\n          queue: event.detail.stats\n        });\n      });\n\n      // Navigation refresh requests\n      window.addEventListener('nav-refresh-requested', function () {\n        services_RealtimeService.refreshStatus();\n      });\n\n      // Setup navigation event handlers\n      components_Navigation.setupEventHandlers();\n      console.log('✅ Event handlers configured');\n    }\n\n    /**\r\n     * Setup button event handlers\r\n     */\n  }, {\n    key: \"setupButtonHandlers\",\n    value: function setupButtonHandlers() {\n      var _this3 = this;\n      // Refresh queue status button\n      var refreshQueueBtn = core_DOMManager.get('refreshQueueBtn');\n      if (refreshQueueBtn) {\n        refreshQueueBtn.addEventListener('click', function () {\n          services_RealtimeService.refreshStatus();\n        });\n      }\n\n      // Clear queue button\n      var clearQueueBtn = core_DOMManager.get('clearQueueBtn');\n      if (clearQueueBtn) {\n        clearQueueBtn.addEventListener('click', /*#__PURE__*/main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee5() {\n          var result, _t2;\n          return main_regenerator().w(function (_context5) {\n            while (1) switch (_context5.p = _context5.n) {\n              case 0:\n                if (!confirm('Are you sure you want to clear the entire queue? This will cancel all pending jobs.')) {\n                  _context5.n = 4;\n                  break;\n                }\n                _context5.p = 1;\n                components_UIManager.addStatusMessage('info', '🧹', 'Clearing queue...');\n                _context5.n = 2;\n                return services_APIService.clearQueue();\n              case 2:\n                result = _context5.v;\n                if (result.success) {\n                  components_UIManager.addStatusMessage('success', '✅', 'Queue cleared successfully');\n                } else {\n                  components_UIManager.addStatusMessage('error', '❌', 'Failed to clear queue');\n                }\n                _context5.n = 4;\n                break;\n              case 3:\n                _context5.p = 3;\n                _t2 = _context5.v;\n                components_UIManager.addStatusMessage('error', '❌', \"Error clearing queue: \".concat(_t2.message));\n              case 4:\n                return _context5.a(2);\n            }\n          }, _callee5, null, [[1, 3]]);\n        })));\n      }\n\n      // Check status button (for manual Creatomate status check)\n      var checkStatusBtn = core_DOMManager.get('checkStatusBtn');\n      if (checkStatusBtn) {\n        checkStatusBtn.addEventListener('click', function () {\n          _this3.handleManualStatusCheck();\n        });\n      }\n\n      // Load video button (for manual video loading)\n      var loadVideoBtn = core_DOMManager.get('loadVideoBtn');\n      if (loadVideoBtn) {\n        loadVideoBtn.addEventListener('click', function () {\n          _this3.handleManualVideoLoad();\n        });\n      }\n    }\n\n    /**\r\n     * Phase 7: Start routing and real-time services\r\n     */\n  }, {\n    key: \"startServices\",\n    value: function startServices() {\n      console.log('🚀 Starting services...');\n\n      // Initialize Router (must be after routes are defined)\n      core_Router.init();\n      console.log('🛤️ Router started');\n\n      // Initialize real-time connection (SSE with polling fallback)\n      services_RealtimeService.init();\n      console.log('📡 Real-time services started');\n      console.log('✅ All services started');\n    }\n\n    // === Page Rendering Methods ===\n\n    /**\r\n    * Render a page (activate page without replacing HTML)\r\n    * @param {string} pageName - Name of the page to render\r\n    * @param {Object} params - Route parameters\r\n    */\n  }, {\n    key: \"renderPage\",\n    value: function () {\n      var _renderPage = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee6(pageName) {\n        var params,\n          _args6 = arguments,\n          _t3;\n        return main_regenerator().w(function (_context6) {\n          while (1) switch (_context6.p = _context6.n) {\n            case 0:\n              params = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n              _context6.p = 1;\n              // Deactivate current page\n              if (this.currentPage && this.pages[this.currentPage]) {\n                if (typeof this.pages[this.currentPage].deactivate === 'function') {\n                  this.pages[this.currentPage].deactivate();\n                }\n              }\n\n              // For dashboard, just activate the existing functionality\n              if (!(pageName === 'dashboard')) {\n                _context6.n = 3;\n                break;\n              }\n              // Initialize UI and Form managers with existing DOM\n              components_UIManager.init();\n              _context6.n = 2;\n              return components_FormManager.init();\n            case 2:\n              // Activate dashboard functionality\n              if (this.pages[pageName] && typeof this.pages[pageName].activate === 'function') {\n                this.pages[pageName].activate(params);\n              }\n              this.currentPage = pageName;\n              console.log(\"\\uD83C\\uDFA8 Dashboard activated with existing UI\");\n              _context6.n = 6;\n              break;\n            case 3:\n              if (!(pageName === 'jobDetail')) {\n                _context6.n = 5;\n                break;\n              }\n              _context6.n = 4;\n              return this.renderJobDetailPage(params);\n            case 4:\n              this.currentPage = pageName;\n              _context6.n = 6;\n              break;\n            case 5:\n              throw new Error(\"Page '\".concat(pageName, \"' not found\"));\n            case 6:\n              _context6.n = 8;\n              break;\n            case 7:\n              _context6.p = 7;\n              _t3 = _context6.v;\n              console.error(\"\\uD83C\\uDFA8 Failed to render page '\".concat(pageName, \"':\"), _t3);\n              alert(\"Error: \".concat(_t3.message));\n            case 8:\n              return _context6.a(2);\n          }\n        }, _callee6, this, [[1, 7]]);\n      }));\n      function renderPage(_x) {\n        return _renderPage.apply(this, arguments);\n      }\n      return renderPage;\n    }()\n    /**\r\n     * Render job detail in a modal or overlay\r\n     * @param {Object} params - Route parameters\r\n     */\n  }, {\n    key: \"renderJobDetailPage\",\n    value: (function () {\n      var _renderJobDetailPage = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee7(params) {\n        var jobId, modalHtml, modal, bootstrapModal, contentDiv, _t4;\n        return main_regenerator().w(function (_context7) {\n          while (1) switch (_context7.p = _context7.n) {\n            case 0:\n              jobId = params.jobId; // Create modal overlay for job details\n              modalHtml = \"\\n            <div class=\\\"modal fade\\\" id=\\\"jobDetailModal\\\" tabindex=\\\"-1\\\" aria-labelledby=\\\"jobDetailModalLabel\\\" aria-hidden=\\\"true\\\">\\n                <div class=\\\"modal-dialog modal-xl\\\">\\n                    <div class=\\\"modal-content\\\">\\n                        <div class=\\\"modal-header\\\">\\n                            <h5 class=\\\"modal-title\\\" id=\\\"jobDetailModalLabel\\\">Job \".concat(jobId, \"</h5>\\n                            <button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"></button>\\n                        </div>\\n                        <div class=\\\"modal-body\\\" id=\\\"jobDetailContent\\\">\\n                            <div class=\\\"text-center py-4\\\">\\n                                <div class=\\\"spinner-border\\\" role=\\\"status\\\">\\n                                    <span class=\\\"visually-hidden\\\">Loading...</span>\\n                                </div>\\n                                <p class=\\\"mt-3\\\">Loading job details...</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        \"); // Add modal to DOM if it doesn't exist\n              modal = document.getElementById('jobDetailModal');\n              if (!modal) {\n                document.body.insertAdjacentHTML('beforeend', modalHtml);\n                modal = document.getElementById('jobDetailModal');\n              }\n\n              // Show modal\n              bootstrapModal = new bootstrap.Modal(modal);\n              bootstrapModal.show();\n\n              // Load job detail content\n              _context7.p = 1;\n              contentDiv = document.getElementById('jobDetailContent');\n              if (!(this.pages.jobDetail && typeof this.pages.jobDetail.render === 'function')) {\n                _context7.n = 2;\n                break;\n              }\n              _context7.n = 2;\n              return this.pages.jobDetail.render(contentDiv, params);\n            case 2:\n              _context7.n = 4;\n              break;\n            case 3:\n              _context7.p = 3;\n              _t4 = _context7.v;\n              console.error('Failed to load job details:', _t4);\n              document.getElementById('jobDetailContent').innerHTML = \"\\n                <div class=\\\"alert alert-danger\\\">\\n                    <h6>Error</h6>\\n                    <p>Failed to load job details: \".concat(_t4.message, \"</p>\\n                </div>\\n            \");\n            case 4:\n              // Handle modal close - go back to dashboard\n              modal.addEventListener('hidden.bs.modal', function () {\n                core_Router.navigate('/dashboard');\n              });\n            case 5:\n              return _context7.a(2);\n          }\n        }, _callee7, this, [[1, 3]]);\n      }));\n      function renderJobDetailPage(_x2) {\n        return _renderJobDetailPage.apply(this, arguments);\n      }\n      return renderJobDetailPage;\n    }()\n    /**\r\n     * Render jobs list page (simple implementation)\r\n     */\n    )\n  }, {\n    key: \"renderJobsPage\",\n    value: function renderJobsPage() {\n      var appContent = document.getElementById('app-content');\n      if (!appContent) return;\n      appContent.innerHTML = \"\\n            <div class=\\\"jobs-page\\\">\\n                <div class=\\\"container-fluid\\\">\\n                    <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n                        <h1 class=\\\"h3\\\">All Jobs</h1>\\n                        <div class=\\\"nav-links\\\">\\n                            <a href=\\\"/dashboard\\\" class=\\\"btn btn-outline-primary me-2\\\">Dashboard</a>\\n                        </div>\\n                    </div>\\n                    \\n                    <div class=\\\"alert alert-info\\\">\\n                        <h4 class=\\\"alert-heading\\\">\\uD83D\\uDEA7 Under Construction</h4>\\n                        <p class=\\\"mb-0\\\">\\n                            The jobs page is coming soon! For now, you can view individual jobs by visiting \\n                            <code>/job/[job-id]</code> or return to the \\n                            <a href=\\\"/dashboard\\\" class=\\\"alert-link\\\">Dashboard</a>.\\n                        </p>\\n                    </div>\\n                </div>\\n            </div>\\n        \";\n      console.log('🎨 Jobs page rendered (placeholder)');\n    }\n\n    /**\r\n     * Render error page\r\n     * @param {HTMLElement} container - Container to render into\r\n     * @param {string} message - Error message\r\n     */\n  }, {\n    key: \"renderErrorPage\",\n    value: function renderErrorPage(container, message) {\n      container.innerHTML = \"\\n            <div class=\\\"error-page\\\">\\n                <div class=\\\"container-fluid\\\">\\n                    <div class=\\\"text-center py-5\\\">\\n                        <h1 class=\\\"h2 text-danger\\\">\\u26A0\\uFE0F Error</h1>\\n                        <p class=\\\"lead\\\">\".concat(message, \"</p>\\n                        <div class=\\\"mt-4\\\">\\n                            <a href=\\\"/dashboard\\\" class=\\\"btn btn-primary\\\">Return to Dashboard</a>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    // === Event Handler Methods ===\n\n    /**\r\n     * Handle form submission and start video generation\r\n     * @param {Object} data - Form submission data\r\n     */\n  }, {\n    key: \"handleFormSubmission\",\n    value: function () {\n      var _handleFormSubmission = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee8(data) {\n        var formData, previewUrl, validation, generationParams, _t5;\n        return main_regenerator().w(function (_context8) {\n          while (1) switch (_context8.p = _context8.n) {\n            case 0:\n              formData = data.formData, previewUrl = data.previewUrl, validation = data.validation;\n              console.log('📋 Form submitted:', formData);\n              components_UIManager.addStatusMessage('info', '📝', 'Processing form submission...');\n              _context8.p = 1;\n              // Prepare generation parameters\n              generationParams = {\n                country: formData.country,\n                platform: formData.platform,\n                genre: formData.genre,\n                template: formData.template,\n                contentType: formData.contentType,\n                url: previewUrl\n              }; // Start video generation via Job Manager\n              _context8.n = 2;\n              return services_JobManager.startVideoGeneration(generationParams);\n            case 2:\n              _context8.n = 4;\n              break;\n            case 3:\n              _context8.p = 3;\n              _t5 = _context8.v;\n              console.error('❌ Form submission failed:', _t5);\n              components_UIManager.addStatusMessage('error', '❌', \"Generation failed: \".concat(_t5.message));\n            case 4:\n              return _context8.a(2);\n          }\n        }, _callee8, null, [[1, 3]]);\n      }));\n      function handleFormSubmission(_x3) {\n        return _handleFormSubmission.apply(this, arguments);\n      }\n      return handleFormSubmission;\n    }()\n    /**\r\n     * Handle manual status check (for Creatomate renders)\r\n     */\n  }, {\n    key: \"handleManualStatusCheck\",\n    value: (function () {\n      var _handleManualStatusCheck = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee9() {\n        var creatomateIdDisplay, creatomateId, statusData, status, _t6;\n        return main_regenerator().w(function (_context9) {\n          while (1) switch (_context9.p = _context9.n) {\n            case 0:\n              creatomateIdDisplay = core_DOMManager.get('creatomateIdDisplay');\n              if (!(!creatomateIdDisplay || !creatomateIdDisplay.textContent)) {\n                _context9.n = 1;\n                break;\n              }\n              components_UIManager.addStatusMessage('warning', '⚠️', 'No Creatomate ID available for status check');\n              return _context9.a(2);\n            case 1:\n              creatomateId = creatomateIdDisplay.textContent.trim();\n              _context9.p = 2;\n              components_UIManager.addStatusMessage('info', '🔍', 'Checking render status...');\n              _context9.n = 3;\n              return services_APIService.getCreatomateStatus(creatomateId);\n            case 3:\n              statusData = _context9.v;\n              if (statusData.success && statusData.videoUrl) {\n                components_UIManager.addStatusMessage('success', '🎬', 'Video is ready!');\n                components_UIManager.displayVideo({\n                  jobId: \"manual-\".concat(Date.now()),\n                  videoUrl: statusData.videoUrl,\n                  creatomateId: creatomateId\n                });\n              } else if (statusData.success && statusData.status) {\n                status = statusData.status.charAt(0).toUpperCase() + statusData.status.slice(1);\n                components_UIManager.addStatusMessage('info', '⏳', \"Render status: \".concat(status));\n              } else {\n                components_UIManager.addStatusMessage('error', '❌', \"Status check failed: \".concat(statusData.message || 'Unknown error'));\n              }\n              _context9.n = 5;\n              break;\n            case 4:\n              _context9.p = 4;\n              _t6 = _context9.v;\n              console.error('❌ Manual status check failed:', _t6);\n              components_UIManager.addStatusMessage('error', '❌', \"Status check error: \".concat(_t6.message));\n            case 5:\n              return _context9.a(2);\n          }\n        }, _callee9, null, [[2, 4]]);\n      }));\n      function handleManualStatusCheck() {\n        return _handleManualStatusCheck.apply(this, arguments);\n      }\n      return handleManualStatusCheck;\n    }()\n    /**\r\n     * Handle manual video loading\r\n     */\n    )\n  }, {\n    key: \"handleManualVideoLoad\",\n    value: function handleManualVideoLoad() {\n      var creatomateIdInput = prompt('Enter Creatomate render ID:');\n      if (!creatomateIdInput || !creatomateIdInput.trim()) {\n        components_UIManager.addStatusMessage('warning', '⚠️', 'No render ID provided');\n        return;\n      }\n      var creatomateId = creatomateIdInput.trim();\n\n      // Update display and trigger status check\n      var creatomateIdDisplay = core_DOMManager.get('creatomateIdDisplay');\n      if (creatomateIdDisplay) {\n        creatomateIdDisplay.textContent = creatomateId;\n      }\n      components_UIManager.addStatusMessage('info', '📥', \"Loading video for render ID: \".concat(creatomateId));\n      this.handleManualStatusCheck();\n    }\n\n    // === Error Handling ===\n\n    /**\r\n     * Handle app initialization errors\r\n     * @param {Error} error - Initialization error\r\n     */\n  }, {\n    key: \"handleInitializationError\",\n    value: function handleInitializationError(error) {\n      var errorMsg = \"Failed to initialize application: \".concat(error.message);\n\n      // Try to show error in UI if possible\n      try {\n        components_UIManager.addStatusMessage('error', '❌', errorMsg, false);\n      } catch (_unused) {\n        // Fallback to console and alert if UI isn't available\n        console.error('❌', errorMsg);\n        alert(errorMsg);\n      }\n    }\n\n    // === Utility Methods ===\n\n    /**\r\n     * Get application status\r\n     * @returns {Object} Application status\r\n     */\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      return {\n        initialized: this.isInitialized,\n        modules: Object.fromEntries(Object.entries(this.modules).map(function (_ref2) {\n          var _ref3 = main_slicedToArray(_ref2, 2),\n            key = _ref3[0],\n            module = _ref3[1];\n          return [key, typeof module.getStatus === 'function' ? module.getStatus() : 'ready'];\n        })),\n        realtime: services_RealtimeService.getConnectionStatus(),\n        jobs: services_JobManager.getJobStats(),\n        api: services_APIService.getCacheStats()\n      };\n    }\n\n    /**\r\n     * Restart the application\r\n     */\n  }, {\n    key: \"restart\",\n    value: (function () {\n      var _restart = main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee1() {\n        var _this4 = this;\n        return main_regenerator().w(function (_context1) {\n          while (1) switch (_context1.n) {\n            case 0:\n              console.log('🔄 Restarting application...');\n\n              // Cleanup existing resources\n              this.cleanup();\n\n              // Reset initialization flag\n              this.isInitialized = false;\n\n              // Wait a moment then reinitialize\n              setTimeout(/*#__PURE__*/main_asyncToGenerator(/*#__PURE__*/main_regenerator().m(function _callee0() {\n                return main_regenerator().w(function (_context0) {\n                  while (1) switch (_context0.n) {\n                    case 0:\n                      _context0.n = 1;\n                      return _this4.init();\n                    case 1:\n                      return _context0.a(2);\n                  }\n                }, _callee0);\n              })), 1000);\n            case 1:\n              return _context1.a(2);\n          }\n        }, _callee1, this);\n      }));\n      function restart() {\n        return _restart.apply(this, arguments);\n      }\n      return restart;\n    }()\n    /**\r\n     * Cleanup application resources\r\n     */\n    )\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      console.log('🧹 Cleaning up application resources...');\n\n      // Cleanup modules that support it\n      Object.values(this.modules).forEach(function (module) {\n        if (typeof module.cleanup === 'function') {\n          module.cleanup();\n        }\n      });\n      console.log('✅ Application cleaned up');\n    }\n  }]);\n}(); // === Application Bootstrap ===\n// Create app instance\nvar app = new StreamGankApp();\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', function () {\n    app.init();\n  });\n} else {\n  // DOM is already ready\n  app.init();\n}\n\n// Export for global access and debugging\nwindow.StreamGankApp = app;\n\n// Export default for module systems\n/* harmony default export */ var main = ((/* unused pure expression or super */ null && (app)));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1796\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, [96], function() { return __webpack_exec__(1796); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);