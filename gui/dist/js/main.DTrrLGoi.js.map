{"version":3,"file":"main.DTrrLGoi.js","sources":["../../src/core/Router.js","../../src/services/JobManager.js","../../src/components/FormManager.js","../../src/components/ProcessTable.js","../../src/components/Navigation.js","../../src/pages/Dashboard.js","../../src/pages/JobDetail.js","../../src/main.js"],"sourcesContent":["/**\n * Router Service - Professional client-side routing\n * Handles URL-based navigation, route parameters, and browser history\n */\n\nexport class Router extends EventTarget {\n    constructor() {\n        super();\n        this.routes = new Map();\n        this.currentRoute = null;\n        this.currentParams = {};\n        this.isInitialized = false;\n        this.basePath = '';\n    }\n\n    /**\n     * Initialize the router and setup event listeners\n     */\n    init() {\n        if (this.isInitialized) return;\n\n        // Handle browser back/forward buttons\n        window.addEventListener('popstate', (event) => {\n            this.handleLocationChange();\n        });\n\n        // Handle initial page load\n        this.handleLocationChange();\n\n        this.isInitialized = true;\n    }\n\n    /**\n     * Register a route with its handler\n     * @param {string} path - Route pattern (e.g., '/job/:id')\n     * @param {Function} handler - Route handler function\n     * @param {Object} options - Route options\n     */\n    addRoute(path, handler, options = {}) {\n        const routePattern = this.pathToRegex(path);\n\n        this.routes.set(path, {\n            pattern: routePattern,\n            handler: handler,\n            params: this.extractParams(path),\n            title: options.title || 'StreamGank',\n            requiresAuth: options.requiresAuth || false,\n            metadata: options.metadata || {}\n        });\n\n        console.log(`🛤️ Route registered: ${path}`);\n    }\n\n    /**\n     * Navigate to a specific path\n     * @param {string} path - Target path\n     * @param {Object} options - Navigation options\n     */\n    navigate(path, options = {}) {\n        const { replace = false, state = null } = options;\n\n        if (replace) {\n            window.history.replaceState(state, '', path);\n        } else {\n            window.history.pushState(state, '', path);\n        }\n\n        this.handleLocationChange();\n    }\n\n    /**\n     * Go back in browser history\n     */\n    back() {\n        window.history.back();\n    }\n\n    /**\n     * Go forward in browser history\n     */\n    forward() {\n        window.history.forward();\n    }\n\n    /**\n     * Handle location changes (URL changes)\n     */\n    handleLocationChange() {\n        const path = window.location.pathname;\n        const matchedRoute = this.matchRoute(path);\n\n        if (matchedRoute) {\n            const { route, params, routeKey } = matchedRoute;\n\n            // Update current state\n            const previousRoute = this.currentRoute;\n            this.currentRoute = routeKey;\n            this.currentParams = params;\n\n            // Update document title\n            if (route.title) {\n                document.title = route.title;\n            }\n\n            // Emit route change event\n            this.dispatchEvent(\n                new CustomEvent('routeChange', {\n                    detail: {\n                        path,\n                        route: routeKey,\n                        params,\n                        previousRoute,\n                        metadata: route.metadata\n                    }\n                })\n            );\n\n            // Call route handler\n            try {\n                route.handler(params, path);\n                console.log(`🛤️ Navigated to: ${path} (${routeKey})`);\n            } catch (error) {\n                console.error('🛤️ Route handler error:', error);\n                this.dispatchEvent(new CustomEvent('routeError', { detail: { path, error } }));\n            }\n        } else {\n            // No route matched - handle 404\n            this.handle404(path);\n        }\n    }\n\n    /**\n     * Match current path against registered routes\n     * @param {string} path - Current path\n     * @returns {Object|null} Matched route info or null\n     */\n    matchRoute(path) {\n        for (const [routeKey, route] of this.routes.entries()) {\n            const match = path.match(route.pattern);\n\n            if (match) {\n                const params = {};\n\n                // Extract route parameters\n                route.params.forEach((paramName, index) => {\n                    params[paramName] = match[index + 1];\n                });\n\n                return {\n                    route,\n                    params,\n                    routeKey,\n                    match\n                };\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Convert path pattern to regex\n     * @param {string} path - Path pattern (e.g., '/job/:id')\n     * @returns {RegExp} Route regex\n     */\n    pathToRegex(path) {\n        // Escape special regex characters except for parameter patterns\n        const escaped = path.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&').replace(/\\\\:([^/]+)/g, '([^/]+)'); // Convert :param to capture group\n\n        return new RegExp(`^${escaped}$`);\n    }\n\n    /**\n     * Extract parameter names from path pattern\n     * @param {string} path - Path pattern\n     * @returns {Array<string>} Parameter names\n     */\n    extractParams(path) {\n        const params = [];\n        const matches = path.matchAll(/:([^/]+)/g);\n\n        for (const match of matches) {\n            params.push(match[1]);\n        }\n\n        return params;\n    }\n\n    /**\n     * Handle 404 - route not found\n     * @param {string} path - Unmatched path\n     */\n    handle404(path) {\n        console.warn(`🛤️ No route found for: ${path}`);\n\n        // Emit 404 event\n        this.dispatchEvent(new CustomEvent('notFound', { detail: { path } }));\n\n        // Try to redirect to dashboard or show 404 page\n        if (path !== '/' && path !== '/dashboard') {\n            this.navigate('/dashboard', { replace: true });\n        }\n    }\n\n    /**\n     * Generate URL for a route with parameters\n     * @param {string} routePath - Route pattern\n     * @param {Object} params - Route parameters\n     * @returns {string} Generated URL\n     */\n    generateUrl(routePath, params = {}) {\n        let url = routePath;\n\n        // Replace parameters in the path\n        for (const [key, value] of Object.entries(params)) {\n            url = url.replace(`:${key}`, encodeURIComponent(value));\n        }\n\n        return url;\n    }\n\n    /**\n     * Get current route information\n     * @returns {Object} Current route info\n     */\n    getCurrentRoute() {\n        return {\n            path: window.location.pathname,\n            route: this.currentRoute,\n            params: this.currentParams,\n            hash: window.location.hash,\n            search: window.location.search\n        };\n    }\n\n    /**\n     * Check if current route matches pattern\n     * @param {string} pattern - Route pattern to check\n     * @returns {boolean} Whether current route matches\n     */\n    isCurrentRoute(pattern) {\n        return this.currentRoute === pattern;\n    }\n\n    /**\n     * Add query parameters to current URL\n     * @param {Object} params - Query parameters to add\n     */\n    updateQuery(params) {\n        const url = new URL(window.location);\n\n        for (const [key, value] of Object.entries(params)) {\n            if (value === null || value === undefined) {\n                url.searchParams.delete(key);\n            } else {\n                url.searchParams.set(key, value);\n            }\n        }\n\n        this.navigate(url.pathname + url.search, { replace: true });\n    }\n\n    /**\n     * Get query parameters from current URL\n     * @returns {Object} Query parameters\n     */\n    getQuery() {\n        const params = {};\n        const searchParams = new URLSearchParams(window.location.search);\n\n        for (const [key, value] of searchParams.entries()) {\n            params[key] = value;\n        }\n\n        return params;\n    }\n\n    /**\n     * Cleanup router resources\n     */\n    cleanup() {\n        window.removeEventListener('popstate', this.handleLocationChange);\n        this.routes.clear();\n        this.isInitialized = false;\n        console.log('🛤️ Router cleaned up');\n    }\n\n    /**\n     * Emit custom events\n     * @param {string} eventName - Event name\n     * @param {Object} data - Event data\n     */\n    emit(eventName, data) {\n        const event = new CustomEvent(eventName, { detail: data });\n        this.dispatchEvent(event);\n    }\n}\n\n// Export singleton instance\nexport default new Router();\n","/**\n * Job Manager - Professional job lifecycle management\n * Handles video generation jobs, monitoring, progress tracking, and status updates\n */\nimport APIService from './APIService.js';\nimport UIManager from '../components/UIManager.js';\n\nexport class JobManager extends EventTarget {\n    constructor() {\n        super();\n        this.activeJobs = new Map();\n        this.jobHistory = new Map();\n        this.currentJob = null;\n        this.maxJobHistory = 100;\n        this.monitoringInterval = 5000; // 5 seconds\n        this.monitoringTimer = null;\n        this.isGenerationActive = false;\n        this.creatomateMessages = new Set(); // Track unique messages\n    }\n\n    /**\n     * Initialize Job Manager\n     */\n    init() {\n        this.setupEventListeners();\n    }\n\n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        // Listen for page unload to cleanup\n        window.addEventListener('beforeunload', () => {\n            this.cleanup();\n        });\n    }\n\n    /**\n     * Start video generation job with comprehensive monitoring\n     * @param {Object} params - Generation parameters\n     * @returns {Promise<Object>} Job creation result\n     */\n    async startVideoGeneration(params) {\n        try {\n            // Validate parameters\n            this.validateGenerationParams(params);\n\n            // Prevent concurrent generations\n            if (this.isGenerationActive) {\n                throw new Error('Another video generation is already in progress');\n            }\n\n            this.isGenerationActive = true;\n\n            // Update UI state\n            UIManager.showProgress();\n            UIManager.disableGenerateButton('Starting generation...');\n            UIManager.addStatusMessage('info', '🚀', 'Starting video generation...');\n\n            // Reset message tracking\n            this.creatomateMessages.clear();\n\n            // Create job via API\n            const result = await APIService.generateVideo(params);\n\n            if (!result.success) {\n                throw new Error(result.message || 'Failed to start video generation');\n            }\n\n            // Setup job tracking\n            const job = this.createJobObject(result, params);\n\n            // Store and monitor job\n            this.activeJobs.set(job.id, job);\n            this.currentJob = job;\n            this.startJobMonitoring(job.id);\n\n            // Update UI\n            UIManager.addStatusMessage(\n                'success',\n                '✅',\n                `Job queued successfully! ${job.queuePosition ? `Position: ${job.queuePosition}` : ''}`\n            );\n            UIManager.updateProgress(5, 'Job queued, waiting to start...');\n\n            // Emit job started event\n            this.dispatchEvent(new CustomEvent('jobStarted', { detail: { job } }));\n\n            console.log(`💼 Job started: ${job.id}`);\n            return { success: true, job };\n        } catch (error) {\n            console.error('❌ Failed to start video generation:', error);\n\n            // Reset UI state\n            this.resetGenerationState();\n            UIManager.addStatusMessage('error', '❌', `Failed to start generation: ${error.message}`);\n\n            this.dispatchEvent(new CustomEvent('jobError', { detail: { error } }));\n            throw error;\n        }\n    }\n\n    /**\n     * Create job object from API result\n     * @param {Object} result - API result\n     * @param {Object} params - Generation parameters\n     * @returns {Object} Job object\n     */\n    createJobObject(result, params) {\n        return {\n            id: result.jobId,\n            params: params,\n            status: 'pending',\n            progress: 0,\n            createdAt: new Date().toISOString(),\n            startedAt: null,\n            completedAt: null,\n            queuePosition: result.queuePosition || 0,\n            error: null,\n            result: null,\n            creatomateId: null,\n            videoUrl: null\n        };\n    }\n\n    /**\n     * Validate generation parameters\n     * @param {Object} params - Parameters to validate\n     * @throws {Error} If validation fails\n     */\n    validateGenerationParams(params) {\n        const required = ['country', 'platform', 'genre', 'contentType'];\n        const missing = required.filter((field) => !params[field]);\n\n        if (missing.length > 0) {\n            throw new Error(`Missing required parameters: ${missing.join(', ')}`);\n        }\n\n        console.log('✅ Parameters validated:', params);\n    }\n\n    /**\n     * Start monitoring a specific job\n     * @param {string} jobId - Job ID to monitor\n     */\n    async startJobMonitoring(jobId) {\n        if (this.monitoringTimer) {\n            clearInterval(this.monitoringTimer);\n        }\n\n        console.log(`👀 Started monitoring job: ${jobId}`);\n\n        this.monitoringTimer = setInterval(async () => {\n            try {\n                await this.updateJobStatus(jobId);\n            } catch (error) {\n                console.error('❌ Job monitoring error:', error);\n\n                // Stop monitoring on repeated failures\n                if (this.consecutiveErrors > 3) {\n                    this.stopJobMonitoring();\n                    UIManager.addStatusMessage('warning', '⚠️', 'Job monitoring stopped due to repeated errors');\n                }\n            }\n        }, this.monitoringInterval);\n    }\n\n    /**\n     * Stop job monitoring\n     */\n    stopJobMonitoring() {\n        if (this.monitoringTimer) {\n            clearInterval(this.monitoringTimer);\n            this.monitoringTimer = null;\n            console.log('⏹️ Job monitoring stopped');\n        }\n    }\n\n    /**\n     * Update job status from API\n     * @param {string} jobId - Job ID to update\n     */\n    async updateJobStatus(jobId) {\n        const job = this.activeJobs.get(jobId);\n        if (!job) return;\n\n        try {\n            const result = await APIService.getJobStatus(jobId);\n\n            if (result.success && result.job) {\n                this.processJobUpdate(result.job);\n            }\n        } catch (error) {\n            console.error(`❌ Failed to update job status for ${jobId}:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Process comprehensive job status update\n     * @param {Object} jobData - Updated job data from API\n     */\n    processJobUpdate(jobData) {\n        const job = this.activeJobs.get(jobData.id);\n        if (!job) return;\n\n        const previousStatus = job.status;\n        const previousProgress = job.progress;\n\n        // Update job data\n        Object.assign(job, {\n            status: jobData.status,\n            progress: jobData.progress || 0,\n            currentStep: jobData.currentStep,\n            startedAt: jobData.startedAt || job.startedAt,\n            completedAt: jobData.completedAt,\n            error: jobData.error,\n            result: jobData,\n            creatomateId: jobData.creatomateId,\n            videoUrl: jobData.videoUrl\n        });\n\n        // Handle status changes\n        if (previousStatus !== job.status) {\n            this.handleJobStatusChange(job, previousStatus);\n        }\n\n        // Handle progress changes\n        if (previousProgress !== job.progress) {\n            this.updateJobProgress(job);\n        }\n\n        // Handle creatomate monitoring for rendering jobs\n        if (job.creatomateId && !job.videoUrl && job.status === 'completed') {\n            this.startCreatomateMonitoring(job);\n        }\n\n        // Emit job updated event\n        this.dispatchEvent(new CustomEvent('jobUpdated', { detail: { job, previousStatus } }));\n\n        console.log(`💼 Job ${job.id} updated: ${job.status} (${job.progress}%)`);\n    }\n\n    /**\n     * Handle comprehensive job status changes\n     * @param {Object} job - Job object\n     * @param {string} previousStatus - Previous job status\n     */\n    handleJobStatusChange(job, previousStatus) {\n        switch (job.status) {\n            case 'processing':\n                if (previousStatus === 'pending') {\n                    UIManager.addStatusMessage('info', '⚡', 'Job started processing!');\n                    job.startedAt = new Date().toISOString();\n                }\n                break;\n\n            case 'completed':\n                this.handleJobCompletion(job);\n                break;\n\n            case 'failed':\n                this.handleJobFailure(job);\n                break;\n\n            case 'cancelled':\n                this.handleJobCancellation(job);\n                break;\n        }\n    }\n\n    /**\n     * Handle job completion with video URL or Creatomate ID\n     * @param {Object} job - Completed job\n     */\n    handleJobCompletion(job) {\n        console.log(`✅ Job completed: ${job.id}`);\n\n        if (job.videoUrl) {\n            // Direct video URL available\n            this.finishSuccessfulGeneration(job);\n        } else if (job.creatomateId) {\n            // Video is rendering, start Creatomate monitoring\n            UIManager.updateProgress(90, 'Python script completed, video rendering...');\n            UIManager.addStatusMessage(\n                'info',\n                '🎬',\n                `Video rendering started (ID: ${job.creatomateId}). Monitoring progress...`\n            );\n            this.startCreatomateMonitoring(job);\n        } else {\n            // Completed but missing video data\n            UIManager.addStatusMessage('warning', '⚠️', 'Job completed but video URL not yet available');\n            this.moveJobToHistory(job);\n        }\n\n        this.dispatchEvent(new CustomEvent('jobCompleted', { detail: { job } }));\n    }\n\n    /**\n     * Start monitoring Creatomate rendering status\n     * @param {Object} job - Job with Creatomate ID\n     */\n    startCreatomateMonitoring(job) {\n        let attempts = 0;\n        const maxAttempts = 40; // 20 minutes max (30s * 40)\n\n        const checkStatus = async () => {\n            attempts++;\n\n            try {\n                const statusData = await APIService.getCreatomateStatus(job.creatomateId);\n\n                if (statusData.success && statusData.videoUrl) {\n                    // Video is ready!\n                    job.videoUrl = statusData.videoUrl;\n                    job.result.videoUrl = statusData.videoUrl;\n                    this.finishSuccessfulGeneration(job);\n                } else if (statusData.success && statusData.status) {\n                    // Still rendering\n                    const status = statusData.status.toLowerCase();\n                    const statusText = status.charAt(0).toUpperCase() + status.slice(1);\n\n                    if (attempts % 4 === 0) {\n                        // Every 2 minutes\n                        const messageKey = `rendering-update-${Math.floor(attempts / 4)}`;\n                        if (!this.creatomateMessages.has(messageKey)) {\n                            UIManager.addStatusMessage(\n                                'info',\n                                '⏳',\n                                `Video status: ${statusText}... (${attempts}/${maxAttempts})`\n                            );\n                            this.creatomateMessages.add(messageKey);\n                        }\n                    }\n\n                    // Update progress\n                    let progressPercent = 90 + (attempts / maxAttempts) * 10;\n                    if (status.includes('render') || status.includes('process')) {\n                        progressPercent = Math.min(95, progressPercent);\n                    }\n                    UIManager.updateProgress(progressPercent, `Rendering: ${statusText}`);\n\n                    // Schedule next check\n                    if (attempts < maxAttempts) {\n                        setTimeout(() => checkStatus(), 30000);\n                    } else {\n                        this.handleCreatomateTimeout(job);\n                    }\n                } else {\n                    this.handleCreatomateError(job, statusData.message, attempts, maxAttempts, checkStatus);\n                }\n            } catch (error) {\n                this.handleCreatomateNetworkError(job, error, attempts, maxAttempts, checkStatus);\n            }\n        };\n\n        // Start monitoring\n        checkStatus();\n    }\n\n    /**\n     * Handle Creatomate monitoring timeout\n     * @param {Object} job - Job object\n     */\n    handleCreatomateTimeout(job) {\n        const timeoutKey = 'creatomate-timeout';\n        if (!this.creatomateMessages.has(timeoutKey)) {\n            UIManager.addStatusMessage(\n                'warning',\n                '⚠️',\n                'Video rendering is taking longer than expected. Use \"Check Status\" to monitor manually.'\n            );\n            this.creatomateMessages.add(timeoutKey);\n        }\n\n        // Keep the job active for manual status checking\n        UIManager.enableGenerateButton();\n        this.isGenerationActive = false;\n    }\n\n    /**\n     * Handle Creatomate API errors\n     * @param {Object} job - Job object\n     * @param {string} message - Error message\n     * @param {number} attempts - Current attempt number\n     * @param {number} maxAttempts - Maximum attempts\n     * @param {Function} checkStatus - Status check function\n     */\n    handleCreatomateError(job, message, attempts, maxAttempts, checkStatus) {\n        const errorKey = `creatomate-error-${message}`;\n        if (!this.creatomateMessages.has(errorKey)) {\n            UIManager.addStatusMessage('error', '❌', `Render status check failed: ${message || 'Unknown error'}`);\n            this.creatomateMessages.add(errorKey);\n        }\n\n        if (attempts < maxAttempts) {\n            setTimeout(() => checkStatus(), 30000);\n        } else {\n            UIManager.addStatusMessage('error', '❌', 'Unable to check render status after multiple attempts.');\n            this.moveJobToHistory(job);\n        }\n    }\n\n    /**\n     * Handle Creatomate network errors\n     * @param {Object} job - Job object\n     * @param {Error} error - Network error\n     * @param {number} attempts - Current attempt number\n     * @param {number} maxAttempts - Maximum attempts\n     * @param {Function} checkStatus - Status check function\n     */\n    handleCreatomateNetworkError(job, error, attempts, maxAttempts, checkStatus) {\n        console.error('Creatomate status check error:', error);\n\n        const networkErrorKey = `network-error-${attempts}`;\n        if (attempts % 3 === 0 && !this.creatomateMessages.has(networkErrorKey)) {\n            UIManager.addStatusMessage('warning', '⚠️', `Network error checking render status (attempt ${attempts})`);\n            this.creatomateMessages.add(networkErrorKey);\n        }\n\n        if (attempts < maxAttempts) {\n            setTimeout(() => checkStatus(), 30000);\n        } else {\n            UIManager.addStatusMessage('error', '❌', 'Network errors prevented render status monitoring.');\n            this.moveJobToHistory(job);\n        }\n    }\n\n    /**\n     * Finish successful video generation\n     * @param {Object} job - Completed job with video URL\n     */\n    finishSuccessfulGeneration(job) {\n        UIManager.updateProgress(100, 'Generation completed!');\n        UIManager.addStatusMessage('success', '🎉', 'Video generation completed successfully!');\n\n        // Display video in UI\n        UIManager.displayVideo({\n            jobId: job.id,\n            videoUrl: job.videoUrl,\n            creatomateId: job.creatomateId,\n            timestamp: new Date().toLocaleString()\n        });\n\n        // Cleanup and reset\n        this.moveJobToHistory(job);\n        this.resetGenerationState();\n    }\n\n    /**\n     * Handle job failure\n     * @param {Object} job - Failed job\n     */\n    handleJobFailure(job) {\n        console.error(`❌ Job failed: ${job.id}`, job.error);\n\n        UIManager.updateProgress(0, 'Generation failed');\n        UIManager.addStatusMessage('error', '❌', `Generation failed: ${job.error || 'Unknown error'}`, false);\n\n        this.moveJobToHistory(job);\n        this.dispatchEvent(new CustomEvent('jobFailed', { detail: { job } }));\n        this.resetGenerationState();\n    }\n\n    /**\n     * Handle job cancellation\n     * @param {Object} job - Cancelled job\n     */\n    handleJobCancellation(job) {\n        console.log(`⏹️ Job cancelled: ${job.id}`);\n\n        UIManager.addStatusMessage('warning', '⏹️', 'Job was cancelled');\n        this.moveJobToHistory(job);\n        this.dispatchEvent(new CustomEvent('jobCancelled', { detail: { job } }));\n        this.resetGenerationState();\n    }\n\n    /**\n     * Update job progress in UI\n     * @param {Object} job - Job object\n     */\n    updateJobProgress(job) {\n        if (job === this.currentJob) {\n            UIManager.updateProgress(job.progress, job.currentStep || 'Processing...');\n        }\n    }\n\n    /**\n     * Reset generation state after completion/failure\n     */\n    resetGenerationState() {\n        UIManager.hideProgress();\n        UIManager.enableGenerateButton();\n        this.isGenerationActive = false;\n        this.stopJobMonitoring();\n    }\n\n    /**\n     * Cancel active job\n     * @param {string} jobId - Job ID to cancel\n     * @returns {Promise<boolean>} Cancellation success\n     */\n    async cancelJob(jobId) {\n        try {\n            const result = await APIService.cancelJob(jobId);\n\n            if (result.success) {\n                UIManager.addStatusMessage('info', '⏹️', 'Job cancellation requested');\n                return true;\n            } else {\n                throw new Error(result.message || 'Failed to cancel job');\n            }\n        } catch (error) {\n            console.error('❌ Failed to cancel job:', error);\n            UIManager.addStatusMessage('error', '❌', `Failed to cancel job: ${error.message}`);\n            return false;\n        }\n    }\n\n    /**\n     * Stop video generation\n     */\n    stopVideoGeneration() {\n        if (this.currentJob) {\n            this.cancelJob(this.currentJob.id);\n        }\n\n        this.resetGenerationState();\n        UIManager.addStatusMessage('warning', '⏹️', 'Video generation stopped');\n    }\n\n    /**\n     * Move job from active to history\n     * @param {Object} job - Job to move\n     */\n    moveJobToHistory(job) {\n        this.activeJobs.delete(job.id);\n\n        this.jobHistory.set(job.id, {\n            ...job,\n            movedToHistoryAt: new Date().toISOString()\n        });\n\n        if (this.currentJob && this.currentJob.id === job.id) {\n            this.currentJob = null;\n        }\n\n        this.limitJobHistory();\n    }\n\n    /**\n     * Limit job history size\n     */\n    limitJobHistory() {\n        if (this.jobHistory.size > this.maxJobHistory) {\n            const entries = Array.from(this.jobHistory.entries());\n            const toRemove = entries.slice(0, entries.length - this.maxJobHistory);\n\n            toRemove.forEach(([jobId]) => {\n                this.jobHistory.delete(jobId);\n            });\n\n            console.log(`🧹 Cleaned up ${toRemove.length} old job records`);\n        }\n    }\n\n    /**\n     * Get job by ID\n     * @param {string} jobId - Job ID\n     * @returns {Object|null} Job object or null\n     */\n    getJob(jobId) {\n        return this.activeJobs.get(jobId) || this.jobHistory.get(jobId) || null;\n    }\n\n    /**\n     * Get all active jobs\n     * @returns {Array} Array of active jobs\n     */\n    getActiveJobs() {\n        return Array.from(this.activeJobs.values());\n    }\n\n    /**\n     * Get job statistics\n     * @returns {Object} Job statistics\n     */\n    getJobStats() {\n        return {\n            active: this.activeJobs.size,\n            history: this.jobHistory.size,\n            total: this.activeJobs.size + this.jobHistory.size,\n            currentJob: this.currentJob?.id || null,\n            isMonitoring: !!this.monitoringTimer,\n            isGenerationActive: this.isGenerationActive\n        };\n    }\n\n    /**\n     * Cleanup resources\n     */\n    cleanup() {\n        this.stopJobMonitoring();\n        console.log('🧹 Job Manager cleaned up');\n    }\n}\n\n// Export singleton instance\nexport default new JobManager();\n","/**\n * Form Manager - Professional form handling and validation\n * Manages form interactions, validations, dynamic updates, and preview generation\n */\nimport DOMManager from '../core/DOMManager.js';\nimport APIService from '../services/APIService.js';\nimport UIManager from './UIManager.js';\n\nexport class FormManager {\n    constructor() {\n        this.genresByCountry = {};\n        this.templatesByGenre = {};\n        this.platformsByCountry = {};\n        this.formState = {\n            country: '',\n            platform: '',\n            platforms: [],\n            genre: '',\n            genres: [],\n            template: '',\n            contentType: ''\n        };\n        this.isValidating = false;\n        this.validationCache = new Map();\n        this.isInitialized = false; // Prevent duplicate initialization\n    }\n\n    /**\n     * Initialize Form Manager with data and event listeners\n     */\n    async init() {\n        // Prevent duplicate initialization\n        if (this.isInitialized) {\n            console.log('📋 FormManager already initialized, skipping...');\n            return;\n        }\n\n        await this.loadFormConfiguration();\n        this.setupEventListeners();\n        this.initializeFormState();\n\n        this.isInitialized = true;\n        console.log('✅ FormManager initialized successfully');\n    }\n\n    /**\n     * Load form configuration data (genres, templates, etc.)\n     */\n    async loadFormConfiguration() {\n        // Load static genre data for countries\n        this.loadGenresByCountry();\n        this.loadTemplatesByGenre();\n\n        // Initialize platform data from API if needed - MUST AWAIT\n        await this.initializePlatformData();\n    }\n\n    /**\n     * Load genres by country configuration\n     */\n    loadGenresByCountry() {\n        this.genresByCountry = {\n            FR: {\n                'Action & Aventure': 'Action & Adventure',\n                Animation: 'Animation',\n                Comédie: 'Comedy',\n                'Comédie Romantique': 'Romantic Comedy',\n                'Crime & Thriller': 'Crime & Thriller',\n                Documentaire: 'Documentary',\n                Drame: 'Drama',\n                Fantastique: 'Fantasy',\n                'Film de guerre': 'War Movies',\n                Histoire: 'History',\n                Horreur: 'Horror',\n                'Musique & Comédie Musicale': 'Music & Musical Comedy',\n                'Mystère & Thriller': 'Mystery & Thriller',\n                'Pour enfants': 'Kids',\n                'Reality TV': 'Reality TV',\n                'Réalisé en Europe': 'Made in Europe',\n                'Science-Fiction': 'Science Fiction',\n                'Sport & Fitness': 'Sport & Fitness',\n                Western: 'Western'\n            },\n            US: {\n                'Action & Adventure': 'Action & Adventure',\n                Animation: 'Animation',\n                Comedy: 'Comedy',\n                Crime: 'Crime',\n                Documentary: 'Documentary',\n                Drama: 'Drama',\n                Fantasy: 'Fantasy',\n                History: 'History',\n                Horror: 'Horror',\n                'Kids & Family': 'Kids & Family',\n                'Made in Europe': 'Made in Europe',\n                'Music & Musical': 'Music & Musical',\n                'Mystery & Thriller': 'Mystery & Thriller',\n                'Reality TV': 'Reality TV',\n                'Romance Movies': 'Romance Movies',\n                'Science Fiction': 'Science Fiction',\n                'Sport & Fitness': 'Sport & Fitness',\n                'Stand-up Comedy': 'Stand-up Comedy',\n                Western: 'Western'\n            }\n        };\n    }\n\n    /**\n     * Load template mappings for genres\n     */\n    loadTemplatesByGenre() {\n        // Genre-specific HeyGen templates (from memory)\n        this.templatesByGenre = {\n            // Horror templates (FIXED: Use correct template ID from config/templates.py)\n            Horror: 'ed21a309a5c84b0d873fde68642adea3',\n            Horreur: 'ed21a309a5c84b0d873fde68642adea3',\n\n            // Comedy templates\n            Comedy: '0786b31e7a8b4e8c97799b913b1e39ea',\n            Comédie: '0786b31e7a8b4e8c97799b913b1e39ea',\n            'Stand-up Comedy': '0786b31e7a8b4e8c97799b913b1e39ea',\n\n            // Action templates\n            'Action & Adventure': '7f8db20ddcd94a33a1235599aa8bf473',\n            'Action & Aventure': '7f8db20ddcd94a33a1235599aa8bf473',\n\n            // Default template for other genres\n            default: 'cc6718c5363e42b282a123f99b94b335'\n        };\n    }\n\n    /**\n     * Initialize platform data\n     */\n    async initializePlatformData() {\n        // Load platforms for current country and populate dropdown\n        const countrySelect = document.getElementById('country');\n        if (countrySelect) {\n            const currentCountry = countrySelect.value || 'US'; // Changed default to US\n            await this.updatePlatformDropdown(currentCountry);\n        }\n\n        // Load genres for current country\n        const currentCountry = countrySelect ? countrySelect.value : 'US'; // Changed default to US\n        await this.updateGenreDropdown(currentCountry);\n\n        // Load templates\n        this.updateTemplateDropdown();\n\n        // Set defaults once after all dropdowns are populated\n        this.setDefaultSelections();\n\n        // Refresh form state once - all dropdowns are now populated\n        this.refreshFormState();\n\n        // Initialize Generate button as disabled until movies are loaded\n        this.disableGenerateButton();\n\n        console.log('✅ Platform data initialization complete');\n    }\n\n    /**\n     * Update platform dropdown for country\n     * @param {string} country - Country code\n     */\n    async updatePlatformDropdown(country) {\n        // Prevent duplicate API calls\n        const cacheKey = `platforms_${country}`;\n        if (this.validationCache.has(cacheKey)) {\n            return;\n        }\n\n        try {\n            const response = await APIService.get(`/api/platforms/${country}`);\n\n            if (response.success && response.platforms) {\n                this.populatePlatformSelect(response.platforms);\n\n                // Only cache after successful population\n                this.validationCache.set(cacheKey, true);\n                console.log('✅ Platform dropdown update completed');\n            } else {\n                console.error('❌ Invalid platform API response:', response);\n            }\n        } catch (error) {\n            console.error('❌ Failed to load platforms:', error);\n        }\n    }\n\n    /**\n     * Update genre dropdown for country\n     * @param {string} country - Country code\n     */\n    async updateGenreDropdown(country) {\n        // Prevent duplicate API calls\n        const cacheKey = `genres_${country}`;\n        if (this.validationCache.has(cacheKey)) {\n            console.log(`📋 Using cached genres for ${country}`);\n            return;\n        }\n\n        try {\n            console.log(`📋 Loading genres for ${country}...`);\n            const response = await APIService.get(`/api/genres/${country}`);\n\n            if (response.success && response.genres) {\n                console.log(`📋 API returned ${response.genres.length} genres:`, response.genres);\n                this.populateGenreSelect(response.genres);\n\n                // Only cache after successful population\n                this.validationCache.set(cacheKey, true);\n                console.log('✅ Genre dropdown update completed');\n            } else {\n                console.error('❌ Invalid genre API response:', response);\n            }\n        } catch (error) {\n            console.error('❌ Failed to load genres:', error);\n        }\n    }\n\n    /**\n     * Update template dropdown\n     */\n    updateTemplateDropdown() {\n        const templateSelect = document.getElementById('template');\n        if (!templateSelect) return;\n\n        // Clear existing options except first\n        templateSelect.innerHTML = '<option value=\"\">Select Template...</option>';\n\n        // Add default templates (FIXED: Use correct Horror template ID)\n        const templates = [\n            { value: 'cc6718c5363e42b282a123f99b94b335', text: 'Default Template' },\n            { value: 'ed21a309a5c84b0d873fde68642adea3', text: 'Horror/Thriller Cinematic' },\n            { value: '15d9eadcb46a45dbbca1834aa0a23ede', text: 'Comedy Upbeat' },\n            { value: 'e44b139a1b94446a997a7f2ac5ac4178', text: 'Action Adventure' }\n        ];\n\n        templates.forEach((template) => {\n            const option = document.createElement('option');\n            option.value = template.value;\n            option.textContent = template.text;\n            templateSelect.appendChild(option);\n        });\n\n        // Set default selection to Default Template\n        templateSelect.value = 'cc6718c5363e42b282a123f99b94b335';\n    }\n\n    /**\n     * Setup comprehensive form event listeners\n     */\n    setupEventListeners() {\n        // Prevent duplicate event listeners\n        if (this.eventListenersSetup) {\n            return;\n        }\n\n        // Country selection - using correct HTML IDs\n        const countrySelect = document.getElementById('country');\n        if (countrySelect) {\n            countrySelect.addEventListener('change', (e) => {\n                this.handleCountryChange(e.target.value);\n            });\n        }\n\n        // Platform selection\n        const platformSelect = document.getElementById('platform');\n        if (platformSelect) {\n            platformSelect.addEventListener('change', (e) => {\n                this.handlePlatformChange(e.target.value);\n            });\n        }\n\n        // Genre selection (checkboxes handled in populateGenreSelect)\n        // Event listeners are added dynamically when checkboxes are created\n\n        // Template selection\n        const templateSelect = document.getElementById('template');\n        if (templateSelect) {\n            templateSelect.addEventListener('change', (e) => {\n                this.handleTemplateChange(e.target.value);\n            });\n        }\n\n        // Movie preview refresh button\n        const refreshPreviewBtn = document.getElementById('refresh-preview-btn');\n        if (refreshPreviewBtn) {\n            refreshPreviewBtn.addEventListener('click', () => {\n                this.loadMoviePreview();\n            });\n        }\n\n        // Content type radio buttons\n        const contentTypeRadios = document.querySelectorAll('input[name=\"contentType\"]');\n        if (contentTypeRadios) {\n            Array.from(contentTypeRadios).forEach((radio) => {\n                radio.addEventListener('change', (e) => {\n                    if (e.target.checked) {\n                        this.handleContentTypeChange(e.target.value);\n                    }\n                });\n            });\n        }\n\n        // Form validation on submit\n        const generateButton = document.getElementById('generate-video');\n        if (generateButton) {\n            generateButton.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.handleFormSubmit();\n            });\n        }\n\n        // Mark event listeners as setup\n        this.eventListenersSetup = true;\n    }\n\n    /**\n     * Initialize form state from current form values\n     */\n    initializeFormState() {\n        // Ensure US is selected by default\n        const countrySelect = document.getElementById('country');\n        if (countrySelect && !countrySelect.value) {\n            countrySelect.value = 'US';\n        }\n\n        // FORCE contentType initialization - check the Serie radio button if none is checked\n        this.ensureContentTypeSelected();\n\n        console.log('📋 Form state initialization complete');\n\n        // Note: refreshFormState() will be called next to read all DOM values\n        // Note: Platform and genre dropdowns are already populated by initializePlatformData()\n    }\n\n    /**\n     * Ensure a contentType radio button is selected (default to Serie/TV Shows)\n     */\n    ensureContentTypeSelected() {\n        const contentTypeRadios = document.querySelectorAll('input[name=\"contentType\"]');\n        const checkedRadio = Array.from(contentTypeRadios).find((radio) => radio.checked);\n\n        console.log('📋 Content Type Radios found:', contentTypeRadios.length);\n        console.log('📋 Already checked:', checkedRadio ? checkedRadio.value : 'none');\n\n        if (!checkedRadio && contentTypeRadios.length > 0) {\n            // Find Serie radio button and check it\n            const serieRadio = Array.from(contentTypeRadios).find((radio) => radio.value === 'Serie');\n            if (serieRadio) {\n                serieRadio.checked = true;\n                console.log('📋 Force-selected Serie (TV Shows) radio button');\n            } else {\n                // Fallback - check first radio button\n                contentTypeRadios[0].checked = true;\n                console.log('📋 Force-selected first radio button:', contentTypeRadios[0].value);\n            }\n        }\n    }\n\n    /**\n     * Refresh form state from current DOM values and set defaults\n     */\n    refreshFormState() {\n        const formData = DOMManager.getFormData();\n        Object.assign(this.formState, formData);\n\n        console.log('📋 Form state updated');\n        console.log('📋 Final form data:', this.formState);\n\n        // Update preview with current state and load initial movie preview\n        this.updatePreviewWithMovies();\n    }\n\n    /**\n     * Set default selections for dropdowns that are populated but have no selection\n     */\n    setDefaultSelections() {\n        let hasChanges = false;\n\n        // Set default platform to Netflix if available, otherwise first option\n        const platformSelect = document.getElementById('platform');\n        if (platformSelect && platformSelect.children.length > 1 && platformSelect.selectedIndex === 0) {\n            // Try to find Netflix first\n            let netflixIndex = -1;\n            for (let i = 1; i < platformSelect.options.length; i++) {\n                if (platformSelect.options[i].value.toLowerCase().includes('netflix')) {\n                    netflixIndex = i;\n                    break;\n                }\n            }\n\n            // Select Netflix if found, otherwise first non-empty option\n            platformSelect.selectedIndex = netflixIndex > 0 ? netflixIndex : 1;\n            this.formState.platform = platformSelect.value;\n            console.log('📋 Set default platform:', this.formState.platform);\n            hasChanges = true;\n        }\n\n        // Set default genre to Horror if available, otherwise first option\n        const genreSelect = document.getElementById('genre');\n        if (genreSelect && genreSelect.children.length > 1 && genreSelect.selectedIndex === 0) {\n            // Try to find Horror first\n            let horrorIndex = -1;\n            for (let i = 1; i < genreSelect.options.length; i++) {\n                if (genreSelect.options[i].value.toLowerCase().includes('horror')) {\n                    horrorIndex = i;\n                    break;\n                }\n            }\n\n            // Select Horror if found, otherwise first non-empty option\n            genreSelect.selectedIndex = horrorIndex > 0 ? horrorIndex : 1;\n            this.formState.genre = genreSelect.value;\n            console.log('📋 Set default genre:', this.formState.genre);\n            hasChanges = true;\n\n            // Update templates based on selected genre\n            this.updateTemplates(this.formState.genre);\n        }\n\n        // If we made changes, note it (main refresh will read all values after)\n        if (hasChanges) {\n            console.log('📋 Defaults set');\n        }\n    }\n\n    /**\n     * Manual form state refresh for debugging\n     */\n    manualRefresh() {\n        console.log('📋 Manual form refresh triggered');\n        this.refreshFormState();\n        return this.formState;\n    }\n\n    // === Form Event Handlers ===\n\n    /**\n     * Handle country selection change\n     * @param {string} countryCode - Selected country code\n     */\n    async handleCountryChange(countryCode) {\n        console.log(`📋 Country changed: ${countryCode}`);\n\n        this.formState.country = countryCode;\n\n        // Reset dependent fields\n        this.resetPlatformSelection();\n        this.resetGenreSelection();\n        this.resetTemplateSelection();\n\n        if (countryCode) {\n            await this.updatePlatforms(countryCode);\n        }\n\n        this.updatePreview();\n    }\n\n    /**\n     * Handle platform selection change\n     * @param {string} platformValue - Selected platform value\n     */\n    async handlePlatformChange() {\n        // Handle multiple platform selection with checkboxes\n        const selectedPlatforms = [];\n        const checkboxes = document.querySelectorAll('input[name=\"platforms\"]:checked');\n\n        checkboxes.forEach((checkbox) => {\n            selectedPlatforms.push(checkbox.value);\n        });\n\n        console.log('📺 Platform selection changed:', selectedPlatforms);\n\n        this.formState.platforms = selectedPlatforms;\n        this.formState.platform = selectedPlatforms[0] || ''; // Keep first platform for backward compatibility\n\n        // Reset dependent fields\n        this.resetGenreSelection();\n        this.resetTemplateSelection();\n\n        // Don't call updateGenres - genres are not platform-dependent\n        // Update the preview and reload movies since platform affects movie selection\n        this.updatePreviewWithMovies();\n    }\n\n    /**\n     * Handle genre checkbox changes (multiple selection)\n     */\n    handleGenreChange() {\n        const selectedGenres = [];\n        const checkboxes = document.querySelectorAll('input[name=\"genres\"]:checked');\n\n        checkboxes.forEach((checkbox) => {\n            selectedGenres.push(checkbox.value);\n        });\n\n        console.log('🎭 Genre selection changed:', selectedGenres);\n\n        this.formState.genres = selectedGenres;\n        this.formState.genre = selectedGenres[0] || ''; // Keep first genre for backward compatibility\n\n        // Reset template selection when genre changes\n        this.resetTemplateSelection();\n\n        if (selectedGenres.length > 0) {\n            this.updateTemplates(selectedGenres[0]); // Use first genre for template loading\n        }\n\n        this.updatePreviewWithMovies();\n    }\n\n    /**\n     * Handle template selection change\n     * @param {string} templateValue - Selected template value\n     */\n    handleTemplateChange(templateValue) {\n        console.log(`📋 Template changed: ${templateValue}`);\n\n        this.formState.template = templateValue;\n        this.updatePreview();\n    }\n\n    /**\n     * Handle content type change\n     * @param {string} contentType - Selected content type\n     */\n    handleContentTypeChange(contentType) {\n        console.log(`📋 Content type changed: ${contentType}`);\n\n        this.formState.contentType = contentType;\n        this.updatePreviewWithMovies();\n    }\n\n    // === Form Update Methods ===\n\n    /**\n     * Update platforms dropdown based on country\n     * @param {string} countryCode - Country code\n     */\n    async updatePlatforms(countryCode) {\n        try {\n            const result = await APIService.getPlatforms(countryCode);\n\n            if (result.success && result.platforms) {\n                this.populatePlatformSelect(result.platforms);\n            } else {\n                this.populateDefaultPlatforms(countryCode);\n            }\n        } catch (error) {\n            console.error('❌ Failed to load platforms:', error);\n            this.populateDefaultPlatforms(countryCode);\n        }\n    }\n\n    /**\n     * Populate platform checkboxes with options\n     * @param {Array} platforms - Array of platform strings\n     */\n    populatePlatformSelect(platforms) {\n        const platformContainer = document.getElementById('platform-checkboxes');\n        if (!platformContainer) {\n            console.error('❌ Platform checkboxes container not found!');\n            return;\n        }\n\n        console.log('📋 Populating platforms:', platforms);\n\n        // Clear existing checkboxes\n        platformContainer.innerHTML = '';\n\n        // Add platform checkboxes\n        platforms.forEach((platform, index) => {\n            const checkboxItem = document.createElement('div');\n            checkboxItem.className = 'checkbox-item';\n\n            const checkbox = document.createElement('input');\n            checkbox.type = 'checkbox';\n            checkbox.id = `platform-${index}`;\n            checkbox.value = platform;\n            checkbox.name = 'platforms';\n\n            // Pre-select Netflix if available\n            if (platform.toLowerCase().includes('netflix')) {\n                checkbox.checked = true;\n                this.formState.platforms = [platform];\n            }\n\n            const label = document.createElement('label');\n            label.htmlFor = `platform-${index}`;\n            label.textContent = platform;\n\n            // Add change event listener\n            checkbox.addEventListener('change', (e) => {\n                this.handlePlatformChange();\n            });\n\n            checkboxItem.appendChild(checkbox);\n            checkboxItem.appendChild(label);\n            platformContainer.appendChild(checkboxItem);\n        });\n\n        console.log('✅ Platform checkboxes populated with', platforms.length, 'options');\n    }\n\n    /**\n     * Populate default platforms when API fails\n     * @param {string} countryCode - Country code\n     */\n    populateDefaultPlatforms(countryCode) {\n        const defaultPlatforms = [\n            { value: 'Netflix', name: 'Netflix' },\n            { value: 'Prime Video', name: 'Prime Video' },\n            { value: 'Disney+', name: 'Disney+' },\n            { value: 'Apple TV+', name: 'Apple TV+' },\n            { value: 'HBO Max', name: 'HBO Max' }\n        ];\n\n        this.populatePlatformSelect(defaultPlatforms);\n    }\n\n    /**\n     * Update genres based on country and platform\n     * @param {string} countryCode - Country code\n     * @param {string} platformValue - Platform value\n     */\n    async updateGenres(countryCode, platformValue = null) {\n        // Use country-specific caching (genres are not platform-specific)\n        const cacheKey = `genres_${countryCode}`;\n        if (this.validationCache.has(cacheKey)) {\n            console.log(`📋 Using cached genres for ${countryCode}`);\n            return;\n        }\n\n        try {\n            console.log(`📋 Loading genres for ${countryCode}...`);\n            const result = await APIService.getGenres(countryCode); // Don't pass platform\n\n            if (result.success && result.genres) {\n                console.log(`📋 API returned ${result.genres.length} genres for ${countryCode}:`, result.genres);\n                this.populateGenreSelect(result.genres);\n                this.validationCache.set(cacheKey, true); // Cache successful result\n                return;\n            }\n        } catch (error) {\n            console.error('❌ Failed to load genres from API:', error);\n        }\n\n        // Fallback to static genre data\n        console.log(`📋 Using fallback static genres for ${countryCode}`);\n        this.populateGenreSelectFromStatic(countryCode);\n    }\n\n    /**\n     * Populate genre checkboxes from API data\n     * @param {Array} genres - Array of genre strings\n     */\n    populateGenreSelect(genres) {\n        const genreContainer = document.getElementById('genre-checkboxes');\n        if (!genreContainer) {\n            console.error('❌ Genre checkboxes container not found!');\n            return;\n        }\n\n        console.log('📋 Populating genres:', genres);\n\n        // Clear existing checkboxes\n        genreContainer.innerHTML = '';\n\n        // Add genre checkboxes\n        genres.forEach((genre, index) => {\n            const checkboxItem = document.createElement('div');\n            checkboxItem.className = 'checkbox-item';\n\n            const checkbox = document.createElement('input');\n            checkbox.type = 'checkbox';\n            checkbox.id = `genre-${index}`;\n            checkbox.value = genre;\n            checkbox.name = 'genres';\n\n            // Pre-select Horror if available\n            if (genre.toLowerCase().includes('horror')) {\n                checkbox.checked = true;\n                this.formState.genres = [genre];\n            }\n\n            const label = document.createElement('label');\n            label.htmlFor = `genre-${index}`;\n            label.textContent = genre;\n\n            // Add change event listener\n            checkbox.addEventListener('change', (e) => {\n                this.handleGenreChange();\n            });\n\n            checkboxItem.appendChild(checkbox);\n            checkboxItem.appendChild(label);\n            genreContainer.appendChild(checkboxItem);\n        });\n\n        console.log('✅ Genre checkboxes populated with', genres.length, 'options');\n\n        // Don't refresh here - will be done once at end of initialization\n    }\n\n    /**\n     * Populate genre select from static data\n     * @param {string} countryCode - Country code\n     */\n    populateGenreSelectFromStatic(countryCode) {\n        const genres = this.genresByCountry[countryCode];\n        if (!genres) return;\n\n        const genreSelect = document.getElementById('genre');\n        if (!genreSelect) return;\n\n        // Clear existing options (except first)\n        while (genreSelect.children.length > 1) {\n            genreSelect.removeChild(genreSelect.lastChild);\n        }\n\n        // Add genre options\n        Object.entries(genres).forEach(([displayName, value]) => {\n            const option = document.createElement('option');\n            option.value = value;\n            option.textContent = displayName;\n            genreSelect.appendChild(option);\n        });\n    }\n\n    /**\n     * Update templates based on genre\n     * @param {string} genreValue - Selected genre value\n     */\n    updateTemplates(genreValue) {\n        const templateSelect = document.getElementById('template');\n        if (!templateSelect) return;\n\n        // Get appropriate template ID\n        const templateId = this.getTemplateForGenre(genreValue);\n\n        // Find and select the matching template\n        Array.from(templateSelect.options).forEach((option) => {\n            if (option.value === templateId) {\n                option.selected = true;\n                this.formState.template = templateId;\n            }\n        });\n\n        console.log(`📋 Template auto-selected for genre '${genreValue}': ${templateId}`);\n    }\n\n    /**\n     * Get template ID for specific genre\n     * @param {string} genreValue - Genre value\n     * @returns {string} Template ID\n     */\n    getTemplateForGenre(genreValue) {\n        // Check for exact match\n        if (this.templatesByGenre[genreValue]) {\n            return this.templatesByGenre[genreValue];\n        }\n\n        // Check for case-insensitive match\n        const genreLower = genreValue.toLowerCase();\n        for (const [key, templateId] of Object.entries(this.templatesByGenre)) {\n            if (key.toLowerCase() === genreLower) {\n                return templateId;\n            }\n        }\n\n        // Return default template\n        return this.templatesByGenre.default;\n    }\n\n    // === Form Reset Methods ===\n\n    /**\n     * Reset platform selection\n     */\n    resetPlatformSelection() {\n        const platformSelect = document.getElementById('platform');\n        if (platformSelect) {\n            platformSelect.selectedIndex = 0;\n            // Clear all options except the first\n            while (platformSelect.children.length > 1) {\n                platformSelect.removeChild(platformSelect.lastChild);\n            }\n        }\n        this.formState.platform = '';\n    }\n\n    /**\n     * Reset genre selection\n     */\n    resetGenreSelection() {\n        const genreSelect = document.getElementById('genre');\n        if (genreSelect) {\n            genreSelect.selectedIndex = 0;\n            // Clear all options except the first\n            while (genreSelect.children.length > 1) {\n                genreSelect.removeChild(genreSelect.lastChild);\n            }\n        }\n        this.formState.genre = '';\n    }\n\n    /**\n     * Reset template selection\n     */\n    resetTemplateSelection() {\n        const templateSelect = document.getElementById('template');\n        if (templateSelect) {\n            templateSelect.selectedIndex = 0;\n        }\n        this.formState.template = '';\n    }\n\n    // === Form Validation ===\n\n    /**\n     * Validate current form state\n     * @returns {Object} Validation result\n     */\n    validateForm() {\n        const errors = [];\n        const warnings = [];\n\n        // Required field validation\n        if (!this.formState.country) {\n            errors.push('Country is required');\n        }\n\n        if (!this.formState.platform) {\n            errors.push('Platform is required');\n        }\n\n        if (!this.formState.genre) {\n            errors.push('Genre is required');\n        }\n\n        if (!this.formState.contentType) {\n            errors.push('Content type is required');\n        }\n\n        // Template validation (warning only)\n        if (!this.formState.template) {\n            warnings.push('No template selected - default will be used');\n        }\n\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n\n    /**\n     * Validate StreamGank URL\n     * @param {string} url - URL to validate\n     * @returns {Promise<Object>} Validation result\n     */\n    async validateStreamGankUrl(url) {\n        if (!url || url.includes('Select all parameters')) {\n            return { valid: false, message: 'Please complete the form to generate a valid URL' };\n        }\n\n        const cacheKey = `url:${url}`;\n        if (this.validationCache.has(cacheKey)) {\n            return this.validationCache.get(cacheKey);\n        }\n\n        try {\n            UIManager.addStatusMessage('info', '🔍', 'Validating URL...');\n            this.isValidating = true;\n\n            const result = await APIService.validateUrl(url);\n\n            const validation = {\n                valid: result.success,\n                message: result.message,\n                moviesCount: result.moviesCount,\n                timestamp: new Date().toISOString()\n            };\n\n            // Cache validation result\n            this.validationCache.set(cacheKey, validation);\n\n            if (validation.valid) {\n                UIManager.addStatusMessage('success', '✅', `URL validated! Found ${validation.moviesCount} items`);\n            } else {\n                UIManager.addStatusMessage('error', '❌', `URL validation failed: ${validation.message}`);\n            }\n\n            return validation;\n        } catch (error) {\n            console.error('❌ URL validation error:', error);\n\n            const validation = {\n                valid: false,\n                message: error.message || 'Validation failed',\n                timestamp: new Date().toISOString()\n            };\n\n            UIManager.addStatusMessage('error', '❌', `Validation error: ${validation.message}`);\n            return validation;\n        } finally {\n            this.isValidating = false;\n        }\n    }\n\n    // === Form Submission ===\n\n    /**\n     * Handle form submission\n     */\n    async handleFormSubmit() {\n        try {\n            // Update form state from DOM\n            this.updateFormStateFromDOM();\n\n            // Validate form\n            const validation = this.validateForm();\n\n            if (!validation.isValid) {\n                validation.errors.forEach((error) => {\n                    UIManager.addStatusMessage('error', '❌', error);\n                });\n                return;\n            }\n\n            // Show warnings if any\n            validation.warnings.forEach((warning) => {\n                UIManager.addStatusMessage('warning', '⚠️', warning);\n            });\n\n            // Generate and validate URL\n            const previewUrl = this.generateStreamGankUrl();\n            const urlValidation = await this.validateStreamGankUrl(previewUrl);\n\n            if (!urlValidation.valid) {\n                return; // Error already shown by validation\n            }\n\n            // Emit form submission event with data\n            document.dispatchEvent(\n                new CustomEvent('formSubmit', {\n                    detail: {\n                        formData: { ...this.formState },\n                        previewUrl,\n                        validation: urlValidation\n                    }\n                })\n            );\n        } catch (error) {\n            console.error('❌ Form submission error:', error);\n            UIManager.addStatusMessage('error', '❌', `Form submission failed: ${error.message}`);\n        }\n    }\n\n    /**\n     * Update form state from current DOM values\n     */\n    updateFormStateFromDOM() {\n        const formData = DOMManager.getFormData();\n        Object.assign(this.formState, formData);\n    }\n\n    // === Preview Generation ===\n\n    /**\n     * Update form preview display\n     */\n    updatePreview() {\n        // Use form state data for preview (no need to read DOM again)\n        UIManager.updateFormPreviewFromState(this.formState);\n\n        console.log('📋 Preview updated');\n    }\n\n    /**\n     * Update preview and reload movie data (for filter changes)\n     */\n    updatePreviewWithMovies() {\n        // Update the form preview display\n        this.updatePreview();\n\n        // Load movie preview when filters change\n        this.loadMoviePreview();\n\n        console.log('📋 Preview updated with movie reload');\n    }\n\n    /**\n     * Load movie preview based on current filters\n     */\n    async loadMoviePreview() {\n        const country = this.formState.country;\n        const platforms = this.formState.platforms || [];\n        const genres = this.formState.genres || [];\n        const contentType = this.formState.contentType;\n\n        // Don't load preview if essential filters are missing\n        if (!country || platforms.length === 0 || genres.length === 0) {\n            this.hideMoviePreview();\n            return;\n        }\n\n        console.log('🎬 Loading movie preview:', { country, platforms, genres, contentType });\n\n        this.showMoviePreviewLoading();\n\n        try {\n            const response = await fetch('/api/movies/preview', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    country,\n                    platforms,\n                    genre: genres, // Send as array\n                    contentType: contentType === 'All' ? null : contentType // Don't send contentType if \"All\"\n                })\n            });\n\n            const data = await response.json();\n\n            if (data.success && data.movies && data.movies.length > 0) {\n                this.displayMoviePreview(data.movies);\n            } else {\n                this.showMoviePreviewEmpty();\n            }\n        } catch (error) {\n            console.error('❌ Failed to load movie preview:', error);\n            this.showMoviePreviewEmpty();\n        }\n    }\n\n    /**\n     * Display movie preview cards\n     */\n    displayMoviePreview(movies) {\n        const container = document.getElementById('movie-preview-container');\n        const grid = document.getElementById('movie-preview-grid');\n        const loading = document.getElementById('movie-preview-loading');\n        const empty = document.getElementById('movie-preview-empty');\n\n        if (!container || !grid) return;\n\n        // Hide loading and empty states\n        loading.style.display = 'none';\n        empty.style.display = 'none';\n\n        // Clear existing content\n        grid.innerHTML = '';\n\n        // Create movie cards\n        movies.forEach((movie, index) => {\n            const movieCard = this.createMovieCard(movie, index);\n            grid.appendChild(movieCard);\n        });\n\n        // Show the preview container\n        container.style.display = 'block';\n\n        // Enable Generate button since we have movies\n        this.enableGenerateButton();\n\n        console.log(`✅ Displayed ${movies.length} movie preview cards`);\n    }\n\n    /**\n     * Create a movie card element\n     */\n    createMovieCard(movie, index) {\n        const col = document.createElement('div');\n        col.className = 'col-md-4';\n\n        const card = document.createElement('div');\n        card.className = 'movie-card';\n\n        const posterUrl =\n            movie.poster_url || movie.backdrop_url || 'https://via.placeholder.com/300x450/333/fff?text=No+Image';\n        const title = movie.title || 'Unknown Title';\n\n        card.innerHTML = `\n            <img src=\"${posterUrl}\" alt=\"${title}\" class=\"movie-poster\" \n                 onerror=\"this.src='https://via.placeholder.com/300x450/333/fff?text=No+Image'\">\n            <div class=\"movie-title-large\">${title}</div>\n        `;\n\n        col.appendChild(card);\n        return col;\n    }\n\n    /**\n     * Show movie preview loading state\n     */\n    showMoviePreviewLoading() {\n        const container = document.getElementById('movie-preview-container');\n        const loading = document.getElementById('movie-preview-loading');\n        const grid = document.getElementById('movie-preview-grid');\n        const empty = document.getElementById('movie-preview-empty');\n\n        if (!container || !loading) return;\n\n        container.style.display = 'block';\n        loading.style.display = 'block';\n        grid.innerHTML = '';\n        empty.style.display = 'none';\n\n        // Disable Generate button while loading\n        this.disableGenerateButton();\n    }\n\n    /**\n     * Show movie preview empty state\n     */\n    showMoviePreviewEmpty() {\n        const container = document.getElementById('movie-preview-container');\n        const loading = document.getElementById('movie-preview-loading');\n        const grid = document.getElementById('movie-preview-grid');\n        const empty = document.getElementById('movie-preview-empty');\n\n        if (!container || !empty) return;\n\n        container.style.display = 'block';\n        loading.style.display = 'none';\n        grid.innerHTML = '';\n        empty.style.display = 'block';\n\n        // Disable Generate button since there are no movies\n        this.disableGenerateButton();\n    }\n\n    /**\n     * Hide movie preview section\n     */\n    hideMoviePreview() {\n        const container = document.getElementById('movie-preview-container');\n        if (container) {\n            container.style.display = 'none';\n        }\n\n        // Disable Generate button since preview is hidden\n        this.disableGenerateButton();\n    }\n\n    /**\n     * Enable the Generate Video button\n     */\n    enableGenerateButton() {\n        const generateButton = document.getElementById('generate-video');\n        if (generateButton) {\n            generateButton.disabled = false;\n            generateButton.classList.remove('btn-secondary');\n            generateButton.classList.add('btn-primary');\n            generateButton.innerHTML = '<span class=\"icon\">🎬</span> Generate Video';\n            console.log('✅ Generate button enabled');\n        }\n    }\n\n    /**\n     * Disable the Generate Video button\n     */\n    disableGenerateButton() {\n        const generateButton = document.getElementById('generate-video');\n        if (generateButton) {\n            generateButton.disabled = true;\n            generateButton.classList.remove('btn-primary');\n            generateButton.classList.add('btn-secondary');\n            generateButton.innerHTML = '<span class=\"icon\">⚠️</span> No Movies Available';\n            console.log('🚫 Generate button disabled');\n        }\n    }\n\n    /**\n     * Generate StreamGank URL from current form state\n     * @returns {string} Generated URL\n     */\n    generateStreamGankUrl() {\n        if (!this.formState.country || !this.formState.platform || !this.formState.contentType) {\n            return 'Select all parameters to generate URL';\n        }\n\n        const baseUrl = 'https://streamgank.com';\n        const params = new URLSearchParams();\n\n        // Use exact format: country, platforms (plural), genres (plural), type\n        if (this.formState.country) params.set('country', this.formState.country);\n        if (this.formState.platform) params.set('platforms', this.formState.platform.toLowerCase());\n\n        // Only add genre if not 'all' (use plural 'genres') - map to English\n        if (this.formState.genre && this.formState.genre !== 'all') {\n            const genreMapping = {\n                Horreur: 'Horror',\n                Comédie: 'Comedy',\n                'Action & Aventure': 'Action',\n                Animation: 'Animation'\n            };\n            const englishGenre = genreMapping[this.formState.genre] || this.formState.genre;\n            params.set('genres', englishGenre);\n        }\n\n        // Only add content type if not 'all' - map to clean English\n        if (this.formState.contentType && this.formState.contentType !== 'all') {\n            const typeMapping = {\n                movies: 'Film',\n                series: 'Serie',\n                tvshows: 'Serie',\n                'tv-shows': 'Serie'\n            };\n            const cleanType = typeMapping[this.formState.contentType.toLowerCase()] || this.formState.contentType;\n            params.set('type', cleanType);\n        }\n\n        return `${baseUrl}?${params.toString()}`;\n    }\n\n    // === Utility Methods ===\n\n    /**\n     * Get current form data\n     * @returns {Object} Current form state\n     */\n    getFormData() {\n        this.updateFormStateFromDOM();\n        return { ...this.formState };\n    }\n\n    /**\n     * Set form data\n     * @param {Object} data - Form data to set\n     */\n    setFormData(data) {\n        Object.assign(this.formState, data);\n\n        // Update DOM elements\n        Object.entries(data).forEach(([key, value]) => {\n            const element = DOMManager.get(`${key}Select`) || DOMManager.get(key);\n            if (element && element.value !== undefined) {\n                element.value = value;\n            }\n        });\n\n        this.updatePreview();\n    }\n\n    /**\n     * Reset form to initial state\n     */\n    resetForm() {\n        this.formState = {\n            country: '',\n            platform: '',\n            genre: '',\n            template: '',\n            contentType: ''\n        };\n\n        // Reset DOM elements using correct element IDs\n        ['country', 'platform', 'genre', 'template'].forEach((elementId) => {\n            const select = document.getElementById(elementId);\n            if (select) {\n                select.selectedIndex = 0;\n            }\n        });\n\n        // Reset radio buttons\n        const contentTypeRadios = DOMManager.get('contentTypeRadios');\n        if (contentTypeRadios) {\n            Array.from(contentTypeRadios).forEach((radio) => {\n                radio.checked = false;\n            });\n        }\n\n        // Clear validation cache\n        this.validationCache.clear();\n\n        this.updatePreview();\n        console.log('📋 Form reset');\n    }\n\n    /**\n     * Get form validation state\n     * @returns {Object} Current validation state\n     */\n    getValidationState() {\n        return {\n            isValidating: this.isValidating,\n            cacheSize: this.validationCache.size,\n            lastValidation: null // Could track this if needed\n        };\n    }\n\n    /**\n     * Emit custom events for form actions\n     */\n    emit(eventName, data) {\n        console.log(`📤 FormManager emitting ${eventName}:`, data);\n        const event = new CustomEvent(eventName, { detail: data });\n        // Dispatch on document to ensure it's caught by main.js\n        document.dispatchEvent(event);\n    }\n}\n\n// Create singleton instance\nconst formManager = new FormManager();\n\n// Export singleton instance\nexport default formManager;\n","/**\r\n * ProcessTable - Manages the job process table display\r\n * Handles job status updates, table population, and job actions\r\n */\r\n\r\nimport APIService from '../services/APIService.js';\r\nimport UIManager from './UIManager.js';\r\n\r\nclass ProcessTable {\r\n    constructor() {\r\n        this.processData = new Map(); // Store job data\r\n        this.isInitialized = false;\r\n        this.updateInterval = null;\r\n    }\r\n\r\n    /**\r\n     * Initialize the process table\r\n     */\r\n    async init() {\r\n        if (this.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        console.log('🔧 ProcessTable initializing...');\r\n\r\n        await this.loadRecentJobs();\r\n        this.setupEventListeners();\r\n        this.startPeriodicUpdates();\r\n\r\n        this.isInitialized = true;\r\n        console.log('✅ ProcessTable initialized');\r\n    }\r\n\r\n    /**\r\n     * Setup event listeners for process table actions\r\n     */\r\n    setupEventListeners() {\r\n        // View job button handler (delegated event with proper child element handling)\r\n        document.addEventListener('click', (e) => {\r\n            const viewButton = e.target.closest('.btn-view-job');\r\n            if (viewButton) {\r\n                e.preventDefault();\r\n                const jobId = viewButton.dataset.jobId;\r\n                console.log(`🎯 View button clicked for job: ${jobId}`);\r\n                this.viewJob(jobId);\r\n            }\r\n        });\r\n\r\n        // Cancel job button handler (delegated event with proper child element handling)\r\n        document.addEventListener('click', (e) => {\r\n            const cancelButton = e.target.closest('.btn-cancel-job');\r\n            if (cancelButton) {\r\n                e.preventDefault();\r\n                const jobId = cancelButton.dataset.jobId;\r\n                console.log(`🚫 Cancel button clicked for job: ${jobId}`);\r\n                this.cancelJob(jobId);\r\n            }\r\n        });\r\n\r\n        // Delete job button handler (delegated event with proper child element handling)\r\n        document.addEventListener('click', (e) => {\r\n            const deleteButton = e.target.closest('.btn-delete-job');\r\n            if (deleteButton) {\r\n                e.preventDefault();\r\n                const jobId = deleteButton.dataset.jobId;\r\n                console.log(`🗑️ Delete button clicked for job: ${jobId}`);\r\n                this.deleteJob(jobId);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load recent jobs from API\r\n     */\r\n    async loadRecentJobs() {\r\n        // ANTI-SPAM: Don't load if page is not visible\r\n        if (document.hidden) {\r\n            console.log('📋 ProcessTable: Skipping job load - page not visible (anti-spam)');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log('📋 ProcessTable: Loading jobs from /api/queue/jobs...');\r\n            const response = await APIService.get('/api/queue/jobs');\r\n\r\n            console.log('📋 ProcessTable: API response:', response);\r\n\r\n            if (response.success && response.jobs) {\r\n                console.log(`📋 ProcessTable: Received ${response.jobs.length} jobs`);\r\n                console.log('📋 ProcessTable: Raw job data:', response.jobs[0]); // Debug first job\r\n\r\n                // Clear existing process data\r\n                this.processData.clear();\r\n\r\n                // Add jobs to process data\r\n                response.jobs.forEach((job) => {\r\n                    console.log(`📋 Processing job:`, job); // Debug each job structure\r\n\r\n                    const processedJob = {\r\n                        id: job.id,\r\n                        status: job.status || 'pending',\r\n                        country: job.parameters?.country || job.country || 'Unknown',\r\n                        platform: job.parameters?.platform || job.platform || 'Unknown',\r\n                        genre: job.parameters?.genre || job.genre || 'Unknown',\r\n                        contentType: job.parameters?.contentType || job.contentType || 'Unknown',\r\n                        createdAt: job.createdAt || new Date().toISOString(),\r\n                        startedAt: job.startedAt,\r\n                        completedAt: job.completedAt,\r\n                        failedAt: job.failedAt,\r\n                        progress: job.progress || 0,\r\n                        workerId: job.workerId,\r\n                        error: job.error\r\n                    };\r\n\r\n                    console.log(`📋 Processed job data:`, processedJob);\r\n                    this.processData.set(job.id, processedJob);\r\n                });\r\n\r\n                console.log(`📋 Loaded ${response.jobs.length} jobs into process table`);\r\n                this.updateProcessTable();\r\n            } else {\r\n                console.log('📋 ProcessTable: No jobs received or API failed');\r\n                // Still update table to show empty state\r\n                this.updateProcessTable();\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to load recent jobs:', error);\r\n            UIManager.addStatusMessage('error', '❌', 'Failed to load job history');\r\n            // Still update table to show empty state\r\n            this.updateProcessTable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the professional job dashboard with current job data\r\n     */\r\n    updateProcessTable() {\r\n        const jobCardsContainer = document.getElementById('job-cards-container');\r\n        const emptyState = document.getElementById('empty-jobs-state');\r\n        const loadingState = document.getElementById('jobs-loading-state');\r\n        const jobCountBadge = document.getElementById('job-count-badge');\r\n\r\n        console.log('📊 JobDashboard: Updating dashboard...');\r\n        console.log('📊 JobDashboard: Cards container found:', !!jobCardsContainer);\r\n        console.log('📊 JobDashboard: Empty state found:', !!emptyState);\r\n\r\n        if (!jobCardsContainer) {\r\n            console.warn('⚠️ Job cards container not found');\r\n            return;\r\n        }\r\n\r\n        // Hide loading state\r\n        if (loadingState) {\r\n            loadingState.style.display = 'none';\r\n        }\r\n\r\n        // Clear existing cards\r\n        jobCardsContainer.innerHTML = '';\r\n\r\n        console.log(`📊 JobDashboard: Processing ${this.processData.size} jobs`);\r\n\r\n        // Update job count badge\r\n        if (jobCountBadge) {\r\n            jobCountBadge.textContent = this.processData.size;\r\n        }\r\n\r\n        if (this.processData.size === 0) {\r\n            // Show empty state\r\n            if (emptyState) {\r\n                emptyState.style.display = 'block';\r\n                console.log('📊 JobDashboard: Showing empty state');\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Hide empty state\r\n        if (emptyState) {\r\n            emptyState.style.display = 'none';\r\n        }\r\n\r\n        // Create job cards\r\n        const sortedJobs = Array.from(this.processData.values()).sort(\r\n            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n        );\r\n\r\n        sortedJobs.forEach((job) => {\r\n            const jobCard = this.createJobCard(job);\r\n            jobCardsContainer.appendChild(jobCard);\r\n        });\r\n\r\n        console.log(`📊 JobDashboard: Updated with ${sortedJobs.length} job cards`);\r\n    }\r\n\r\n    /**\r\n     * Create a professional job card\r\n     * @param {Object} job - Job data\r\n     * @returns {HTMLElement} Job card element\r\n     */\r\n    createJobCard(job) {\r\n        const cardCol = document.createElement('div');\r\n        cardCol.className = 'col-lg-6 col-xl-4';\r\n\r\n        const statusClass = this.getStatusClass(job.status);\r\n        const statusIcon = this.getStatusIcon(job.status);\r\n        const shortId = job.id ? job.id.slice(-8) : 'Unknown';\r\n\r\n        // Calculate duration and time information\r\n        let duration = 'Not started';\r\n        let startedTime = 'Not started';\r\n        let timeClass = 'text-muted';\r\n\r\n        if (job.startedAt) {\r\n            const startTime = new Date(job.startedAt);\r\n            startedTime = startTime.toLocaleString();\r\n\r\n            const endTime = job.completedAt || job.failedAt || new Date();\r\n            const durationMs = new Date(endTime) - startTime;\r\n            const durationMinutes = Math.floor(durationMs / 60000);\r\n            const durationSeconds = Math.floor((durationMs % 60000) / 1000);\r\n\r\n            if (durationMinutes > 0) {\r\n                duration = `${durationMinutes}m ${durationSeconds}s`;\r\n            } else {\r\n                duration = `${durationSeconds}s`;\r\n            }\r\n            timeClass = 'text-info';\r\n        } else if (job.createdAt) {\r\n            startedTime = `Created: ${new Date(job.createdAt).toLocaleString()}`;\r\n            timeClass = 'text-warning';\r\n        }\r\n\r\n        // Progress calculation for visual appeal\r\n        const progress = job.progress || 0;\r\n        const progressColor = progress >= 100 ? 'bg-success' : progress >= 50 ? 'bg-info' : 'bg-warning';\r\n\r\n        // Status-specific styling\r\n        let cardBorderClass = 'border-secondary';\r\n        let statusBgClass = 'bg-secondary';\r\n\r\n        switch (job.status) {\r\n            case 'pending':\r\n                cardBorderClass = 'border-warning';\r\n                statusBgClass = 'bg-warning';\r\n                break;\r\n            case 'active':\r\n            case 'processing':\r\n                cardBorderClass = 'border-info';\r\n                statusBgClass = 'bg-info';\r\n                break;\r\n            case 'completed':\r\n                cardBorderClass = 'border-success';\r\n                statusBgClass = 'bg-success';\r\n                break;\r\n            case 'failed':\r\n                cardBorderClass = 'border-danger';\r\n                statusBgClass = 'bg-danger';\r\n                break;\r\n            case 'cancelled':\r\n                cardBorderClass = 'border-dark';\r\n                statusBgClass = 'bg-dark';\r\n                break;\r\n        }\r\n\r\n        cardCol.innerHTML = `\r\n            <div class=\"card bg-dark ${cardBorderClass} h-100\" style=\"border-radius: 12px; border-width: 2px;\">\r\n                <!-- Card Header -->\r\n                <div class=\"card-header ${statusBgClass} text-white d-flex justify-content-between align-items-center\" style=\"border-radius: 10px 10px 0 0;\">\r\n                    <div class=\"d-flex align-items-center\">\r\n                        <span class=\"me-2\" style=\"font-size: 1.2em;\">${statusIcon}</span>\r\n                        <div>\r\n                            <h6 class=\"mb-0\">Job ${shortId}</h6>\r\n                            <small style=\"opacity: 0.9;\">${job.status.charAt(0).toUpperCase() + job.status.slice(1)}</small>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"text-end\">\r\n                        <div class=\"btn-group\" role=\"group\">\r\n                            <button class=\"btn btn-sm btn-outline-light btn-view-job\" \r\n                                    data-job-id=\"${job.id}\" title=\"View Details\">\r\n                                <i class=\"fas fa-eye\"></i>\r\n                            </button>\r\n                            ${\r\n                                job.status === 'pending' || job.status === 'active'\r\n                                    ? `\r\n                            <button class=\"btn btn-sm btn-outline-light btn-cancel-job\" \r\n                                    data-job-id=\"${job.id}\" title=\"Cancel Job\">\r\n                                <i class=\"fas fa-times\"></i>\r\n                            </button>\r\n                            `\r\n                                    : ''\r\n                            }\r\n                            ${\r\n                                job.status === 'failed' || job.status === 'completed' || job.status === 'cancelled'\r\n                                    ? `\r\n                            <button class=\"btn btn-sm btn-danger btn-delete-job\" \r\n                                    data-job-id=\"${job.id}\" title=\"Delete Job Permanently\"\r\n                                    style=\"border: 1px solid #dc3545; background-color: #dc3545; color: white;\">\r\n                                <i class=\"fas fa-trash\"></i>\r\n                            </button>\r\n                            `\r\n                                    : ''\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Card Body -->\r\n                <div class=\"card-body\">\r\n                    <!-- Progress Section -->\r\n                    <div class=\"mb-3\">\r\n                        <div class=\"d-flex justify-content-between align-items-center mb-2\">\r\n                            <small class=\"text-light fw-bold\">Progress</small>\r\n                            <small class=\"text-light\">${progress}%</small>\r\n                        </div>\r\n                        <div class=\"progress\" style=\"height: 8px; background-color: #495057; border-radius: 10px;\">\r\n                            <div class=\"progress-bar ${progressColor}\" role=\"progressbar\" \r\n                                 style=\"width: ${progress}%; border-radius: 10px;\" \r\n                                 aria-valuenow=\"${progress}\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n                            </div>\r\n                        </div>\r\n                        ${\r\n                            job.currentStep\r\n                                ? `\r\n                        <small class=\"text-muted mt-1 d-block\" style=\"font-size: 0.75em;\">\r\n                            ${job.currentStep}\r\n                        </small>\r\n                        `\r\n                                : ''\r\n                        }\r\n                    </div>\r\n\r\n                    <!-- Job Parameters -->\r\n                    <div class=\"row g-2 mb-3\">\r\n                        <div class=\"col-6\">\r\n                            <div class=\"bg-secondary bg-opacity-25 p-2 rounded\">\r\n                                <small class=\"text-muted d-block\">Country</small>\r\n                                <small class=\"text-light fw-bold\">${job.country || 'Unknown'}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-6\">\r\n                            <div class=\"bg-secondary bg-opacity-25 p-2 rounded\">\r\n                                <small class=\"text-muted d-block\">Platform</small>\r\n                                <small class=\"text-info fw-bold\">${job.platform || 'Unknown'}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-6\">\r\n                            <div class=\"bg-secondary bg-opacity-25 p-2 rounded\">\r\n                                <small class=\"text-muted d-block\">Genre</small>\r\n                                <small class=\"text-warning fw-bold\">${job.genre || 'Unknown'}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-6\">\r\n                            <div class=\"bg-secondary bg-opacity-25 p-2 rounded\">\r\n                                <small class=\"text-muted d-block\">Type</small>\r\n                                <small class=\"text-light fw-bold\">${job.contentType || 'Unknown'}</small>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Time Information -->\r\n                    <div class=\"text-center\">\r\n                        <small class=\"${timeClass}\">\r\n                            <i class=\"fas fa-clock me-1\"></i>\r\n                            ${startedTime}\r\n                        </small>\r\n                        ${\r\n                            duration !== 'Not started'\r\n                                ? `\r\n                        <br><small class=\"text-muted\">\r\n                            <i class=\"fas fa-stopwatch me-1\"></i>\r\n                            Duration: ${duration}\r\n                        </small>\r\n                        `\r\n                                : ''\r\n                        }\r\n                        ${\r\n                            job.workerId\r\n                                ? `\r\n                        <br><small class=\"text-muted\">\r\n                            <i class=\"fas fa-user me-1\"></i>\r\n                            Worker: ${job.workerId.slice(-8)}\r\n                        </small>\r\n                        `\r\n                                : ''\r\n                        }\r\n                    </div>\r\n\r\n                    ${\r\n                        job.status === 'failed' && job.error\r\n                            ? `\r\n                    <!-- Error Information -->\r\n                    <div class=\"mt-3 p-2 bg-danger bg-opacity-25 rounded border border-danger\">\r\n                        <small class=\"text-danger fw-bold\">\r\n                            <i class=\"fas fa-exclamation-triangle me-1\"></i>\r\n                            Error\r\n                        </small>\r\n                        <small class=\"text-light d-block mt-1\" style=\"font-size: 0.75em;\">\r\n                            ${job.error.length > 60 ? job.error.substring(0, 60) + '...' : job.error}\r\n                        </small>\r\n                    </div>\r\n                    `\r\n                            : ''\r\n                    }\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        return cardCol;\r\n    }\r\n\r\n    /**\r\n     * Get CSS class for job status\r\n     * @param {string} status - Job status\r\n     * @returns {string} CSS class\r\n     */\r\n    getStatusClass(status) {\r\n        const statusMap = {\r\n            pending: 'bg-warning',\r\n            active: 'bg-info',\r\n            completed: 'bg-success',\r\n            failed: 'bg-danger',\r\n            cancelled: 'bg-secondary'\r\n        };\r\n        return statusMap[status] || 'bg-secondary';\r\n    }\r\n\r\n    /**\r\n     * Get icon for job status\r\n     * @param {string} status - Job status\r\n     * @returns {string} Status icon\r\n     */\r\n    getStatusIcon(status) {\r\n        const iconMap = {\r\n            pending: '⏳',\r\n            active: '⚡',\r\n            completed: '✅',\r\n            failed: '❌',\r\n            cancelled: '🚫'\r\n        };\r\n        return iconMap[status] || '❓';\r\n    }\r\n\r\n    /**\r\n     * View job details (redirects to job detail page)\r\n     * @param {string} jobId - Job ID\r\n     */\r\n    async viewJob(jobId) {\r\n        try {\r\n            console.log(`👁️ Redirecting to job details page: ${jobId}`);\r\n\r\n            // Redirect to the job detail page\r\n            window.location.href = `/job/${jobId}`;\r\n        } catch (error) {\r\n            console.error('❌ Failed to redirect to job details:', error);\r\n            UIManager.addStatusMessage('error', '❌', 'Failed to open job details');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cancel a job\r\n     * @param {string} jobId - Job ID\r\n     */\r\n    async cancelJob(jobId) {\r\n        if (!confirm(`Cancel job ${jobId.slice(-8)}?`)) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await APIService.delete(`/api/queue/job/${jobId}`);\r\n\r\n            if (response.success) {\r\n                UIManager.addStatusMessage('success', '✅', 'Job cancelled successfully');\r\n\r\n                // Update job status in local data\r\n                const job = this.processData.get(jobId);\r\n                if (job) {\r\n                    job.status = 'cancelled';\r\n                    this.updateProcessTable();\r\n                }\r\n            } else {\r\n                throw new Error(response.error || 'Failed to cancel job');\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to cancel job:', error);\r\n            UIManager.addStatusMessage('error', '❌', `Failed to cancel job: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a completed or failed job permanently\r\n     * @param {string} jobId - Job ID\r\n     */\r\n    async deleteJob(jobId) {\r\n        const job = this.processData.get(jobId);\r\n        const jobShortId = jobId.slice(-8);\r\n        const statusText = job ? job.status : 'Unknown';\r\n\r\n        if (!confirm(`⚠️ Permanently delete ${statusText} job ${jobShortId}?\\n\\nThis action cannot be undone!`)) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await APIService.delete(`/api/queue/job/${jobId}/delete`);\r\n\r\n            if (response.success) {\r\n                UIManager.addStatusMessage('success', '🗑️', `Job ${jobShortId} deleted successfully`);\r\n\r\n                // Remove job from local data completely\r\n                this.processData.delete(jobId);\r\n                this.updateProcessTable();\r\n            } else {\r\n                throw new Error(response.error || 'Failed to delete job');\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to delete job:', error);\r\n            UIManager.addStatusMessage('error', '❌', `Failed to delete job: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update job status (called from real-time updates)\r\n     * @param {Object} jobUpdate - Job update data\r\n     */\r\n    updateJobStatus(jobUpdate) {\r\n        const job = this.processData.get(jobUpdate.id);\r\n        if (job) {\r\n            // Update job data\r\n            Object.assign(job, jobUpdate);\r\n\r\n            // Update table if needed\r\n            this.updateProcessTable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add new job to table\r\n     * @param {Object} jobData - New job data\r\n     */\r\n    addJob(jobData) {\r\n        this.processData.set(jobData.id, jobData);\r\n        this.updateProcessTable();\r\n    }\r\n\r\n    /**\r\n     * Start periodic updates for job status\r\n     */\r\n    startPeriodicUpdates() {\r\n        // Clear any existing interval to prevent duplicates\r\n        this.stopPeriodicUpdates();\r\n\r\n        // ANTI-SPAM: Much longer intervals - webhooks provide real-time updates\r\n        this.updateInterval = setInterval(() => {\r\n            console.log('📋 ProcessTable: Periodic backup refresh (anti-spam mode)');\r\n            this.loadRecentJobs();\r\n        }, 600000); // 10 minutes backup only - webhooks do the real work\r\n\r\n        console.log('📋 ProcessTable: Started 10-minute backup polling (anti-spam)');\r\n    }\r\n\r\n    /**\r\n     * Stop periodic updates\r\n     */\r\n    stopPeriodicUpdates() {\r\n        if (this.updateInterval) {\r\n            clearInterval(this.updateInterval);\r\n            this.updateInterval = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get current process data\r\n     * @returns {Map} Process data map\r\n     */\r\n    getProcessData() {\r\n        return this.processData;\r\n    }\r\n\r\n    /**\r\n     * Cleanup resources\r\n     */\r\n    cleanup() {\r\n        this.stopPeriodicUpdates();\r\n        this.processData.clear();\r\n        this.isInitialized = false;\r\n    }\r\n}\r\n\r\n// Export singleton instance\r\nconst processTableInstance = new ProcessTable();\r\n\r\n// Make globally available for immediate dashboard updates\r\nwindow.ProcessTable = processTableInstance;\r\n\r\nexport default processTableInstance;\r\n","/**\n * Navigation Component - Professional navigation bar\n * Provides consistent navigation across all pages with active states\n */\n\nimport Router from '../core/Router.js';\n\nexport class Navigation {\n    constructor() {\n        this.currentRoute = null;\n        this.navigationData = {\n            brand: {\n                title: 'StreamGank',\n                subtitle: 'AMBUSH THE BEST VOD TOGETHER',\n                version: 'BETA v1.3'\n            },\n            links: [\n                {\n                    path: '/dashboard',\n                    label: 'Dashboard',\n                    icon: '📊',\n                    description: 'Video generation and queue management'\n                },\n                {\n                    path: '/jobs',\n                    label: 'Jobs',\n                    icon: '📋',\n                    description: 'View all jobs and their status'\n                }\n            ]\n        };\n    }\n\n    /**\n     * Initialize navigation component\n     */\n    init() {\n        this.setupRouterListener();\n    }\n\n    /**\n     * Setup router event listener to update active states\n     */\n    setupRouterListener() {\n        Router.addEventListener('routeChange', (event) => {\n            this.currentRoute = event.detail.path;\n            this.updateActiveStates();\n        });\n    }\n\n    /**\n     * Render navigation bar\n     * @param {Object} options - Navigation options\n     * @returns {string} Navigation HTML\n     */\n    render(options = {}) {\n        const { showBrand = true, showVersion = true, showLogin = true, fixed = false, theme = 'default' } = options;\n\n        return `\n            <nav class=\"streamgank-navbar ${fixed ? 'fixed-top' : ''} ${theme}\">\n                <div class=\"container-fluid\">\n                    <div class=\"row py-2 align-items-center w-100\">\n                        <!-- Brand Section -->\n                        ${showBrand ? this.renderBrand(showVersion) : ''}\n                        \n                        <!-- Navigation Links -->\n                        <div class=\"col-auto navigation-links\">\n                            ${this.renderNavigationLinks()}\n                        </div>\n                        \n                        <!-- Actions Section -->\n                        <div class=\"col-auto ms-auto\">\n                            <div class=\"navbar-actions d-flex align-items-center gap-2\">\n                                ${this.renderStatusIndicator()}\n                                ${this.renderQuickActions()}\n                                ${showLogin ? this.renderLoginButton() : ''}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        `;\n    }\n\n    /**\n     * Render brand section\n     * @param {boolean} showVersion - Whether to show version\n     * @returns {string} Brand HTML\n     */\n    renderBrand(showVersion) {\n        return `\n            <div class=\"col\">\n                <a href=\"/dashboard\" class=\"brand-container d-flex align-items-center text-decoration-none\">\n                    <h1 class=\"brand-title mb-0\">\n                        ${this.navigationData.brand.title}\n                        <span class=\"text-accent\">Gank</span>\n                    </h1>\n                    ${\n                        showVersion\n                            ? `\n                    <span class=\"version-badge ms-2\">${this.navigationData.brand.version}</span>\n                    `\n                            : ''\n                    }\n                </a>\n                <span class=\"brand-subtitle d-block\">${this.navigationData.brand.subtitle}</span>\n            </div>\n        `;\n    }\n\n    /**\n     * Render navigation links\n     * @returns {string} Navigation links HTML\n     */\n    renderNavigationLinks() {\n        return this.navigationData.links\n            .map((link) => {\n                const isActive = this.isActiveRoute(link.path);\n\n                return `\n                <a href=\"${link.path}\" \n                   class=\"nav-link btn ${isActive ? 'btn-primary' : 'btn-outline-primary'} me-2\"\n                   data-route=\"${link.path}\"\n                   title=\"${link.description}\">\n                    <span class=\"nav-icon\">${link.icon}</span>\n                    <span class=\"nav-label\">${link.label}</span>\n                </a>\n            `;\n            })\n            .join('');\n    }\n\n    /**\n     * Render status indicator\n     * @returns {string} Status indicator HTML\n     */\n    renderStatusIndicator() {\n        return `\n            <div class=\"status-indicator d-none d-md-flex align-items-center me-3\">\n                <div class=\"connection-status me-2\" id=\"nav-connection-status\">\n                    <div class=\"status-dot bg-success\" title=\"Connected\"></div>\n                </div>\n                <div class=\"queue-summary\" id=\"nav-queue-summary\">\n                    <small class=\"text-muted\">\n                        Queue: <span id=\"nav-queue-count\" class=\"badge bg-info\">0</span>\n                    </small>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Render quick actions\n     * @returns {string} Quick actions HTML\n     */\n    renderQuickActions() {\n        return `\n            <div class=\"quick-actions d-flex gap-1\">\n                <button class=\"btn btn-outline-secondary btn-sm\" \n                        id=\"nav-refresh-btn\"\n                        title=\"Refresh Status\">\n                    🔄\n                </button>\n                <div class=\"dropdown\">\n                    <button class=\"btn btn-outline-secondary btn-sm dropdown-toggle\" \n                            type=\"button\" \n                            data-bs-toggle=\"dropdown\">\n                        ⚙️\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a class=\"dropdown-item\" href=\"#\" onclick=\"toggleQueueDashboard()\">Queue Dashboard</a></li>\n                        <li><a class=\"dropdown-item\" href=\"#\" onclick=\"clearAllLogs()\">Clear Logs</a></li>\n                        <li><hr class=\"dropdown-divider\"></li>\n                        <li><a class=\"dropdown-item\" href=\"#\" onclick=\"showAppStatus()\">App Status</a></li>\n                    </ul>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Render login button\n     * @returns {string} Login button HTML\n     */\n    renderLoginButton() {\n        return `\n            <button class=\"btn btn-primary login-btn\">\n                👤 LOGIN\n            </button>\n        `;\n    }\n\n    /**\n     * Check if route is currently active\n     * @param {string} path - Path to check\n     * @returns {boolean} Whether route is active\n     */\n    isActiveRoute(path) {\n        if (!this.currentRoute) {\n            this.currentRoute = window.location.pathname;\n        }\n\n        // Exact match\n        if (this.currentRoute === path) {\n            return true;\n        }\n\n        // Special cases\n        if (path === '/dashboard' && (this.currentRoute === '/' || this.currentRoute === '')) {\n            return true;\n        }\n\n        if (path === '/jobs' && this.currentRoute.startsWith('/job/')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Update active states after route change\n     */\n    updateActiveStates() {\n        const navLinks = document.querySelectorAll('.nav-link[data-route]');\n\n        navLinks.forEach((link) => {\n            const routePath = link.getAttribute('data-route');\n            const isActive = this.isActiveRoute(routePath);\n\n            if (isActive) {\n                link.classList.remove('btn-outline-primary');\n                link.classList.add('btn-primary');\n            } else {\n                link.classList.remove('btn-primary');\n                link.classList.add('btn-outline-primary');\n            }\n        });\n    }\n\n    /**\n     * Update navigation status indicators\n     * @param {Object} status - Status data\n     */\n    updateStatus(status) {\n        // Update connection status\n        const connectionStatus = document.getElementById('nav-connection-status');\n        if (connectionStatus) {\n            const dot = connectionStatus.querySelector('.status-dot');\n            if (status.connected) {\n                dot.className = 'status-dot bg-success';\n                dot.title = `Connected via ${status.connectionType || 'unknown'}`;\n            } else {\n                dot.className = 'status-dot bg-warning';\n                dot.title = 'Disconnected - using fallback';\n            }\n        }\n\n        // Update queue count\n        const queueCount = document.getElementById('nav-queue-count');\n        if (queueCount && status.queue) {\n            const totalJobs = (status.queue.pending || 0) + (status.queue.processing || 0);\n            queueCount.textContent = totalJobs;\n            queueCount.className = totalJobs > 0 ? 'badge bg-warning' : 'badge bg-info';\n        }\n    }\n\n    /**\n     * Setup navigation event handlers\n     */\n    setupEventHandlers() {\n        // Handle navigation link clicks\n        document.addEventListener('click', (event) => {\n            const navLink = event.target.closest('.nav-link[data-route]');\n            if (navLink) {\n                event.preventDefault();\n                const route = navLink.getAttribute('data-route');\n                Router.navigate(route);\n            }\n        });\n\n        // Handle refresh button\n        const refreshBtn = document.getElementById('nav-refresh-btn');\n        if (refreshBtn) {\n            refreshBtn.addEventListener('click', () => {\n                // Emit refresh event that other components can listen to\n                window.dispatchEvent(new CustomEvent('nav-refresh-requested'));\n            });\n        }\n    }\n\n    /**\n     * Add custom navigation link\n     * @param {Object} linkConfig - Link configuration\n     */\n    addNavigationLink(linkConfig) {\n        this.navigationData.links.push(linkConfig);\n    }\n\n    /**\n     * Remove navigation link\n     * @param {string} path - Path of link to remove\n     */\n    removeNavigationLink(path) {\n        this.navigationData.links = this.navigationData.links.filter((link) => link.path !== path);\n    }\n\n    /**\n     * Get current navigation state\n     * @returns {Object} Navigation state\n     */\n    getState() {\n        return {\n            currentRoute: this.currentRoute,\n            links: this.navigationData.links\n        };\n    }\n\n    /**\n     * Cleanup navigation resources\n     */\n    cleanup() {\n        // Remove event listeners if needed\n        console.log('🧭 Navigation Component cleaned up');\n    }\n}\n\n// Global functions for dropdown actions\nwindow.toggleQueueDashboard = () => {\n    const dashboard = document.getElementById('queue-dashboard');\n    if (dashboard) {\n        dashboard.style.display = dashboard.style.display === 'none' ? 'block' : 'none';\n    }\n};\n\nwindow.clearAllLogs = () => {\n    if (confirm('Clear all status messages?')) {\n        const statusMessages = document.getElementById('status-messages');\n        if (statusMessages) {\n            statusMessages.innerHTML = '';\n        }\n    }\n};\n\nwindow.showAppStatus = () => {\n    // This could open a modal with app status information\n    alert('App Status: OK\\nConnection: Active\\nBuild: Production');\n};\n\n// Export singleton instance\nexport default new Navigation();\n","/**\n * Dashboard Page - Main video generation interface\n * Works with existing HTML structure, doesn't replace it\n */\n\nimport DOMManager from '../core/DOMManager.js';\nimport UIManager from '../components/UIManager.js';\nimport FormManager from '../components/FormManager.js';\nimport RealtimeService from '../services/RealtimeService.js';\n\nexport class DashboardPage {\n    constructor() {\n        this.isInitialized = false;\n    }\n\n    /**\n     * Initialize dashboard page\n     */\n    init() {\n        if (this.isInitialized) {\n            return;\n        }\n\n        // The dashboard uses the existing form and UI managers\n        // which are already initialized in main.js\n        this.isInitialized = true;\n    }\n\n    /**\n     * Activate dashboard functionality with existing HTML\n     * @param {HTMLElement} _container - Container (optional, uses existing DOM)\n     */\n    render(_container) {\n        // Work with existing DOM structure - don't replace it\n        console.log('📊 Dashboard: Activating with existing HTML structure');\n\n        // Re-cache DOM elements from existing structure\n        DOMManager.init();\n\n        // UI Manager init (FormManager already initialized in main.js)\n        UIManager.init();\n\n        // Start real-time updates if not already running\n        if (!RealtimeService.isInitialized) {\n            RealtimeService.init();\n        }\n\n        console.log('📊 Dashboard functionality activated');\n    }\n\n    /**\n     * Handle page activation (when navigated to)\n     */\n    activate() {\n        // Update page title\n        document.title = 'Dashboard - StreamGank Video Generator';\n\n        // Refresh queue status when dashboard becomes active\n        RealtimeService.refreshStatus();\n\n        console.log('📊 Dashboard activated');\n    }\n\n    /**\n     * Handle page deactivation (when navigating away)\n     */\n    deactivate() {\n        // Optional cleanup when leaving dashboard\n        console.log('📊 Dashboard deactivated');\n    }\n\n    /**\n     * Get current dashboard state\n     * @returns {Object} Dashboard state\n     */\n    getState() {\n        const hasFormManager = FormManager && typeof FormManager.getFormData === 'function';\n        const hasUIManager = UIManager && typeof UIManager.getState === 'function';\n\n        return {\n            initialized: this.isInitialized,\n            formData: hasFormManager ? FormManager.getFormData() : null,\n            uiState: hasUIManager ? UIManager.getState() : null\n        };\n    }\n\n    /**\n     * Cleanup dashboard resources\n     */\n    cleanup() {\n        this.isInitialized = false;\n        console.log('📊 Dashboard Page cleaned up');\n    }\n}\n\n// Export singleton instance\nexport default new DashboardPage();\n","/**\n * JobDetail Page - Individual job information and monitoring\n * Shows detailed job progress, logs, and results\n */\n\nimport UIManager from '../components/UIManager.js';\nimport APIService from '../services/APIService.js';\nimport JobManager from '../services/JobManager.js';\n\nexport class JobDetailPage {\n    constructor() {\n        this.currentJobId = null;\n        this.jobData = null;\n        this.refreshTimer = null;\n        this.refreshInterval = 5000; // 5 seconds\n    }\n\n    /**\n     * Render the job detail page\n     * @param {HTMLElement} container - Container to render into\n     * @param {Object} params - Route parameters (contains jobId)\n     */\n    async render(container, params = {}) {\n        const { jobId } = params;\n\n        if (!container) {\n            console.error('📄 JobDetail: No container provided');\n            return;\n        }\n\n        if (!jobId) {\n            console.error('📄 JobDetail: No job ID provided');\n            this.renderError(container, 'No job ID specified');\n            return;\n        }\n\n        this.currentJobId = jobId;\n\n        // Show loading state first\n        container.innerHTML = this.createLoadingTemplate();\n\n        try {\n            // Fetch job data\n            await this.loadJobData(jobId);\n\n            // Render job details\n            container.innerHTML = this.createJobTemplate();\n\n            // Start auto-refresh for active jobs\n            this.startAutoRefresh();\n\n            console.log(`📄 JobDetail rendered for job: ${jobId}`);\n        } catch (error) {\n            console.error('📄 JobDetail render error:', error);\n            this.renderError(container, error.message);\n        }\n    }\n\n    /**\n     * Load job data from API or local storage\n     * @param {string} jobId - Job ID to load\n     */\n    async loadJobData(jobId) {\n        try {\n            // First try to get from JobManager (active jobs)\n            let job = JobManager.getJob(jobId);\n\n            if (!job) {\n                // If not in JobManager, try API\n                const response = await APIService.getJobStatus(jobId);\n                if (response.success) {\n                    job = response.job;\n                }\n            }\n\n            if (!job) {\n                throw new Error(`Job ${jobId} not found`);\n            }\n\n            this.jobData = job;\n\n            // Update page title\n            document.title = `Job ${jobId} - StreamGank`;\n        } catch (error) {\n            throw new Error(`Failed to load job data: ${error.message}`);\n        }\n    }\n\n    /**\n     * Create loading template\n     * @returns {string} Loading HTML\n     */\n    createLoadingTemplate() {\n        return `\n            <div class=\"job-detail-page\">\n                <div class=\"container-fluid\">\n                    <!-- Header with navigation -->\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                        <div>\n                            <button class=\"btn btn-outline-secondary me-3\" onclick=\"history.back()\">\n                                ← Back\n                            </button>\n                            <h1 class=\"h3 mb-0\">Loading Job...</h1>\n                        </div>\n                        <div class=\"nav-links\">\n                            <a href=\"/dashboard\" class=\"btn btn-outline-primary me-2\">Dashboard</a>\n                        </div>\n                    </div>\n                    \n                    <!-- Loading State -->\n                    <div class=\"text-center py-5\">\n                        <div class=\"spinner-border text-primary\" role=\"status\">\n                            <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n                        <p class=\"mt-3 text-muted\">Loading job details...</p>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Create main job detail template\n     * @returns {string} Job detail HTML\n     */\n    createJobTemplate() {\n        const job = this.jobData;\n        const statusClass = this.getStatusClass(job.status);\n        const statusIcon = this.getStatusIcon(job.status);\n\n        return `\n            <div class=\"job-detail-page\">\n                <div class=\"container-fluid\">\n                    <!-- Header with navigation and actions -->\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                        <div>\n                            <button class=\"btn btn-outline-secondary me-3\" onclick=\"history.back()\">\n                                ← Back\n                            </button>\n                            <h1 class=\"h3 mb-0\">Job ${job.id}</h1>\n                            <div class=\"mt-1\">\n                                <span class=\"badge ${statusClass} me-2\">${statusIcon} ${job.status.toUpperCase()}</span>\n                                <small class=\"text-muted\">Created: ${this.formatDate(job.createdAt)}</small>\n                            </div>\n                        </div>\n                        <div class=\"nav-links\">\n                            <a href=\"/dashboard\" class=\"btn btn-outline-primary me-2\">Dashboard</a>\n                            ${this.createActionButtons(job)}\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <!-- Left Column - Job Information -->\n                        <div class=\"col-md-6\">\n                            <!-- Job Parameters -->\n                            <div class=\"card mb-4\">\n                                <div class=\"card-header\">\n                                    <h5 class=\"mb-0\">📋 Job Parameters</h5>\n                                </div>\n                                <div class=\"card-body\">\n                                    <dl class=\"row mb-0\">\n                                        <dt class=\"col-sm-4\">Country:</dt>\n                                        <dd class=\"col-sm-8\">${job.params?.country || 'N/A'}</dd>\n                                        \n                                        <dt class=\"col-sm-4\">Platform:</dt>\n                                        <dd class=\"col-sm-8\">${job.params?.platform || 'N/A'}</dd>\n                                        \n                                        <dt class=\"col-sm-4\">Genre:</dt>\n                                        <dd class=\"col-sm-8\">${job.params?.genre || 'N/A'}</dd>\n                                        \n                                        <dt class=\"col-sm-4\">Content Type:</dt>\n                                        <dd class=\"col-sm-8\">${job.params?.contentType || 'N/A'}</dd>\n                                        \n                                        <dt class=\"col-sm-4\">Template:</dt>\n                                        <dd class=\"col-sm-8\">${job.params?.template || 'Default'}</dd>\n                                        \n                                        ${\n                                            job.params?.url\n                                                ? `\n                                        <dt class=\"col-sm-4\">Source URL:</dt>\n                                        <dd class=\"col-sm-8\">\n                                            <a href=\"${job.params.url}\" target=\"_blank\" class=\"text-break\">\n                                                ${job.params.url}\n                                            </a>\n                                        </dd>\n                                        `\n                                                : ''\n                                        }\n                                    </dl>\n                                </div>\n                            </div>\n\n                            <!-- Job Timeline -->\n                            <div class=\"card mb-4\">\n                                <div class=\"card-header\">\n                                    <h5 class=\"mb-0\">⏱️ Timeline</h5>\n                                </div>\n                                <div class=\"card-body\">\n                                    ${this.createTimeline(job)}\n                                </div>\n                            </div>\n\n                            <!-- Video Result (if available) -->\n                            ${job.videoUrl ? this.createVideoResult(job) : ''}\n                        </div>\n\n                        <!-- Right Column - Progress and Status -->\n                        <div class=\"col-md-6\">\n                            <!-- Progress Card -->\n                            <div class=\"card mb-4\">\n                                <div class=\"card-header\">\n                                    <h5 class=\"mb-0\">📊 Progress</h5>\n                                </div>\n                                <div class=\"card-body\">\n                                    <div class=\"mb-3\">\n                                        <div class=\"d-flex justify-content-between mb-1\">\n                                            <span class=\"fw-medium\">${job.currentStep || 'Processing'}</span>\n                                            <span class=\"text-muted\">${job.progress || 0}%</span>\n                                        </div>\n                                        <div class=\"progress\">\n                                            <div class=\"progress-bar ${this.getProgressClass(job.progress)}\" \n                                                 role=\"progressbar\" style=\"width: ${job.progress || 0}%\">\n                                            </div>\n                                        </div>\n                                    </div>\n                                    \n                                    ${\n                                        job.error\n                                            ? `\n                                    <div class=\"alert alert-danger\">\n                                        <h6 class=\"alert-heading\">❌ Error</h6>\n                                        <p class=\"mb-0\">${job.error}</p>\n                                    </div>\n                                    `\n                                            : ''\n                                    }\n                                    \n                                    ${\n                                        job.creatomateId\n                                            ? `\n                                    <div class=\"mt-3\">\n                                        <h6>🎬 Creatomate Render</h6>\n                                        <p class=\"mb-1\">\n                                            <strong>ID:</strong> \n                                            <code>${job.creatomateId}</code>\n                                        </p>\n                                        <button class=\"btn btn-outline-primary btn-sm\" onclick=\"checkCreatomateStatus('${job.creatomateId}')\">\n                                            Check Render Status\n                                        </button>\n                                    </div>\n                                    `\n                                            : ''\n                                    }\n                                </div>\n                            </div>\n\n                            <!-- Queue Information -->\n                            <div class=\"card mb-4\">\n                                <div class=\"card-header\">\n                                    <h5 class=\"mb-0\">📋 Queue Information</h5>\n                                </div>\n                                <div class=\"card-body\">\n                                    <dl class=\"row mb-0\">\n                                        <dt class=\"col-sm-6\">Queue Position:</dt>\n                                        <dd class=\"col-sm-6\">${job.queuePosition || 'N/A'}</dd>\n                                        \n                                        <dt class=\"col-sm-6\">Processing Time:</dt>\n                                        <dd class=\"col-sm-6\">${this.calculateDuration(job)}</dd>\n                                        \n                                        <dt class=\"col-sm-6\">Last Updated:</dt>\n                                        <dd class=\"col-sm-6\">${this.formatDate(job.updatedAt || job.createdAt)}</dd>\n                                    </dl>\n                                </div>\n                            </div>\n\n                            <!-- Status Messages -->\n                            <div class=\"card\">\n                                <div class=\"card-header\">\n                                    <h5 class=\"mb-0\">📝 Status Messages</h5>\n                                </div>\n                                <div class=\"card-body\">\n                                    <div id=\"job-status-messages\" class=\"status-messages\" style=\"max-height: 300px; overflow-y: auto;\">\n                                        <!-- Status messages will be populated here -->\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Create action buttons based on job status\n     * @param {Object} job - Job data\n     * @returns {string} Action buttons HTML\n     */\n    createActionButtons(job) {\n        const buttons = [];\n\n        if (job.status === 'processing' || job.status === 'pending') {\n            buttons.push(`\n                <button class=\"btn btn-warning me-2\" onclick=\"cancelJob('${job.id}')\">\n                    ⏹️ Cancel Job\n                </button>\n            `);\n        }\n\n        if (job.status === 'failed') {\n            buttons.push(`\n                <button class=\"btn btn-primary me-2\" onclick=\"retryJob('${job.id}')\">\n                    🔄 Retry Job\n                </button>\n            `);\n        }\n\n        buttons.push(`\n            <button class=\"btn btn-outline-secondary me-2\" onclick=\"refreshJobData('${job.id}')\">\n                🔄 Refresh\n            </button>\n        `);\n\n        return buttons.join('');\n    }\n\n    /**\n     * Create timeline HTML\n     * @param {Object} job - Job data\n     * @returns {string} Timeline HTML\n     */\n    createTimeline(job) {\n        const events = [];\n\n        events.push({\n            time: job.createdAt,\n            status: 'created',\n            message: 'Job created and queued'\n        });\n\n        if (job.startedAt) {\n            events.push({\n                time: job.startedAt,\n                status: 'started',\n                message: 'Job processing started'\n            });\n        }\n\n        if (job.completedAt) {\n            events.push({\n                time: job.completedAt,\n                status: 'completed',\n                message: 'Job completed successfully'\n            });\n        }\n\n        return events\n            .map(\n                (event) => `\n            <div class=\"timeline-item mb-3\">\n                <div class=\"d-flex align-items-start\">\n                    <div class=\"timeline-icon me-3\">\n                        ${this.getStatusIcon(event.status)}\n                    </div>\n                    <div class=\"timeline-content\">\n                        <p class=\"mb-1 fw-medium\">${event.message}</p>\n                        <small class=\"text-muted\">${this.formatDate(event.time)}</small>\n                    </div>\n                </div>\n            </div>\n        `\n            )\n            .join('');\n    }\n\n    /**\n     * Create video result section\n     * @param {Object} job - Job data\n     * @returns {string} Video result HTML\n     */\n    createVideoResult(job) {\n        return `\n            <div class=\"card mb-4\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\">🎬 Video Result</h5>\n                </div>\n                <div class=\"card-body\">\n                    <video controls class=\"w-100 mb-3\" style=\"max-height: 400px;\">\n                        <source src=\"${job.videoUrl}\" type=\"video/mp4\">\n                        Your browser does not support the video tag.\n                    </video>\n                    <div class=\"d-flex gap-2\">\n                        <a href=\"${job.videoUrl}\" target=\"_blank\" class=\"btn btn-primary\">\n                            🔗 Open Video\n                        </a>\n                        <a href=\"${job.videoUrl}\" download class=\"btn btn-outline-secondary\">\n                            💾 Download\n                        </a>\n                        <button class=\"btn btn-outline-info\" onclick=\"copyToClipboard('${job.videoUrl}')\">\n                            📋 Copy URL\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Start auto-refresh timer for active jobs\n     */\n    startAutoRefresh() {\n        this.stopAutoRefresh();\n\n        if (this.jobData && ['pending', 'processing'].includes(this.jobData.status)) {\n            this.refreshTimer = setInterval(() => {\n                this.refreshJobData(this.currentJobId);\n            }, this.refreshInterval);\n\n            console.log(`📄 Auto-refresh started for job ${this.currentJobId}`);\n        }\n    }\n\n    /**\n     * Stop auto-refresh timer\n     */\n    stopAutoRefresh() {\n        if (this.refreshTimer) {\n            clearInterval(this.refreshTimer);\n            this.refreshTimer = null;\n        }\n    }\n\n    /**\n     * Refresh job data\n     * @param {string} jobId - Job ID to refresh\n     */\n    async refreshJobData(jobId) {\n        try {\n            await this.loadJobData(jobId);\n\n            // Re-render if we're still on the same job\n            if (this.currentJobId === jobId) {\n                const container = document.querySelector('.job-detail-page').parentElement;\n                await this.render(container, { jobId });\n            }\n        } catch (error) {\n            console.error('📄 Failed to refresh job data:', error);\n        }\n    }\n\n    /**\n     * Render error state\n     * @param {HTMLElement} container - Container element\n     * @param {string} message - Error message\n     */\n    renderError(container, message) {\n        container.innerHTML = `\n            <div class=\"job-detail-page\">\n                <div class=\"container-fluid\">\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                        <div>\n                            <button class=\"btn btn-outline-secondary me-3\" onclick=\"history.back()\">\n                                ← Back\n                            </button>\n                            <h1 class=\"h3 mb-0\">Job Not Found</h1>\n                        </div>\n                        <div class=\"nav-links\">\n                            <a href=\"/dashboard\" class=\"btn btn-outline-primary me-2\">Dashboard</a>\n                        </div>\n                    </div>\n                    \n                    <div class=\"alert alert-danger\">\n                        <h4 class=\"alert-heading\">❌ Error</h4>\n                        <p class=\"mb-0\">${message}</p>\n                        <hr>\n                        <a href=\"/dashboard\" class=\"btn btn-primary\">Return to Dashboard</a>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Handle page activation\n     */\n    activate(params) {\n        console.log(`📄 JobDetail activated for job: ${params.jobId}`);\n    }\n\n    /**\n     * Handle page deactivation\n     */\n    deactivate() {\n        this.stopAutoRefresh();\n        console.log('📄 JobDetail deactivated');\n    }\n\n    /**\n     * Get status CSS class\n     * @param {string} status - Job status\n     * @returns {string} CSS class\n     */\n    getStatusClass(status) {\n        const classes = {\n            pending: 'bg-warning',\n            processing: 'bg-info',\n            completed: 'bg-success',\n            failed: 'bg-danger',\n            cancelled: 'bg-secondary'\n        };\n        return classes[status] || 'bg-secondary';\n    }\n\n    /**\n     * Get status icon\n     * @param {string} status - Job status\n     * @returns {string} Icon\n     */\n    getStatusIcon(status) {\n        const icons = {\n            created: '➕',\n            started: '▶️',\n            pending: '⏳',\n            processing: '🔄',\n            completed: '✅',\n            failed: '❌',\n            cancelled: '⏹️'\n        };\n        return icons[status] || '📄';\n    }\n\n    /**\n     * Get progress bar CSS class\n     * @param {number} progress - Progress percentage\n     * @returns {string} CSS class\n     */\n    getProgressClass(progress) {\n        if (progress >= 100) {\n            return 'bg-success';\n        }\n        if (progress >= 75) {\n            return 'bg-info';\n        }\n        if (progress >= 50) {\n            return 'bg-warning';\n        }\n        return 'bg-primary';\n    }\n\n    /**\n     * Format date for display\n     * @param {string} dateString - ISO date string\n     * @returns {string} Formatted date\n     */\n    formatDate(dateString) {\n        if (!dateString) {\n            return 'N/A';\n        }\n        return new Date(dateString).toLocaleString();\n    }\n\n    /**\n     * Calculate job duration\n     * @param {Object} job - Job data\n     * @returns {string} Duration string\n     */\n    calculateDuration(job) {\n        if (!job.startedAt) {\n            return 'Not started';\n        }\n\n        const start = new Date(job.startedAt);\n        const end = job.completedAt ? new Date(job.completedAt) : new Date();\n        const duration = end - start;\n\n        return UIManager.formatDuration(duration);\n    }\n\n    /**\n     * Cleanup resources\n     */\n    cleanup() {\n        this.stopAutoRefresh();\n        console.log('📄 JobDetail Page cleaned up');\n    }\n}\n\n// Global functions for button actions (called from template)\nwindow.cancelJob = async (jobId) => {\n    if (confirm('Are you sure you want to cancel this job?')) {\n        try {\n            const result = await JobManager.cancelJob(jobId);\n            if (result) {\n                location.reload();\n            }\n        } catch (error) {\n            alert(`Failed to cancel job: ${error.message}`);\n        }\n    }\n};\n\nwindow.retryJob = (_jobId) => {\n    alert('Retry functionality not yet implemented');\n};\n\nwindow.refreshJobData = (_jobId) => {\n    location.reload();\n};\n\nwindow.checkCreatomateStatus = async (creatomateId) => {\n    try {\n        const result = await APIService.getCreatomateStatus(creatomateId);\n        if (result.success) {\n            alert(`Creatomate Status: ${result.status}\\nProgress: ${result.progress || 'N/A'}%`);\n        } else {\n            alert(`Error: ${result.message}`);\n        }\n    } catch (error) {\n        alert(`Error checking status: ${error.message}`);\n    }\n};\n\nwindow.copyToClipboard = async (text) => {\n    try {\n        await navigator.clipboard.writeText(text);\n        alert('URL copied to clipboard!');\n    } catch (error) {\n        alert('Failed to copy URL');\n    }\n};\n\n// Export singleton instance\nexport default new JobDetailPage();\n","/**\n * StreamGank Video Generator - Professional Modular Frontend\n * Main Application Entry Point\n *\n * This is the core orchestrator that initializes and coordinates all modules:\n * - DOM Management (Element caching and manipulation)\n * - API Communication (HTTP client with caching and retry logic)\n * - Real-time Updates (SSE with polling fallback)\n * - Job Management (Video generation lifecycle)\n * - UI Management (Status messages, progress, video display)\n * - Form Management (Validation, dynamic updates, preview)\n */\n\n// Main entry point - modular system loading\n\n// Core modules\nimport DOMManager from './core/DOMManager.js';\nimport Router from './core/Router.js';\n\n// Service modules\nimport APIService from './services/APIService.js';\nimport RealtimeService from './services/RealtimeService.js';\nimport JobManager from './services/JobManager.js';\n\n// Component modules\nimport UIManager from './components/UIManager.js';\nimport FormManager from './components/FormManager.js';\nimport ProcessTable from './components/ProcessTable.js';\nimport Navigation from './components/Navigation.js';\n\n// Page modules\nimport DashboardPage from './pages/Dashboard.js';\nimport JobDetailPage from './pages/JobDetail.js';\n\n/**\n * Main Application Class - Orchestrates all modules\n */\nclass StreamGankApp {\n    constructor() {\n        this.isInitialized = false;\n        this.currentPage = null;\n        this.appContainer = null;\n        this.modules = {\n            dom: DOMManager,\n            router: Router,\n            api: APIService,\n            realtime: RealtimeService,\n            jobs: JobManager,\n            ui: UIManager,\n            form: FormManager,\n            navigation: Navigation\n        };\n        this.pages = {\n            dashboard: DashboardPage,\n            jobDetail: JobDetailPage\n        };\n    }\n\n    /**\n     * Initialize the entire application\n     */\n    async init() {\n        if (this.isInitialized) {\n            console.warn('⚠️ App already initialized');\n            return;\n        }\n\n        try {\n            // Phase 1: Initialize core systems\n            await this.initializeCore();\n\n            // Phase 2: Setup application container\n            this.setupAppContainer();\n\n            // Phase 3: Initialize routing system\n            this.setupRouting();\n\n            // Phase 4: Initialize services\n            await this.initializeServices();\n\n            // Phase 5: Initialize components\n            await this.initializeComponents();\n\n            // Phase 6: Setup cross-module event handlers\n            this.setupEventHandlers();\n\n            // Phase 7: Start routing and real-time services\n            this.startServices();\n\n            this.isInitialized = true;\n\n            // Application is ready - no need for status message spam\n        } catch (error) {\n            console.error('❌ Failed to initialize app:', error);\n            this.handleInitializationError(error);\n        }\n    }\n\n    /**\n     * Phase 1: Initialize core systems\n     */\n    async initializeCore() {\n        // Initialize DOM manager (must be first)\n        DOMManager.init();\n    }\n\n    /**\n     * Phase 2: Setup application container\n     */\n    setupAppContainer() {\n        // Use the existing HTML structure - DON'T replace it\n        this.appContainer = document.body;\n\n        // Find existing main content area or use body\n        this.mainContent =\n            document.querySelector('.main-content') || document.querySelector('.container-fluid') || this.appContainer;\n    }\n\n    /**\n     * Phase 3: Setup routing system\n     */\n    setupRouting() {\n        // Define routes\n        Router.addRoute('/', () => this.renderPage('dashboard'), {\n            title: 'Dashboard - StreamGank Video Generator'\n        });\n\n        Router.addRoute('/dashboard', () => this.renderPage('dashboard'), {\n            title: 'Dashboard - StreamGank Video Generator'\n        });\n\n        Router.addRoute('/job/:jobId', (params) => this.renderPage('jobDetail', params), {\n            title: 'Job Details - StreamGank Video Generator'\n        });\n\n        Router.addRoute('/jobs', () => this.renderJobsPage(), {\n            title: 'All Jobs - StreamGank Video Generator'\n        });\n\n        // Setup router event handlers\n        Router.addEventListener('routeChange', (event) => {});\n\n        Router.addEventListener('notFound', (event) => {\n            console.warn(`🛤️ Route not found: ${event.detail.path}`);\n            // Redirect to dashboard for unknown routes\n            Router.navigate('/dashboard', { replace: true });\n        });\n    }\n\n    /**\n     * Phase 4: Initialize services\n     */\n    async initializeServices() {\n        // API Service is ready by default (no async init needed)\n\n        // Initialize Job Manager\n        JobManager.init();\n    }\n\n    /**\n     * Phase 5: Initialize components\n     */\n    async initializeComponents() {\n        // Initialize Navigation Component\n        Navigation.init();\n\n        // Initialize Process Table Component\n        await ProcessTable.init();\n\n        // Initialize page components\n        DashboardPage.init();\n\n        // JobDetail page initialized when needed\n    }\n\n    /**\n     * Phase 4: Setup cross-module event handlers\n     */\n    setupEventHandlers() {\n        // Form submission -> Job creation (only for dashboard page)\n        document.addEventListener('formSubmit', (event) => {\n            this.handleFormSubmission(event.detail);\n        });\n\n        // Job events -> UI updates\n        JobManager.addEventListener('jobStarted', (event) => {\n            console.log('💼 Job started:', event.detail.job.id);\n        });\n\n        JobManager.addEventListener('jobCompleted', (event) => {\n            console.log('✅ Job completed:', event.detail.job.id);\n        });\n\n        JobManager.addEventListener('jobFailed', (event) => {\n            console.error('❌ Job failed:', event.detail.job.id, event.detail.error);\n        });\n\n        // Realtime connection events\n        RealtimeService.addEventListener('connected', (event) => {\n            console.log('📡 Real-time connection established:', event.detail.type);\n\n            // Update navigation status\n            Navigation.updateStatus({\n                connected: true,\n                connectionType: event.detail.type\n            });\n        });\n\n        RealtimeService.addEventListener('disconnected', (event) => {\n            console.warn('📡 Real-time connection lost:', event.detail.type);\n\n            // Update navigation status\n            Navigation.updateStatus({\n                connected: false,\n                connectionType: event.detail.type\n            });\n        });\n\n        RealtimeService.addEventListener('queueUpdate', (event) => {\n            // Update navigation with queue info\n            Navigation.updateStatus({\n                connected: true,\n                queue: event.detail.stats\n            });\n        });\n\n        // Navigation refresh requests\n        window.addEventListener('nav-refresh-requested', () => {\n            RealtimeService.refreshStatus();\n        });\n\n        // Setup navigation event handlers\n        Navigation.setupEventHandlers();\n    }\n\n    /**\n     * Setup button event handlers\n     */\n    setupButtonHandlers() {\n        // Refresh queue status button\n        const refreshQueueBtn = DOMManager.get('refreshQueueBtn');\n        if (refreshQueueBtn) {\n            refreshQueueBtn.addEventListener('click', () => {\n                RealtimeService.refreshStatus();\n            });\n        }\n\n        // Clear queue button\n        const clearQueueBtn = DOMManager.get('clearQueueBtn');\n        if (clearQueueBtn) {\n            clearQueueBtn.addEventListener('click', async () => {\n                if (confirm('Are you sure you want to clear the entire queue? This will cancel all pending jobs.')) {\n                    try {\n                        const result = await APIService.clearQueue();\n\n                        if (result.success) {\n                            UIManager.addStatusMessage('success', '✅', 'Queue cleared successfully');\n                        } else {\n                            UIManager.addStatusMessage('error', '❌', 'Failed to clear queue');\n                        }\n                    } catch (error) {\n                        UIManager.addStatusMessage('error', '❌', `Error clearing queue: ${error.message}`);\n                    }\n                }\n            });\n        }\n\n        // Check status button (for manual Creatomate status check)\n        const checkStatusBtn = DOMManager.get('checkStatusBtn');\n        if (checkStatusBtn) {\n            checkStatusBtn.addEventListener('click', () => {\n                this.handleManualStatusCheck();\n            });\n        }\n\n        // Load video button (for manual video loading)\n        const loadVideoBtn = DOMManager.get('loadVideoBtn');\n        if (loadVideoBtn) {\n            loadVideoBtn.addEventListener('click', () => {\n                this.handleManualVideoLoad();\n            });\n        }\n    }\n\n    /**\n     * Phase 7: Start routing and real-time services\n     */\n    startServices() {\n        // Initialize Router (must be after routes are defined)\n        Router.init();\n\n        // Initialize real-time connection (SSE with polling fallback)\n        RealtimeService.init();\n    }\n\n    // === Page Rendering Methods ===\n\n    /**\n     * Render a page (activate page without replacing HTML)\n     * @param {string} pageName - Name of the page to render\n     * @param {Object} params - Route parameters\n     */\n    async renderPage(pageName, params = {}) {\n        try {\n            // Deactivate current page\n            if (this.currentPage && this.pages[this.currentPage]) {\n                if (typeof this.pages[this.currentPage].deactivate === 'function') {\n                    this.pages[this.currentPage].deactivate();\n                }\n            }\n\n            // For dashboard, just activate the existing functionality\n            if (pageName === 'dashboard') {\n                // Initialize UI and Form managers with existing DOM\n                UIManager.init();\n                await FormManager.init();\n\n                // Expose FormManager for debugging\n                window.FormManager = FormManager;\n\n                // Activate dashboard functionality\n                if (this.pages[pageName] && typeof this.pages[pageName].activate === 'function') {\n                    this.pages[pageName].activate(params);\n                }\n\n                this.currentPage = pageName;\n            } else if (pageName === 'jobDetail') {\n                // For job detail, render in a modal or dedicated container\n                await this.renderJobDetailPage(params);\n                this.currentPage = pageName;\n            } else {\n                throw new Error(`Page '${pageName}' not found`);\n            }\n        } catch (error) {\n            console.error(`🎨 Failed to render page '${pageName}':`, error);\n            alert(`Error: ${error.message}`);\n        }\n    }\n\n    /**\n     * Render job detail in a modal or overlay\n     * @param {Object} params - Route parameters\n     */\n    async renderJobDetailPage(params) {\n        const { jobId } = params;\n\n        // Create modal overlay for job details\n        const modalHtml = `\n            <div class=\"modal fade\" id=\"jobDetailModal\" tabindex=\"-1\" aria-labelledby=\"jobDetailModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog modal-xl\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"jobDetailModalLabel\">Job ${jobId}</h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                        </div>\n                        <div class=\"modal-body\" id=\"jobDetailContent\">\n                            <div class=\"text-center py-4\">\n                                <div class=\"spinner-border\" role=\"status\">\n                                    <span class=\"visually-hidden\">Loading...</span>\n                                </div>\n                                <p class=\"mt-3\">Loading job details...</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Add modal to DOM if it doesn't exist\n        let modal = document.getElementById('jobDetailModal');\n        if (!modal) {\n            document.body.insertAdjacentHTML('beforeend', modalHtml);\n            modal = document.getElementById('jobDetailModal');\n        }\n\n        // Show modal\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Load job detail content\n        try {\n            const contentDiv = document.getElementById('jobDetailContent');\n            if (this.pages.jobDetail && typeof this.pages.jobDetail.render === 'function') {\n                await this.pages.jobDetail.render(contentDiv, params);\n            }\n        } catch (error) {\n            console.error('Failed to load job details:', error);\n            document.getElementById('jobDetailContent').innerHTML = `\n                <div class=\"alert alert-danger\">\n                    <h6>Error</h6>\n                    <p>Failed to load job details: ${error.message}</p>\n                </div>\n            `;\n        }\n\n        // Handle modal close - go back to dashboard\n        modal.addEventListener('hidden.bs.modal', () => {\n            Router.navigate('/dashboard');\n        });\n    }\n\n    /**\n     * Render jobs list page (simple implementation)\n     */\n    renderJobsPage() {\n        const appContent = document.getElementById('app-content');\n        if (!appContent) return;\n\n        appContent.innerHTML = `\n            <div class=\"jobs-page\">\n                <div class=\"container-fluid\">\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                        <h1 class=\"h3\">All Jobs</h1>\n                        <div class=\"nav-links\">\n                            <a href=\"/dashboard\" class=\"btn btn-outline-primary me-2\">Dashboard</a>\n                        </div>\n                    </div>\n                    \n                    <div class=\"alert alert-info\">\n                        <h4 class=\"alert-heading\">🚧 Under Construction</h4>\n                        <p class=\"mb-0\">\n                            The jobs page is coming soon! For now, you can view individual jobs by visiting \n                            <code>/job/[job-id]</code> or return to the \n                            <a href=\"/dashboard\" class=\"alert-link\">Dashboard</a>.\n                        </p>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        console.log('🎨 Jobs page rendered (placeholder)');\n    }\n\n    /**\n     * Render error page\n     * @param {HTMLElement} container - Container to render into\n     * @param {string} message - Error message\n     */\n    renderErrorPage(container, message) {\n        container.innerHTML = `\n            <div class=\"error-page\">\n                <div class=\"container-fluid\">\n                    <div class=\"text-center py-5\">\n                        <h1 class=\"h2 text-danger\">⚠️ Error</h1>\n                        <p class=\"lead\">${message}</p>\n                        <div class=\"mt-4\">\n                            <a href=\"/dashboard\" class=\"btn btn-primary\">Return to Dashboard</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    // === Event Handler Methods ===\n\n    /**\n     * Handle form submission and start video generation\n     * @param {Object} data - Form submission data\n     */\n    async handleFormSubmission(data) {\n        const { formData, previewUrl, validation } = data;\n\n        console.log('📋 Form submitted:', formData);\n\n        try {\n            // Prepare generation parameters\n            const generationParams = {\n                country: formData.country,\n                platform: formData.platform,\n                genre: formData.genre,\n                template: formData.template,\n                contentType: formData.contentType,\n                url: previewUrl\n            };\n\n            // Start video generation via Job Manager\n            await JobManager.startVideoGeneration(generationParams);\n\n            // IMMEDIATE DASHBOARD UPDATE: Refresh dashboard to show the new job\n            console.log('🔄 Refreshing dashboard to show new job...');\n            if (window.ProcessTable && typeof window.ProcessTable.loadRecentJobs === 'function') {\n                setTimeout(() => {\n                    window.ProcessTable.loadRecentJobs();\n                }, 1000); // Give the job 1 second to be created\n            }\n        } catch (error) {\n            console.error('❌ Form submission failed:', error);\n            UIManager.addStatusMessage('error', '❌', `Generation failed: ${error.message}`);\n        }\n    }\n\n    /**\n     * Handle manual status check (for Creatomate renders)\n     */\n    async handleManualStatusCheck() {\n        const creatomateIdDisplay = DOMManager.get('creatomateIdDisplay');\n        if (!creatomateIdDisplay || !creatomateIdDisplay.textContent) {\n            UIManager.addStatusMessage('warning', '⚠️', 'No Creatomate ID available for status check');\n            return;\n        }\n\n        const creatomateId = creatomateIdDisplay.textContent.trim();\n\n        try {\n            UIManager.addStatusMessage('info', '🔍', 'Checking render status...');\n\n            const statusData = await APIService.getCreatomateStatus(creatomateId);\n\n            if (statusData.success && statusData.videoUrl) {\n                UIManager.addStatusMessage('success', '🎬', 'Video is ready!');\n                UIManager.displayVideo({\n                    jobId: `manual-${Date.now()}`,\n                    videoUrl: statusData.videoUrl,\n                    creatomateId: creatomateId\n                });\n            } else if (statusData.success && statusData.status) {\n                const status = statusData.status.charAt(0).toUpperCase() + statusData.status.slice(1);\n                UIManager.addStatusMessage('info', '⏳', `Render status: ${status}`);\n            } else {\n                UIManager.addStatusMessage(\n                    'error',\n                    '❌',\n                    `Status check failed: ${statusData.message || 'Unknown error'}`\n                );\n            }\n        } catch (error) {\n            console.error('❌ Manual status check failed:', error);\n            UIManager.addStatusMessage('error', '❌', `Status check error: ${error.message}`);\n        }\n    }\n\n    /**\n     * Handle manual video loading\n     */\n    handleManualVideoLoad() {\n        const creatomateIdInput = prompt('Enter Creatomate render ID:');\n\n        if (!creatomateIdInput || !creatomateIdInput.trim()) {\n            UIManager.addStatusMessage('warning', '⚠️', 'No render ID provided');\n            return;\n        }\n\n        const creatomateId = creatomateIdInput.trim();\n\n        // Update display and trigger status check\n        const creatomateIdDisplay = DOMManager.get('creatomateIdDisplay');\n        if (creatomateIdDisplay) {\n            creatomateIdDisplay.textContent = creatomateId;\n        }\n\n        UIManager.addStatusMessage('info', '📥', `Loading video for render ID: ${creatomateId}`);\n        this.handleManualStatusCheck();\n    }\n\n    // === Error Handling ===\n\n    /**\n     * Handle app initialization errors\n     * @param {Error} error - Initialization error\n     */\n    handleInitializationError(error) {\n        const errorMsg = `Failed to initialize application: ${error.message}`;\n\n        // Try to show error in UI if possible\n        try {\n            UIManager.addStatusMessage('error', '❌', errorMsg, false);\n        } catch {\n            // Fallback to console and alert if UI isn't available\n            console.error('❌', errorMsg);\n            alert(errorMsg);\n        }\n    }\n\n    // === Utility Methods ===\n\n    /**\n     * Get application status\n     * @returns {Object} Application status\n     */\n    getStatus() {\n        return {\n            initialized: this.isInitialized,\n            modules: Object.fromEntries(\n                Object.entries(this.modules).map(([key, module]) => [\n                    key,\n                    typeof module.getStatus === 'function' ? module.getStatus() : 'ready'\n                ])\n            ),\n            realtime: RealtimeService.getConnectionStatus(),\n            jobs: JobManager.getJobStats(),\n            api: APIService.getCacheStats()\n        };\n    }\n\n    /**\n     * Restart the application\n     */\n    async restart() {\n        console.log('🔄 Restarting application...');\n\n        // Cleanup existing resources\n        this.cleanup();\n\n        // Reset initialization flag\n        this.isInitialized = false;\n\n        // Wait a moment then reinitialize\n        setTimeout(async () => {\n            await this.init();\n        }, 1000);\n    }\n\n    /**\n     * Stop all polling timers to prevent request spam\n     */\n    stopAllPolling() {\n        console.log('🛑 ANTI-SPAM: Stopping all polling timers...');\n\n        // Stop ProcessTable polling\n        if (window.ProcessTable && typeof window.ProcessTable.stopPeriodicUpdates === 'function') {\n            window.ProcessTable.stopPeriodicUpdates();\n        }\n\n        console.log('✅ All polling stopped (anti-spam mode)');\n    }\n\n    /**\n     * Cleanup application resources\n     */\n    cleanup() {\n        console.log('🧹 Cleaning up application resources...');\n\n        // ANTI-SPAM: Stop all polling first\n        this.stopAllPolling();\n\n        // Cleanup modules that support it\n        Object.values(this.modules).forEach((module) => {\n            if (typeof module.cleanup === 'function') {\n                module.cleanup();\n            }\n        });\n\n        console.log('✅ Application cleaned up');\n    }\n}\n\n// === Application Bootstrap ===\n\n// Create app instance\nconst app = new StreamGankApp();\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        app.init();\n    });\n} else {\n    // DOM is already ready\n    app.init();\n}\n\n// Export for global access and debugging\nwindow.StreamGankApp = app;\n\n// Export default for module systems\nexport default app;\n"],"names":["Router","event","path","handler","options","routePattern","replace","state","matchedRoute","route","params","routeKey","previousRoute","error","match","paramName","index","escaped","matches","routePath","url","key","value","pattern","searchParams","eventName","data","Router$1","JobManager","UIManager","result","APIService","job","missing","field","jobId","jobData","previousStatus","previousProgress","attempts","maxAttempts","checkStatus","statusData","status","statusText","messageKey","progressPercent","timeoutKey","message","errorKey","networkErrorKey","entries","toRemove","_a","JobManager$1","FormManager","countrySelect","currentCountry","country","cacheKey","response","templateSelect","template","option","e","platformSelect","refreshPreviewBtn","contentTypeRadios","radio","generateButton","checkedRadio","serieRadio","formData","DOMManager","hasChanges","netflixIndex","i","genreSelect","horrorIndex","countryCode","selectedPlatforms","checkbox","selectedGenres","templateValue","contentType","platforms","platformContainer","platform","checkboxItem","label","defaultPlatforms","platformValue","genres","genreContainer","genre","displayName","genreValue","templateId","genreLower","errors","warnings","validation","warning","previewUrl","urlValidation","movies","container","grid","loading","empty","movie","movieCard","col","card","posterUrl","title","baseUrl","englishGenre","cleanType","element","elementId","select","formManager","ProcessTable","viewButton","cancelButton","deleteButton","processedJob","_b","_c","_d","jobCardsContainer","emptyState","loadingState","jobCountBadge","sortedJobs","a","b","jobCard","cardCol","statusIcon","shortId","duration","startedTime","timeClass","startTime","endTime","durationMs","durationMinutes","durationSeconds","progress","progressColor","cardBorderClass","statusBgClass","jobShortId","jobUpdate","processTableInstance","Navigation","showBrand","showVersion","showLogin","fixed","theme","link","isActive","connectionStatus","dot","queueCount","totalJobs","navLink","refreshBtn","linkConfig","dashboard","statusMessages","Navigation$1","DashboardPage","_container","RealtimeService","hasFormManager","hasUIManager","DashboardPage$1","JobDetailPage","statusClass","_e","_f","buttons","events","dateString","start","_jobId","creatomateId","text","JobDetailPage$1","StreamGankApp","refreshQueueBtn","clearQueueBtn","checkStatusBtn","loadVideoBtn","pageName","modalHtml","modal","contentDiv","appContent","generationParams","creatomateIdDisplay","creatomateIdInput","errorMsg","module","app"],"mappings":"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"}