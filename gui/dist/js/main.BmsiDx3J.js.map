{"version":3,"file":"main.BmsiDx3J.js","sources":["../../src/core/Router.js","../../src/components/FormManager.js","../../src/pages/Dashboard.js","../../src/services/JobManager.js","../../src/pages/JobDetail.js","../../src/pages/QueuePage.js","../../src/main.js"],"sourcesContent":["/**\n * Simple Reliable Router - No Dependencies, Just Works\n * Handles SPA routing, browser history, page reloads, back/forward\n */\n\nclass SimpleRouter {\n    constructor() {\n        this.routes = new Map();\n        this.currentRoute = null;\n        this.isStarted = false;\n\n        console.log('🔧 SimpleRouter created');\n    }\n\n    /**\n     * Add a route\n     */\n    addRoute(path, handler) {\n        console.log(`📝 Adding route: ${path}`);\n\n        // Convert :param to regex\n        const paramNames = [];\n        const regexPath = path.replace(/:([^/]+)/g, (match, paramName) => {\n            paramNames.push(paramName);\n            return '([^/]+)';\n        });\n\n        const regex = new RegExp(`^${regexPath}$`);\n\n        this.routes.set(path, {\n            handler,\n            regex,\n            paramNames,\n            originalPath: path\n        });\n\n        console.log(`✅ Route added: ${path}`);\n    }\n\n    /**\n     * Navigate to a path\n     */\n    navigate(path) {\n        console.log(`🚀 Navigate to: ${path}`);\n\n        // Update browser URL\n        window.history.pushState({}, '', path);\n\n        // Handle the route\n        this.handleRoute(path);\n    }\n\n    /**\n     * Handle current route\n     */\n    handleRoute(path = window.location.pathname) {\n        console.log(`🔍 Handling route: ${path}`);\n\n        // Try to match route\n        for (const [routePath, routeData] of this.routes) {\n            const match = path.match(routeData.regex);\n\n            if (match) {\n                console.log(`✅ Route matched: ${routePath}`);\n\n                // Extract parameters\n                const params = {};\n                routeData.paramNames.forEach((name, index) => {\n                    params[name] = match[index + 1];\n                });\n\n                console.log(`📋 Route params:`, params);\n\n                // Call handler\n                try {\n                    routeData.handler(params);\n                    this.currentRoute = routePath;\n                    return true;\n                } catch (error) {\n                    console.error(`❌ Route handler error:`, error);\n                }\n            }\n        }\n\n        // No route matched\n        console.warn(`❌ No route matched for: ${path}`);\n        this.handle404(path);\n        return false;\n    }\n\n    /**\n     * Handle 404\n     */\n    handle404(path) {\n        console.log(`🔍 404 for path: ${path}`);\n\n        // Redirect to dashboard for unknown routes (avoid infinite loops)\n        if (path !== '/dashboard' && path !== '/' && !path.startsWith('/dashboard')) {\n            console.log(`🏠 Redirecting to dashboard from: ${path}`);\n            this.navigate('/dashboard');\n        } else {\n            console.warn(`❌ Route not found and cannot redirect: ${path}`);\n        }\n    }\n\n    /**\n     * Start the router\n     */\n    start() {\n        if (this.isStarted) {\n            console.warn('⚠️ Router already started');\n            return;\n        }\n\n        console.log('🎬 Starting router...');\n\n        // Handle browser back/forward\n        window.addEventListener('popstate', () => {\n            console.log('🔄 Popstate event');\n            this.handleRoute();\n        });\n\n        // Handle current route\n        this.handleRoute();\n\n        this.isStarted = true;\n        console.log('✅ Router started');\n    }\n}\n\n// Export singleton\nexport default new SimpleRouter();\n","/**\r\n * Form Manager - Professional form handling and validation\r\n * Manages form interactions, validations, dynamic updates, and preview generation\r\n */\r\nimport DOMManager from '../core/DOMManager.js';\r\nimport APIService from '../services/APIService.js';\r\nimport UIManager from './UIManager.js';\r\n\r\nexport class FormManager {\r\n    constructor() {\r\n        this.genresByCountry = {};\r\n        this.templatesByGenre = {};\r\n        this.platformsByCountry = {};\r\n        this.formState = {\r\n            country: '',\r\n            platform: '',\r\n            platforms: [],\r\n            genre: '',\r\n            genres: [],\r\n            template: '',\r\n            contentType: ''\r\n        };\r\n        this.isValidating = false;\r\n        this.validationCache = new Map();\r\n        this.isInitialized = false; // Prevent duplicate initialization\r\n    }\r\n\r\n    /**\r\n     * Initialize Form Manager with data and event listeners\r\n     */\r\n    async init() {\r\n        // Prevent duplicate initialization\r\n        if (this.isInitialized) {\r\n            console.log('📋 FormManager already initialized, skipping...');\r\n            return;\r\n        }\r\n\r\n        await this.loadFormConfiguration();\r\n        this.setupEventListeners();\r\n        this.initializeFormState();\r\n\r\n        this.isInitialized = true;\r\n        console.log('✅ FormManager initialized successfully');\r\n    }\r\n\r\n    /**\r\n     * Load form configuration data (genres, templates, etc.)\r\n     */\r\n    async loadFormConfiguration() {\r\n        // Load static genre data for countries\r\n        this.loadGenresByCountry();\r\n        this.loadTemplatesByGenre();\r\n\r\n        // Initialize platform data from API if needed - MUST AWAIT\r\n        await this.initializePlatformData();\r\n    }\r\n\r\n    /**\r\n     * Load genres by country configuration\r\n     */\r\n    loadGenresByCountry() {\r\n        this.genresByCountry = {\r\n            FR: {\r\n                'Action & Aventure': 'Action & Adventure',\r\n                Animation: 'Animation',\r\n                Comédie: 'Comedy',\r\n                'Crime & Thriller': 'Crime & Thriller',\r\n                Documentaire: 'Documentary',\r\n                Drame: 'Drama',\r\n                Fantastique: 'Fantasy',\r\n                'Film de guerre': 'War Movies',\r\n                Histoire: 'History',\r\n                Horreur: 'Horror',\r\n                'Musique & Musicale': 'Music & Musical',\r\n                'Mystère & Thriller': 'Mystery & Thriller',\r\n                'Pour enfants': 'Kids',\r\n                'Reality TV': 'Reality TV',\r\n                'Réalisé en Europe': 'Made in Europe',\r\n                'Science-Fiction': 'Science Fiction',\r\n                'Sport & Fitness': 'Sport & Fitness',\r\n                Western: 'Western'\r\n            },\r\n            US: {\r\n                'Action & Adventure': 'Action & Adventure',\r\n                Animation: 'Animation',\r\n                Comedy: 'Comedy',\r\n                Crime: 'Crime',\r\n                Documentary: 'Documentary',\r\n                Drama: 'Drama',\r\n                Fantasy: 'Fantasy',\r\n                History: 'History',\r\n                Horror: 'Horror',\r\n                'Kids & Family': 'Kids & Family',\r\n                'Made in Europe': 'Made in Europe',\r\n                'Music & Musical': 'Music & Musical',\r\n                'Mystery & Thriller': 'Mystery & Thriller',\r\n                'Reality TV': 'Reality TV',\r\n                Romance: 'Romance',\r\n                'Science-Fiction': 'Science-Fiction',\r\n                Sport: 'Sport',\r\n                'War & Military': 'War & Military',\r\n                Western: 'Western'\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Load template mappings for genres\r\n     */\r\n    loadTemplatesByGenre() {\r\n        // SINGLE SOURCE OF TRUTH for all HeyGen templates\r\n        this.templates = {\r\n            cc6718c5363e42b282a123f99b94b335: { name: 'Default Template', genres: ['default'] },\r\n            ed21a309a5c84b0d873fde68642adea3: { name: 'Horror', genres: ['Horror'] },\r\n            '7f8db20ddcd94a33a1235599aa8bf473': { name: 'Action Adventure', genres: ['Action & Adventure'] },\r\n            bc62f68a6b074406b571df42bdc6b71a: { name: 'Romance', genres: ['Romance'] }\r\n        };\r\n\r\n        // Create backward-compatible templatesByGenre from single source\r\n        this.templatesByGenre = {};\r\n        Object.entries(this.templates).forEach(([templateId, templateInfo]) => {\r\n            templateInfo.genres.forEach((genre) => {\r\n                this.templatesByGenre[genre] = templateId;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialize platform data\r\n     */\r\n    async initializePlatformData() {\r\n        // Load platforms for current country and populate dropdown\r\n        const countrySelect = document.getElementById('country');\r\n        if (countrySelect) {\r\n            const currentCountry = countrySelect.value || 'US'; // Changed default to US\r\n            await this.updatePlatformDropdown(currentCountry);\r\n        }\r\n\r\n        // Load genres for current country\r\n        const currentCountry = countrySelect ? countrySelect.value : 'US'; // Changed default to US\r\n        await this.updateGenreDropdown(currentCountry);\r\n\r\n        // Load templates\r\n        this.updateTemplateDropdown();\r\n\r\n        // Set defaults once after all dropdowns are populated\r\n        this.setDefaultSelections();\r\n\r\n        // Refresh form state once - all dropdowns are now populated\r\n        this.refreshFormState();\r\n\r\n        // Initialize Generate button as disabled until movies are loaded\r\n        this.disableGenerateButton();\r\n\r\n        console.log('✅ Platform data initialization complete');\r\n    }\r\n\r\n    /**\r\n     * Update platform dropdown for country\r\n     * @param {string} country - Country code\r\n     */\r\n    async updatePlatformDropdown(country) {\r\n        // Prevent duplicate API calls\r\n        const cacheKey = `platforms_${country}`;\r\n        if (this.validationCache.has(cacheKey)) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await APIService.get(`/api/platforms/${country}`);\r\n\r\n            if (response.success && response.platforms) {\r\n                this.populatePlatformSelect(response.platforms);\r\n\r\n                // Only cache after successful population\r\n                this.validationCache.set(cacheKey, true);\r\n                console.log('✅ Platform dropdown update completed');\r\n            } else {\r\n                console.error('❌ Invalid platform API response:', response);\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to load platforms:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update genre dropdown for country\r\n     * @param {string} country - Country code\r\n     */\r\n    async updateGenreDropdown(country) {\r\n        // Prevent duplicate API calls\r\n        const cacheKey = `genres_${country}`;\r\n        if (this.validationCache.has(cacheKey)) {\r\n            console.log(`📋 Using cached genres for ${country}`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log(`📋 Loading genres for ${country}...`);\r\n            const response = await APIService.get(`/api/genres/${country}`);\r\n\r\n            if (response.success && response.genres) {\r\n                console.log(`📋 API returned ${response.genres.length} genres:`, response.genres);\r\n                this.populateGenreSelect(response.genres);\r\n\r\n                // Only cache after successful population\r\n                this.validationCache.set(cacheKey, true);\r\n                console.log('✅ Genre dropdown update completed');\r\n            } else {\r\n                console.error('❌ Invalid genre API response:', response);\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to load genres:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update template dropdown\r\n     */\r\n    updateTemplateDropdown() {\r\n        const templateSelect = document.getElementById('template');\r\n        if (!templateSelect) return;\r\n\r\n        // Clear existing options except first\r\n        templateSelect.innerHTML = '<option value=\"\">Select Template...</option>';\r\n\r\n        // Use single source of truth - this.templates\r\n        Object.entries(this.templates).forEach(([templateId, templateInfo]) => {\r\n            const option = document.createElement('option');\r\n            option.value = templateId;\r\n            option.textContent = templateInfo.name;\r\n            templateSelect.appendChild(option);\r\n        });\r\n\r\n        // Set default selection to Default Template\r\n        templateSelect.value = 'cc6718c5363e42b282a123f99b94b335';\r\n    }\r\n\r\n    /**\r\n     * Setup comprehensive form event listeners\r\n     */\r\n    setupEventListeners() {\r\n        // Prevent duplicate event listeners\r\n        if (this.eventListenersSetup) {\r\n            return;\r\n        }\r\n\r\n        // Country selection - using correct HTML IDs\r\n        const countrySelect = document.getElementById('country');\r\n        if (countrySelect) {\r\n            countrySelect.addEventListener('change', (e) => {\r\n                this.handleCountryChange(e.target.value);\r\n            });\r\n        }\r\n\r\n        // Platform selection\r\n        const platformSelect = document.getElementById('platform');\r\n        if (platformSelect) {\r\n            platformSelect.addEventListener('change', (e) => {\r\n                this.handlePlatformChange(e.target.value);\r\n            });\r\n        }\r\n\r\n        // Genre selection (checkboxes handled in populateGenreSelect)\r\n        // Event listeners are added dynamically when checkboxes are created\r\n\r\n        // Template selection\r\n        const templateSelect = document.getElementById('template');\r\n        if (templateSelect) {\r\n            templateSelect.addEventListener('change', (e) => {\r\n                this.handleTemplateChange(e.target.value);\r\n            });\r\n        }\r\n\r\n        // Movie preview refresh button\r\n        const refreshPreviewBtn = document.getElementById('refresh-preview-btn');\r\n        if (refreshPreviewBtn) {\r\n            refreshPreviewBtn.addEventListener('click', () => {\r\n                this.loadMoviePreview();\r\n            });\r\n        }\r\n\r\n        // Content type radio buttons\r\n        const contentTypeRadios = document.querySelectorAll('input[name=\"contentType\"]');\r\n        if (contentTypeRadios) {\r\n            Array.from(contentTypeRadios).forEach((radio) => {\r\n                radio.addEventListener('change', (e) => {\r\n                    if (e.target.checked) {\r\n                        this.handleContentTypeChange(e.target.value);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        // Form validation on submit\r\n        const generateButton = document.getElementById('generate-video');\r\n        if (generateButton) {\r\n            generateButton.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                this.handleFormSubmit();\r\n            });\r\n        }\r\n\r\n        // Mark event listeners as setup\r\n        this.eventListenersSetup = true;\r\n    }\r\n\r\n    /**\r\n     * Initialize form state from current form values\r\n     */\r\n    initializeFormState() {\r\n        // Ensure US is selected by default\r\n        const countrySelect = document.getElementById('country');\r\n        if (countrySelect && !countrySelect.value) {\r\n            countrySelect.value = 'US';\r\n        }\r\n\r\n        // FORCE contentType initialization - check the Serie radio button if none is checked\r\n        this.ensureContentTypeSelected();\r\n\r\n        console.log('📋 Form state initialization complete');\r\n\r\n        // Note: refreshFormState() will be called next to read all DOM values\r\n        // Note: Platform and genre dropdowns are already populated by initializePlatformData()\r\n    }\r\n\r\n    /**\r\n     * Ensure a contentType radio button is selected (default to Serie/TV Shows)\r\n     */\r\n    ensureContentTypeSelected() {\r\n        const contentTypeRadios = document.querySelectorAll('input[name=\"contentType\"]');\r\n        const checkedRadio = Array.from(contentTypeRadios).find((radio) => radio.checked);\r\n\r\n        console.log('📋 Content Type Radios found:', contentTypeRadios.length);\r\n        console.log('📋 Already checked:', checkedRadio ? checkedRadio.value : 'none');\r\n\r\n        if (!checkedRadio && contentTypeRadios.length > 0) {\r\n            // Find Serie radio button and check it\r\n            const serieRadio = Array.from(contentTypeRadios).find((radio) => radio.value === 'Serie');\r\n            if (serieRadio) {\r\n                serieRadio.checked = true;\r\n                console.log('📋 Force-selected Serie (TV Shows) radio button');\r\n            } else {\r\n                // Fallback - check first radio button\r\n                contentTypeRadios[0].checked = true;\r\n                console.log('📋 Force-selected first radio button:', contentTypeRadios[0].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh form state from current DOM values and set defaults\r\n     */\r\n    refreshFormState() {\r\n        const formData = DOMManager.getFormData();\r\n        Object.assign(this.formState, formData);\r\n\r\n        console.log('📋 Form state updated');\r\n        console.log('📋 Final form data:', this.formState);\r\n\r\n        // Update preview with current state and load initial movie preview\r\n        this.updatePreviewWithMovies();\r\n    }\r\n\r\n    /**\r\n     * Set default selections for dropdowns that are populated but have no selection\r\n     */\r\n    setDefaultSelections() {\r\n        let hasChanges = false;\r\n\r\n        // Set default platform to Netflix if available, otherwise first option\r\n        const platformSelect = document.getElementById('platform');\r\n        if (platformSelect && platformSelect.children.length > 1 && platformSelect.selectedIndex === 0) {\r\n            // Try to find Netflix first\r\n            let netflixIndex = -1;\r\n            for (let i = 1; i < platformSelect.options.length; i++) {\r\n                if (platformSelect.options[i].value.toLowerCase().includes('netflix')) {\r\n                    netflixIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Select Netflix if found, otherwise first non-empty option\r\n            platformSelect.selectedIndex = netflixIndex > 0 ? netflixIndex : 1;\r\n            this.formState.platform = platformSelect.value;\r\n            console.log('📋 Set default platform:', this.formState.platform);\r\n            hasChanges = true;\r\n        }\r\n\r\n        // Set default genre to Horror if available, otherwise first option\r\n        const genreSelect = document.getElementById('genre');\r\n        if (genreSelect && genreSelect.children.length > 1 && genreSelect.selectedIndex === 0) {\r\n            // Try to find Horror first\r\n            let horrorIndex = -1;\r\n            for (let i = 1; i < genreSelect.options.length; i++) {\r\n                if (genreSelect.options[i].value.toLowerCase().includes('horror')) {\r\n                    horrorIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Select Horror if found, otherwise first non-empty option\r\n            genreSelect.selectedIndex = horrorIndex > 0 ? horrorIndex : 1;\r\n            this.formState.genre = genreSelect.value;\r\n            console.log('📋 Set default genre:', this.formState.genre);\r\n            hasChanges = true;\r\n\r\n            // Update templates based on selected genre\r\n            this.updateTemplates(this.formState.genre);\r\n        }\r\n\r\n        // If we made changes, note it (main refresh will read all values after)\r\n        if (hasChanges) {\r\n            console.log('📋 Defaults set');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Manual form state refresh for debugging\r\n     */\r\n    manualRefresh() {\r\n        console.log('📋 Manual form refresh triggered');\r\n        this.refreshFormState();\r\n        return this.formState;\r\n    }\r\n\r\n    // === Form Event Handlers ===\r\n\r\n    /**\r\n     * Handle country selection change\r\n     * @param {string} countryCode - Selected country code\r\n     */\r\n    async handleCountryChange(countryCode) {\r\n        console.log(`📋 Country changed: ${countryCode}`);\r\n\r\n        this.formState.country = countryCode;\r\n\r\n        // Reset dependent fields\r\n        this.resetPlatformSelection();\r\n        this.resetGenreSelection();\r\n        this.resetTemplateSelection();\r\n\r\n        if (countryCode) {\r\n            await this.updatePlatforms(countryCode);\r\n        }\r\n\r\n        this.updatePreview();\r\n    }\r\n\r\n    /**\r\n     * Handle platform selection change\r\n     * @param {string} platformValue - Selected platform value\r\n     */\r\n    async handlePlatformChange() {\r\n        // Handle multiple platform selection with checkboxes\r\n        const selectedPlatforms = [];\r\n        const checkboxes = document.querySelectorAll('input[name=\"platforms\"]:checked');\r\n\r\n        checkboxes.forEach((checkbox) => {\r\n            selectedPlatforms.push(checkbox.value);\r\n        });\r\n\r\n        console.log('📺 Platform selection changed:', selectedPlatforms);\r\n\r\n        this.formState.platforms = selectedPlatforms;\r\n        this.formState.platform = selectedPlatforms[0] || ''; // Keep first platform for backward compatibility\r\n\r\n        // Reset dependent fields\r\n        this.resetGenreSelection();\r\n        this.resetTemplateSelection();\r\n\r\n        // Don't call updateGenres - genres are not platform-dependent\r\n        // Update the preview and reload movies since platform affects movie selection\r\n        this.updatePreviewWithMovies();\r\n    }\r\n\r\n    /**\r\n     * Handle genre checkbox changes (multiple selection)\r\n     */\r\n    handleGenreChange() {\r\n        const selectedGenres = [];\r\n        const checkboxes = document.querySelectorAll('input[name=\"genres\"]:checked');\r\n\r\n        checkboxes.forEach((checkbox) => {\r\n            selectedGenres.push(checkbox.value);\r\n        });\r\n\r\n        console.log('🎭 Genre selection changed:', selectedGenres);\r\n\r\n        this.formState.genres = selectedGenres;\r\n        this.formState.genre = selectedGenres[0] || ''; // Keep first genre for backward compatibility\r\n\r\n        // Reset template selection when genre changes\r\n        this.resetTemplateSelection();\r\n\r\n        if (selectedGenres.length > 0) {\r\n            this.updateTemplates(selectedGenres[0]); // Use first genre for template loading\r\n        }\r\n\r\n        this.updatePreviewWithMovies();\r\n    }\r\n\r\n    /**\r\n     * Handle template selection change\r\n     * @param {string} templateValue - Selected template value\r\n     */\r\n    handleTemplateChange(templateValue) {\r\n        console.log(`📋 Template changed: ${templateValue}`);\r\n\r\n        this.formState.template = templateValue;\r\n        this.updatePreview();\r\n    }\r\n\r\n    /**\r\n     * Handle content type change\r\n     * @param {string} contentType - Selected content type\r\n     */\r\n    handleContentTypeChange(contentType) {\r\n        console.log(`📋 Content type changed: ${contentType}`);\r\n\r\n        this.formState.contentType = contentType;\r\n        this.updatePreviewWithMovies();\r\n    }\r\n\r\n    // === Form Update Methods ===\r\n\r\n    /**\r\n     * Update platforms dropdown based on country\r\n     * @param {string} countryCode - Country code\r\n     */\r\n    async updatePlatforms(countryCode) {\r\n        try {\r\n            const result = await APIService.getPlatforms(countryCode);\r\n\r\n            if (result.success && result.platforms) {\r\n                this.populatePlatformSelect(result.platforms);\r\n            } else {\r\n                this.populateDefaultPlatforms(countryCode);\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to load platforms:', error);\r\n            this.populateDefaultPlatforms(countryCode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Populate platform checkboxes with options\r\n     * @param {Array} platforms - Array of platform strings\r\n     */\r\n    populatePlatformSelect(platforms) {\r\n        const platformContainer = document.getElementById('platform-checkboxes');\r\n        if (!platformContainer) {\r\n            console.error('❌ Platform checkboxes container not found!');\r\n            return;\r\n        }\r\n\r\n        console.log('📋 Populating platforms:', platforms);\r\n\r\n        // Clear existing checkboxes\r\n        platformContainer.innerHTML = '';\r\n\r\n        // Add platform checkboxes\r\n        platforms.forEach((platform, index) => {\r\n            const checkboxItem = document.createElement('div');\r\n            checkboxItem.className = 'checkbox-item';\r\n\r\n            const checkbox = document.createElement('input');\r\n            checkbox.type = 'checkbox';\r\n            checkbox.id = `platform-${index}`;\r\n            checkbox.value = platform;\r\n            checkbox.name = 'platforms';\r\n\r\n            // Pre-select Netflix if available\r\n            if (platform.toLowerCase().includes('netflix')) {\r\n                checkbox.checked = true;\r\n                this.formState.platforms = [platform];\r\n            }\r\n\r\n            const label = document.createElement('label');\r\n            label.htmlFor = `platform-${index}`;\r\n            label.textContent = platform;\r\n\r\n            // Add change event listener\r\n            checkbox.addEventListener('change', (e) => {\r\n                this.handlePlatformChange();\r\n            });\r\n\r\n            checkboxItem.appendChild(checkbox);\r\n            checkboxItem.appendChild(label);\r\n            platformContainer.appendChild(checkboxItem);\r\n        });\r\n\r\n        console.log('✅ Platform checkboxes populated with', platforms.length, 'options');\r\n    }\r\n\r\n    /**\r\n     * Populate default platforms when API fails\r\n     * @param {string} countryCode - Country code\r\n     */\r\n    populateDefaultPlatforms(countryCode) {\r\n        const defaultPlatforms = [\r\n            { value: 'Netflix', name: 'Netflix' },\r\n            { value: 'Prime Video', name: 'Prime Video' },\r\n            { value: 'Disney+', name: 'Disney+' },\r\n            { value: 'Apple TV+', name: 'Apple TV+' },\r\n            { value: 'HBO Max', name: 'HBO Max' }\r\n        ];\r\n\r\n        this.populatePlatformSelect(defaultPlatforms);\r\n    }\r\n\r\n    /**\r\n     * Update genres based on country and platform\r\n     * @param {string} countryCode - Country code\r\n     * @param {string} platformValue - Platform value\r\n     */\r\n    async updateGenres(countryCode, platformValue = null) {\r\n        // Use country-specific caching (genres are not platform-specific)\r\n        const cacheKey = `genres_${countryCode}`;\r\n        if (this.validationCache.has(cacheKey)) {\r\n            console.log(`📋 Using cached genres for ${countryCode}`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            console.log(`📋 Loading genres for ${countryCode}...`);\r\n            const result = await APIService.getGenres(countryCode); // Don't pass platform\r\n\r\n            if (result.success && result.genres) {\r\n                console.log(`📋 API returned ${result.genres.length} genres for ${countryCode}:`, result.genres);\r\n                this.populateGenreSelect(result.genres);\r\n                this.validationCache.set(cacheKey, true); // Cache successful result\r\n                return;\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to load genres from API:', error);\r\n        }\r\n\r\n        // Fallback to static genre data\r\n        console.log(`📋 Using fallback static genres for ${countryCode}`);\r\n        this.populateGenreSelectFromStatic(countryCode);\r\n    }\r\n\r\n    /**\r\n     * Populate genre checkboxes from API data\r\n     * @param {Array} genres - Array of genre strings\r\n     */\r\n    populateGenreSelect(genres) {\r\n        const genreContainer = document.getElementById('genre-checkboxes');\r\n        if (!genreContainer) {\r\n            console.error('❌ Genre checkboxes container not found!');\r\n            return;\r\n        }\r\n\r\n        console.log('📋 Populating genres:', genres);\r\n\r\n        // Clear existing checkboxes\r\n        genreContainer.innerHTML = '';\r\n\r\n        // Add genre checkboxes\r\n        genres.forEach((genre, index) => {\r\n            const checkboxItem = document.createElement('div');\r\n            checkboxItem.className = 'checkbox-item';\r\n\r\n            const checkbox = document.createElement('input');\r\n            checkbox.type = 'checkbox';\r\n            checkbox.id = `genre-${index}`;\r\n            checkbox.value = genre;\r\n            checkbox.name = 'genres';\r\n\r\n            // Pre-select Horror if available\r\n            if (genre.toLowerCase().includes('horror')) {\r\n                checkbox.checked = true;\r\n                this.formState.genres = [genre];\r\n            }\r\n\r\n            const label = document.createElement('label');\r\n            label.htmlFor = `genre-${index}`;\r\n            label.textContent = genre;\r\n\r\n            // Add change event listener\r\n            checkbox.addEventListener('change', (e) => {\r\n                this.handleGenreChange();\r\n            });\r\n\r\n            checkboxItem.appendChild(checkbox);\r\n            checkboxItem.appendChild(label);\r\n            genreContainer.appendChild(checkboxItem);\r\n        });\r\n\r\n        console.log('✅ Genre checkboxes populated with', genres.length, 'options');\r\n\r\n        // Don't refresh here - will be done once at end of initialization\r\n    }\r\n\r\n    /**\r\n     * Populate genre select from static data\r\n     * @param {string} countryCode - Country code\r\n     */\r\n    populateGenreSelectFromStatic(countryCode) {\r\n        const genres = this.genresByCountry[countryCode];\r\n        if (!genres) return;\r\n\r\n        const genreSelect = document.getElementById('genre');\r\n        if (!genreSelect) return;\r\n\r\n        // Clear existing options (except first)\r\n        while (genreSelect.children.length > 1) {\r\n            genreSelect.removeChild(genreSelect.lastChild);\r\n        }\r\n\r\n        // Add genre options\r\n        Object.entries(genres).forEach(([displayName, value]) => {\r\n            const option = document.createElement('option');\r\n            option.value = value;\r\n            option.textContent = displayName;\r\n            genreSelect.appendChild(option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update templates based on genre\r\n     * @param {string} genreValue - Selected genre value\r\n     */\r\n    updateTemplates(genreValue) {\r\n        const templateSelect = document.getElementById('template');\r\n        if (!templateSelect) return;\r\n\r\n        // Get appropriate template ID\r\n        const templateId = this.getTemplateForGenre(genreValue);\r\n\r\n        // Find and select the matching template\r\n        Array.from(templateSelect.options).forEach((option) => {\r\n            if (option.value === templateId) {\r\n                option.selected = true;\r\n                this.formState.template = templateId;\r\n            }\r\n        });\r\n\r\n        console.log(`📋 Template auto-selected for genre '${genreValue}': ${templateId}`);\r\n    }\r\n\r\n    /**\r\n     * Get template ID for specific genre\r\n     * @param {string} genreValue - Genre value\r\n     * @returns {string} Template ID\r\n     */\r\n    getTemplateForGenre(genreValue) {\r\n        // Check for exact match\r\n        if (this.templatesByGenre[genreValue]) {\r\n            return this.templatesByGenre[genreValue];\r\n        }\r\n\r\n        // Check for case-insensitive match\r\n        const genreLower = genreValue.toLowerCase();\r\n        for (const [key, templateId] of Object.entries(this.templatesByGenre)) {\r\n            if (key.toLowerCase() === genreLower) {\r\n                return templateId;\r\n            }\r\n        }\r\n\r\n        // Return default template\r\n        return this.templatesByGenre.default;\r\n    }\r\n\r\n    // === Form Reset Methods ===\r\n\r\n    /**\r\n     * Reset platform selection\r\n     */\r\n    resetPlatformSelection() {\r\n        const platformSelect = document.getElementById('platform');\r\n        if (platformSelect) {\r\n            platformSelect.selectedIndex = 0;\r\n            // Clear all options except the first\r\n            while (platformSelect.children.length > 1) {\r\n                platformSelect.removeChild(platformSelect.lastChild);\r\n            }\r\n        }\r\n        this.formState.platform = '';\r\n    }\r\n\r\n    /**\r\n     * Reset genre selection\r\n     */\r\n    resetGenreSelection() {\r\n        const genreSelect = document.getElementById('genre');\r\n        if (genreSelect) {\r\n            genreSelect.selectedIndex = 0;\r\n            // Clear all options except the first\r\n            while (genreSelect.children.length > 1) {\r\n                genreSelect.removeChild(genreSelect.lastChild);\r\n            }\r\n        }\r\n        this.formState.genre = '';\r\n    }\r\n\r\n    /**\r\n     * Reset template selection\r\n     */\r\n    resetTemplateSelection() {\r\n        const templateSelect = document.getElementById('template');\r\n        if (templateSelect) {\r\n            templateSelect.selectedIndex = 0;\r\n        }\r\n        this.formState.template = '';\r\n    }\r\n\r\n    // === Form Validation ===\r\n\r\n    /**\r\n     * Validate current form state\r\n     * @returns {Object} Validation result\r\n     */\r\n    validateForm() {\r\n        const errors = [];\r\n        const warnings = [];\r\n\r\n        // Required field validation\r\n        if (!this.formState.country) {\r\n            errors.push('Country is required');\r\n        }\r\n\r\n        if (!this.formState.platform) {\r\n            errors.push('Platform is required');\r\n        }\r\n\r\n        if (!this.formState.genre) {\r\n            errors.push('Genre is required');\r\n        }\r\n\r\n        if (!this.formState.contentType) {\r\n            errors.push('Content type is required');\r\n        }\r\n\r\n        // Template validation (warning only)\r\n        if (!this.formState.template) {\r\n            warnings.push('No template selected - default will be used');\r\n        }\r\n\r\n        return {\r\n            isValid: errors.length === 0,\r\n            errors,\r\n            warnings\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Validate StreamGank URL\r\n     * @param {string} url - URL to validate\r\n     * @returns {Promise<Object>} Validation result\r\n     */\r\n    async validateStreamGankUrl(url) {\r\n        if (!url || url.includes('Select all parameters')) {\r\n            return { valid: false, message: 'Please complete the form to generate a valid URL' };\r\n        }\r\n\r\n        const cacheKey = `url:${url}`;\r\n        if (this.validationCache.has(cacheKey)) {\r\n            return this.validationCache.get(cacheKey);\r\n        }\r\n\r\n        try {\r\n            UIManager.addStatusMessage('info', '🔍', 'Validating URL...');\r\n            this.isValidating = true;\r\n\r\n            const result = await APIService.validateUrl(url);\r\n\r\n            const validation = {\r\n                valid: result.success,\r\n                message: result.message,\r\n                moviesCount: result.moviesCount,\r\n                timestamp: new Date().toISOString()\r\n            };\r\n\r\n            // Cache validation result\r\n            this.validationCache.set(cacheKey, validation);\r\n\r\n            if (validation.valid) {\r\n                UIManager.addStatusMessage('success', '✅', `URL validated! Found ${validation.moviesCount} items`);\r\n            } else {\r\n                UIManager.addStatusMessage('error', '❌', `URL validation failed: ${validation.message}`);\r\n            }\r\n\r\n            return validation;\r\n        } catch (error) {\r\n            console.error('❌ URL validation error:', error);\r\n\r\n            const validation = {\r\n                valid: false,\r\n                message: error.message || 'Validation failed',\r\n                timestamp: new Date().toISOString()\r\n            };\r\n\r\n            UIManager.addStatusMessage('error', '❌', `Validation error: ${validation.message}`);\r\n            return validation;\r\n        } finally {\r\n            this.isValidating = false;\r\n        }\r\n    }\r\n\r\n    // === Form Submission ===\r\n\r\n    /**\r\n     * Handle form submission\r\n     */\r\n    async handleFormSubmit() {\r\n        try {\r\n            // Update form state from DOM\r\n            this.updateFormStateFromDOM();\r\n\r\n            // Validate form\r\n            const validation = this.validateForm();\r\n\r\n            if (!validation.isValid) {\r\n                validation.errors.forEach((error) => {\r\n                    UIManager.addStatusMessage('error', '❌', error);\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Show warnings if any\r\n            validation.warnings.forEach((warning) => {\r\n                UIManager.addStatusMessage('warning', '⚠️', warning);\r\n            });\r\n\r\n            // Generate and validate URL\r\n            const previewUrl = this.generateStreamGankUrl();\r\n            const urlValidation = await this.validateStreamGankUrl(previewUrl);\r\n\r\n            if (!urlValidation.valid) {\r\n                return; // Error already shown by validation\r\n            }\r\n\r\n            // Emit form submission event with data\r\n            document.dispatchEvent(\r\n                new CustomEvent('formSubmit', {\r\n                    detail: {\r\n                        formData: { ...this.formState },\r\n                        previewUrl,\r\n                        validation: urlValidation\r\n                    }\r\n                })\r\n            );\r\n        } catch (error) {\r\n            console.error('❌ Form submission error:', error);\r\n            UIManager.addStatusMessage('error', '❌', `Form submission failed: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update form state from current DOM values\r\n     */\r\n    updateFormStateFromDOM() {\r\n        const formData = DOMManager.getFormData();\r\n        Object.assign(this.formState, formData);\r\n    }\r\n\r\n    // === Preview Generation ===\r\n\r\n    /**\r\n     * Update form preview display\r\n     */\r\n    updatePreview() {\r\n        // Use form state data for preview (no need to read DOM again)\r\n        UIManager.updateFormPreviewFromState(this.formState);\r\n\r\n        console.log('📋 Preview updated');\r\n    }\r\n\r\n    /**\r\n     * Update preview and reload movie data (for filter changes)\r\n     */\r\n    updatePreviewWithMovies() {\r\n        // Update the form preview display\r\n        this.updatePreview();\r\n\r\n        // Load movie preview when filters change\r\n        this.loadMoviePreview();\r\n\r\n        console.log('📋 Preview updated with movie reload');\r\n    }\r\n\r\n    /**\r\n     * Load movie preview based on current filters\r\n     */\r\n    async loadMoviePreview() {\r\n        const country = this.formState.country;\r\n        const platforms = this.formState.platforms || [];\r\n        const genres = this.formState.genres || [];\r\n        const contentType = this.formState.contentType;\r\n\r\n        // Don't load preview if essential filters are missing\r\n        if (!country || platforms.length === 0 || genres.length === 0) {\r\n            this.hideMoviePreview();\r\n            return;\r\n        }\r\n\r\n        console.log('🎬 Loading movie preview:', { country, platforms, genres, contentType });\r\n\r\n        this.showMoviePreviewLoading();\r\n\r\n        try {\r\n            const response = await fetch('/api/movies/preview', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    country,\r\n                    platforms,\r\n                    genre: genres, // Send as array\r\n                    contentType: contentType === 'All' ? null : contentType // Don't send contentType if \"All\"\r\n                })\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success && data.movies && data.movies.length > 0) {\r\n                this.displayMoviePreview(data.movies);\r\n            } else {\r\n                this.showMoviePreviewEmpty();\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Failed to load movie preview:', error);\r\n            this.showMoviePreviewEmpty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Display movie preview cards\r\n     */\r\n    displayMoviePreview(movies) {\r\n        const container = document.getElementById('movie-preview-container');\r\n        const grid = document.getElementById('movie-preview-grid');\r\n        const loading = document.getElementById('movie-preview-loading');\r\n        const empty = document.getElementById('movie-preview-empty');\r\n\r\n        if (!container || !grid) return;\r\n\r\n        // Hide loading and empty states\r\n        loading.style.display = 'none';\r\n        empty.style.display = 'none';\r\n\r\n        // Clear existing content\r\n        grid.innerHTML = '';\r\n\r\n        // Create movie cards\r\n        movies.forEach((movie, index) => {\r\n            const movieCard = this.createMovieCard(movie, index);\r\n            grid.appendChild(movieCard);\r\n        });\r\n\r\n        // Show the preview container\r\n        container.style.display = 'block';\r\n\r\n        // Enable Generate button since we have movies\r\n        this.enableGenerateButton();\r\n\r\n        console.log(`✅ Displayed ${movies.length} movie preview cards`);\r\n    }\r\n\r\n    /**\r\n     * Create a professional movie card element\r\n     */\r\n    createMovieCard(movie, index) {\r\n        const card = document.createElement('div');\r\n        card.className = 'card bg-dark border-secondary h-100 shadow-sm';\r\n        card.style.width = '200px';\r\n        card.style.minWidth = '200px';\r\n        card.style.cursor = 'pointer';\r\n\r\n        const posterUrl =\r\n            movie.poster_url || movie.backdrop_url || 'https://via.placeholder.com/300x450/1a1a1a/16c784?text=No+Image';\r\n        const title = movie.title || 'Unknown Title';\r\n        const year = movie.year || 'Unknown Year';\r\n        const rating = movie.imdb || movie.rating || 'No Rating';\r\n\r\n        // Extract numeric rating for display\r\n        const numericRating = rating.toString().match(/(\\d+\\.?\\d*)/)?.[1];\r\n        const displayRating = numericRating ? `⭐ ${numericRating}/10` : rating;\r\n\r\n        card.innerHTML = `\r\n            <img src=\"${posterUrl}\" alt=\"${title}\" class=\"card-img-top\" \r\n                 style=\"height: 250px; object-fit: cover;\"\r\n                 onerror=\"this.src='https://via.placeholder.com/300x450/1a1a1a/16c784?text=No+Image'\"\r\n                 loading=\"lazy\">\r\n            <div class=\"card-body p-2\">\r\n                <h6 class=\"card-title text-light mb-1\" style=\"font-size: 0.9rem; line-height: 1.2;\">${title}</h6>\r\n                <p class=\"card-text mb-1\">\r\n                    <small class=\"text-success fw-bold\">${year}</small>\r\n                </p>\r\n                <p class=\"card-text\">\r\n                    <small class=\"text-warning\">${displayRating}</small>\r\n                </p>\r\n            </div>\r\n        `;\r\n\r\n        // Add Bootstrap hover effect\r\n        card.addEventListener('mouseenter', () => {\r\n            card.classList.add('shadow-lg');\r\n            card.style.transform = 'translateY(-5px)';\r\n            card.style.transition = 'all 0.3s ease';\r\n        });\r\n\r\n        card.addEventListener('mouseleave', () => {\r\n            card.classList.remove('shadow-lg');\r\n            card.style.transform = 'translateY(0)';\r\n        });\r\n\r\n        // Add click handler for future functionality\r\n        card.addEventListener('click', () => {\r\n            console.log(`🎬 Movie selected: ${title} (${year})`);\r\n            // Future: Add movie selection logic\r\n        });\r\n\r\n        return card;\r\n    }\r\n\r\n    /**\r\n     * Show movie preview loading state\r\n     */\r\n    showMoviePreviewLoading() {\r\n        const container = document.getElementById('movie-preview-container');\r\n        const loading = document.getElementById('movie-preview-loading');\r\n        const grid = document.getElementById('movie-preview-grid');\r\n        const empty = document.getElementById('movie-preview-empty');\r\n\r\n        if (!container || !loading) return;\r\n\r\n        container.style.display = 'block';\r\n        loading.style.display = 'block';\r\n        grid.innerHTML = '';\r\n        empty.style.display = 'none';\r\n\r\n        // Disable Generate button while loading\r\n        this.disableGenerateButton();\r\n    }\r\n\r\n    /**\r\n     * Show movie preview empty state\r\n     */\r\n    showMoviePreviewEmpty() {\r\n        const container = document.getElementById('movie-preview-container');\r\n        const loading = document.getElementById('movie-preview-loading');\r\n        const grid = document.getElementById('movie-preview-grid');\r\n        const empty = document.getElementById('movie-preview-empty');\r\n\r\n        if (!container || !empty) return;\r\n\r\n        container.style.display = 'block';\r\n        loading.style.display = 'none';\r\n        grid.innerHTML = '';\r\n        empty.style.display = 'block';\r\n\r\n        // Disable Generate button since there are no movies\r\n        this.disableGenerateButton();\r\n    }\r\n\r\n    /**\r\n     * Hide movie preview section\r\n     */\r\n    hideMoviePreview() {\r\n        const container = document.getElementById('movie-preview-container');\r\n        if (container) {\r\n            container.style.display = 'none';\r\n        }\r\n\r\n        // Disable Generate button since preview is hidden\r\n        this.disableGenerateButton();\r\n    }\r\n\r\n    /**\r\n     * Enable the Generate Video button\r\n     */\r\n    enableGenerateButton() {\r\n        const generateButton = document.getElementById('generate-video');\r\n        if (generateButton) {\r\n            generateButton.disabled = false;\r\n            generateButton.classList.remove('btn-secondary');\r\n            generateButton.classList.add('btn-primary');\r\n            generateButton.innerHTML = '<span class=\"icon\">🎬</span> Generate Video';\r\n            console.log('✅ Generate button enabled');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disable the Generate Video button\r\n     */\r\n    disableGenerateButton() {\r\n        const generateButton = document.getElementById('generate-video');\r\n        if (generateButton) {\r\n            generateButton.disabled = true;\r\n            generateButton.classList.remove('btn-primary');\r\n            generateButton.classList.add('btn-secondary');\r\n            generateButton.innerHTML = '<span class=\"icon\">⚠️</span> No Movies Available';\r\n            console.log('🚫 Generate button disabled');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate StreamGank URL from current form state\r\n     * @returns {string} Generated URL\r\n     */\r\n    generateStreamGankUrl() {\r\n        if (!this.formState.country || !this.formState.platform || !this.formState.contentType) {\r\n            return 'Select all parameters to generate URL';\r\n        }\r\n\r\n        const baseUrl = 'https://streamgank.com';\r\n        const params = new URLSearchParams();\r\n\r\n        // Use exact format: country, platforms (plural), genres (plural), type\r\n        if (this.formState.country) params.set('country', this.formState.country);\r\n        if (this.formState.platform) params.set('platforms', this.formState.platform.toLowerCase());\r\n\r\n        // Only add genre if not 'all' (use plural 'genres') - map to English\r\n        if (this.formState.genre && this.formState.genre !== 'all') {\r\n            const genreMapping = {\r\n                Horreur: 'Horror',\r\n\r\n                'Action & Aventure': 'Action',\r\n                Animation: 'Animation'\r\n            };\r\n            const englishGenre = genreMapping[this.formState.genre] || this.formState.genre;\r\n            params.set('genres', englishGenre);\r\n        }\r\n\r\n        // Only add content type if not 'all' - map to clean English\r\n        if (this.formState.contentType && this.formState.contentType !== 'all') {\r\n            const typeMapping = {\r\n                movies: 'Film',\r\n                series: 'Serie',\r\n                tvshows: 'Serie',\r\n                'tv-shows': 'Serie'\r\n            };\r\n            const cleanType = typeMapping[this.formState.contentType.toLowerCase()] || this.formState.contentType;\r\n            params.set('type', cleanType);\r\n        }\r\n\r\n        return `${baseUrl}?${params.toString()}`;\r\n    }\r\n\r\n    // === Utility Methods ===\r\n\r\n    /**\r\n     * Get current form data\r\n     * @returns {Object} Current form state\r\n     */\r\n    getFormData() {\r\n        this.updateFormStateFromDOM();\r\n        return { ...this.formState };\r\n    }\r\n\r\n    /**\r\n     * Set form data\r\n     * @param {Object} data - Form data to set\r\n     */\r\n    setFormData(data) {\r\n        Object.assign(this.formState, data);\r\n\r\n        // Update DOM elements\r\n        Object.entries(data).forEach(([key, value]) => {\r\n            const element = DOMManager.get(`${key}Select`) || DOMManager.get(key);\r\n            if (element && element.value !== undefined) {\r\n                element.value = value;\r\n            }\r\n        });\r\n\r\n        this.updatePreview();\r\n    }\r\n\r\n    /**\r\n     * Reset form to initial state\r\n     */\r\n    resetForm() {\r\n        this.formState = {\r\n            country: '',\r\n            platform: '',\r\n            genre: '',\r\n            template: '',\r\n            contentType: ''\r\n        };\r\n\r\n        // Reset DOM elements using correct element IDs\r\n        ['country', 'platform', 'genre', 'template'].forEach((elementId) => {\r\n            const select = document.getElementById(elementId);\r\n            if (select) {\r\n                select.selectedIndex = 0;\r\n            }\r\n        });\r\n\r\n        // Reset radio buttons\r\n        const contentTypeRadios = DOMManager.get('contentTypeRadios');\r\n        if (contentTypeRadios) {\r\n            Array.from(contentTypeRadios).forEach((radio) => {\r\n                radio.checked = false;\r\n            });\r\n        }\r\n\r\n        // Clear validation cache\r\n        this.validationCache.clear();\r\n\r\n        this.updatePreview();\r\n        console.log('📋 Form reset');\r\n    }\r\n\r\n    /**\r\n     * Get form validation state\r\n     * @returns {Object} Current validation state\r\n     */\r\n    getValidationState() {\r\n        return {\r\n            isValidating: this.isValidating,\r\n            cacheSize: this.validationCache.size,\r\n            lastValidation: null // Could track this if needed\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Emit custom events for form actions\r\n     */\r\n    emit(eventName, data) {\r\n        console.log(`📤 FormManager emitting ${eventName}:`, data);\r\n        const event = new CustomEvent(eventName, { detail: data });\r\n        // Dispatch on document to ensure it's caught by main.js\r\n        document.dispatchEvent(event);\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nconst formManager = new FormManager();\r\n\r\n// Export singleton instance\r\nexport default formManager;\r\n","/**\n * Dashboard Page - Main video generation interface\n * Works with existing HTML structure, doesn't replace it\n */\n\nimport DOMManager from '../core/DOMManager.js';\nimport UIManager from '../components/UIManager.js';\nimport FormManager from '../components/FormManager.js';\nimport RealtimeService from '../services/RealtimeService.js';\n\nexport class DashboardPage {\n    constructor() {\n        this.isInitialized = false;\n    }\n\n    /**\n     * Initialize dashboard page\n     */\n    init() {\n        if (this.isInitialized) {\n            return;\n        }\n\n        // The dashboard uses the existing form and UI managers\n        // which are already initialized in main.js\n        this.isInitialized = true;\n    }\n\n    /**\n     * Activate dashboard functionality with existing HTML\n     * @param {HTMLElement} _container - Container (optional, uses existing DOM)\n     */\n    render(_container) {\n        // Work with existing DOM structure - don't replace it\n        console.log('📊 Dashboard: Activating with existing HTML structure');\n\n        // Re-cache DOM elements from existing structure\n        DOMManager.init();\n\n        // UI Manager init (FormManager already initialized in main.js)\n        UIManager.init();\n\n        // Start real-time updates if not already running\n        if (!RealtimeService.isInitialized) {\n            RealtimeService.init();\n        }\n\n        console.log('📊 Dashboard functionality activated');\n    }\n\n    /**\n     * Handle page activation (when navigated to)\n     */\n    activate() {\n        // Update page title\n        document.title = 'Dashboard - StreamGank Video Generator';\n\n        // Refresh queue status when dashboard becomes active\n        RealtimeService.refreshStatus();\n\n        console.log('📊 Dashboard activated');\n    }\n\n    /**\n     * Handle page deactivation (when navigating away)\n     */\n    deactivate() {\n        // Optional cleanup when leaving dashboard\n        console.log('📊 Dashboard deactivated');\n    }\n\n    /**\n     * Get current dashboard state\n     * @returns {Object} Dashboard state\n     */\n    getState() {\n        const hasFormManager = FormManager && typeof FormManager.getFormData === 'function';\n        const hasUIManager = UIManager && typeof UIManager.getState === 'function';\n\n        return {\n            initialized: this.isInitialized,\n            formData: hasFormManager ? FormManager.getFormData() : null,\n            uiState: hasUIManager ? UIManager.getState() : null\n        };\n    }\n\n    /**\n     * Cleanup dashboard resources\n     */\n    cleanup() {\n        this.isInitialized = false;\n        console.log('📊 Dashboard Page cleaned up');\n    }\n}\n\n// Export singleton instance\nexport default new DashboardPage();\n","/**\n * Job Manager - Professional job lifecycle management\n * Handles video generation jobs, monitoring, progress tracking, and status updates\n */\nimport APIService from './APIService.js';\nimport UIManager from '../components/UIManager.js';\n\nexport class JobManager extends EventTarget {\n    constructor() {\n        super();\n        this.activeJobs = new Map();\n        this.jobHistory = new Map();\n        this.currentJob = null;\n        this.maxJobHistory = 100;\n        this.monitoringInterval = 5000; // 5 seconds\n        this.monitoringTimer = null;\n        this.isGenerationActive = false;\n        this.creatomateMessages = new Set(); // Track unique messages\n    }\n\n    /**\n     * Initialize Job Manager\n     */\n    init() {\n        this.setupEventListeners();\n    }\n\n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        // Listen for page unload to cleanup\n        window.addEventListener('beforeunload', () => {\n            this.cleanup();\n        });\n    }\n\n    /**\n     * Start video generation job with comprehensive monitoring\n     * @param {Object} params - Generation parameters\n     * @returns {Promise<Object>} Job creation result\n     */\n    async startVideoGeneration(params) {\n        try {\n            // Validate parameters\n            this.validateGenerationParams(params);\n\n            // Prevent concurrent generations\n            if (this.isGenerationActive) {\n                throw new Error('Another video generation is already in progress');\n            }\n\n            this.isGenerationActive = true;\n\n            // Update UI state\n            UIManager.showProgress();\n            UIManager.disableGenerateButton('Starting generation...');\n            UIManager.addStatusMessage('info', '🚀', 'Starting video generation...');\n\n            // Reset message tracking\n            this.creatomateMessages.clear();\n\n            // Create job via API\n            const result = await APIService.generateVideo(params);\n\n            if (!result.success) {\n                throw new Error(result.message || 'Failed to start video generation');\n            }\n\n            // Setup job tracking\n            const job = this.createJobObject(result, params);\n\n            // Store and monitor job\n            this.activeJobs.set(job.id, job);\n            this.currentJob = job;\n            this.startJobMonitoring(job.id);\n\n            // Update UI\n            UIManager.addStatusMessage(\n                'success',\n                '✅',\n                `Job queued successfully! ${job.queuePosition ? `Position: ${job.queuePosition}` : ''}`\n            );\n            UIManager.updateProgress(5, 'Job queued, waiting to start...');\n\n            // Emit job started event\n            this.dispatchEvent(new CustomEvent('jobStarted', { detail: { job } }));\n\n            console.log(`💼 Job started: ${job.id}`);\n            return { success: true, job };\n        } catch (error) {\n            console.error('❌ Failed to start video generation:', error);\n\n            // Reset UI state\n            this.resetGenerationState();\n            UIManager.addStatusMessage('error', '❌', `Failed to start generation: ${error.message}`);\n\n            this.dispatchEvent(new CustomEvent('jobError', { detail: { error } }));\n            throw error;\n        }\n    }\n\n    /**\n     * Create job object from API result\n     * @param {Object} result - API result\n     * @param {Object} params - Generation parameters\n     * @returns {Object} Job object\n     */\n    createJobObject(result, params) {\n        return {\n            id: result.jobId,\n            params: params,\n            status: 'pending',\n            progress: 0,\n            createdAt: new Date().toISOString(),\n            startedAt: null,\n            completedAt: null,\n            queuePosition: result.queuePosition || 0,\n            error: null,\n            result: null,\n            creatomateId: null,\n            videoUrl: null\n        };\n    }\n\n    /**\n     * Validate generation parameters\n     * @param {Object} params - Parameters to validate\n     * @throws {Error} If validation fails\n     */\n    validateGenerationParams(params) {\n        const required = ['country', 'platform', 'genre', 'contentType'];\n        const missing = required.filter((field) => !params[field]);\n\n        if (missing.length > 0) {\n            throw new Error(`Missing required parameters: ${missing.join(', ')}`);\n        }\n\n        console.log('✅ Parameters validated:', params);\n    }\n\n    /**\n     * Start monitoring a specific job\n     * @param {string} jobId - Job ID to monitor\n     */\n    async startJobMonitoring(jobId) {\n        if (this.monitoringTimer) {\n            clearInterval(this.monitoringTimer);\n        }\n\n        console.log(`👀 Started monitoring job: ${jobId}`);\n\n        this.monitoringTimer = setInterval(async () => {\n            try {\n                await this.updateJobStatus(jobId);\n            } catch (error) {\n                console.error('❌ Job monitoring error:', error);\n\n                // Stop monitoring on repeated failures\n                if (this.consecutiveErrors > 3) {\n                    this.stopJobMonitoring();\n                    UIManager.addStatusMessage('warning', '⚠️', 'Job monitoring stopped due to repeated errors');\n                }\n            }\n        }, this.monitoringInterval);\n    }\n\n    /**\n     * Stop job monitoring\n     */\n    stopJobMonitoring() {\n        if (this.monitoringTimer) {\n            clearInterval(this.monitoringTimer);\n            this.monitoringTimer = null;\n            console.log('⏹️ Job monitoring stopped');\n        }\n    }\n\n    /**\n     * Update job status from API\n     * @param {string} jobId - Job ID to update\n     */\n    async updateJobStatus(jobId) {\n        const job = this.activeJobs.get(jobId);\n        if (!job) return;\n\n        try {\n            const result = await APIService.getJobStatus(jobId);\n\n            if (result.success && result.job) {\n                this.processJobUpdate(result.job);\n            }\n        } catch (error) {\n            console.error(`❌ Failed to update job status for ${jobId}:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Process comprehensive job status update\n     * @param {Object} jobData - Updated job data from API\n     */\n    processJobUpdate(jobData) {\n        const job = this.activeJobs.get(jobData.id);\n        if (!job) return;\n\n        const previousStatus = job.status;\n        const previousProgress = job.progress;\n\n        // Update job data\n        Object.assign(job, {\n            status: jobData.status,\n            progress: jobData.progress || 0,\n            currentStep: jobData.currentStep,\n            startedAt: jobData.startedAt || job.startedAt,\n            completedAt: jobData.completedAt,\n            error: jobData.error,\n            result: jobData,\n            creatomateId: jobData.creatomateId,\n            videoUrl: jobData.videoUrl\n        });\n\n        // Handle status changes\n        if (previousStatus !== job.status) {\n            this.handleJobStatusChange(job, previousStatus);\n        }\n\n        // Handle progress changes\n        if (previousProgress !== job.progress) {\n            this.updateJobProgress(job);\n        }\n\n        // Handle creatomate monitoring for rendering jobs\n        if (job.creatomateId && !job.videoUrl && job.status === 'completed') {\n            this.startCreatomateMonitoring(job);\n        }\n\n        // Emit job updated event\n        this.dispatchEvent(new CustomEvent('jobUpdated', { detail: { job, previousStatus } }));\n\n        console.log(`💼 Job ${job.id} updated: ${job.status} (${job.progress}%)`);\n    }\n\n    /**\n     * Handle comprehensive job status changes\n     * @param {Object} job - Job object\n     * @param {string} previousStatus - Previous job status\n     */\n    handleJobStatusChange(job, previousStatus) {\n        switch (job.status) {\n            case 'processing':\n                if (previousStatus === 'pending') {\n                    UIManager.addStatusMessage('info', '⚡', 'Job started processing!');\n                    job.startedAt = new Date().toISOString();\n                }\n                break;\n\n            case 'completed':\n                this.handleJobCompletion(job);\n                break;\n\n            case 'failed':\n                this.handleJobFailure(job);\n                break;\n\n            case 'cancelled':\n                this.handleJobCancellation(job);\n                break;\n        }\n    }\n\n    /**\n     * Handle job completion with video URL or Creatomate ID\n     * @param {Object} job - Completed job\n     */\n    handleJobCompletion(job) {\n        console.log(`✅ Job completed: ${job.id}`);\n\n        if (job.videoUrl) {\n            // Direct video URL available\n            this.finishSuccessfulGeneration(job);\n        } else if (job.creatomateId) {\n            // Video is rendering, start Creatomate monitoring\n            UIManager.updateProgress(90, 'Python script completed, video rendering...');\n            UIManager.addStatusMessage(\n                'info',\n                '🎬',\n                `Video rendering started (ID: ${job.creatomateId}). Monitoring progress...`\n            );\n            this.startCreatomateMonitoring(job);\n        } else {\n            // Completed but missing video data\n            UIManager.addStatusMessage('warning', '⚠️', 'Job completed but video URL not yet available');\n            this.moveJobToHistory(job);\n        }\n\n        this.dispatchEvent(new CustomEvent('jobCompleted', { detail: { job } }));\n    }\n\n    /**\n     * Start monitoring Creatomate rendering status\n     * @param {Object} job - Job with Creatomate ID\n     */\n    startCreatomateMonitoring(job) {\n        let attempts = 0;\n        const maxAttempts = 40; // 20 minutes max (30s * 40)\n\n        const checkStatus = async () => {\n            attempts++;\n\n            try {\n                const statusData = await APIService.getCreatomateStatus(job.creatomateId);\n\n                if (statusData.success && statusData.videoUrl) {\n                    // Video is ready!\n                    job.videoUrl = statusData.videoUrl;\n                    job.result.videoUrl = statusData.videoUrl;\n                    this.finishSuccessfulGeneration(job);\n                } else if (statusData.success && statusData.status) {\n                    // Still rendering\n                    const status = statusData.status.toLowerCase();\n                    const statusText = status.charAt(0).toUpperCase() + status.slice(1);\n\n                    if (attempts % 4 === 0) {\n                        // Every 2 minutes\n                        const messageKey = `rendering-update-${Math.floor(attempts / 4)}`;\n                        if (!this.creatomateMessages.has(messageKey)) {\n                            UIManager.addStatusMessage(\n                                'info',\n                                '⏳',\n                                `Video status: ${statusText}... (${attempts}/${maxAttempts})`\n                            );\n                            this.creatomateMessages.add(messageKey);\n                        }\n                    }\n\n                    // Update progress\n                    let progressPercent = 90 + (attempts / maxAttempts) * 10;\n                    if (status.includes('render') || status.includes('process')) {\n                        progressPercent = Math.min(95, progressPercent);\n                    }\n                    UIManager.updateProgress(progressPercent, `Rendering: ${statusText}`);\n\n                    // Schedule next check\n                    if (attempts < maxAttempts) {\n                        setTimeout(() => checkStatus(), 30000);\n                    } else {\n                        this.handleCreatomateTimeout(job);\n                    }\n                } else {\n                    this.handleCreatomateError(job, statusData.message, attempts, maxAttempts, checkStatus);\n                }\n            } catch (error) {\n                this.handleCreatomateNetworkError(job, error, attempts, maxAttempts, checkStatus);\n            }\n        };\n\n        // Start monitoring\n        checkStatus();\n    }\n\n    /**\n     * Handle Creatomate monitoring timeout\n     * @param {Object} job - Job object\n     */\n    handleCreatomateTimeout(job) {\n        const timeoutKey = 'creatomate-timeout';\n        if (!this.creatomateMessages.has(timeoutKey)) {\n            UIManager.addStatusMessage(\n                'warning',\n                '⚠️',\n                'Video rendering is taking longer than expected. Use \"Check Status\" to monitor manually.'\n            );\n            this.creatomateMessages.add(timeoutKey);\n        }\n\n        // Keep the job active for manual status checking\n        UIManager.enableGenerateButton();\n        this.isGenerationActive = false;\n    }\n\n    /**\n     * Handle Creatomate API errors\n     * @param {Object} job - Job object\n     * @param {string} message - Error message\n     * @param {number} attempts - Current attempt number\n     * @param {number} maxAttempts - Maximum attempts\n     * @param {Function} checkStatus - Status check function\n     */\n    handleCreatomateError(job, message, attempts, maxAttempts, checkStatus) {\n        const errorKey = `creatomate-error-${message}`;\n        if (!this.creatomateMessages.has(errorKey)) {\n            UIManager.addStatusMessage('error', '❌', `Render status check failed: ${message || 'Unknown error'}`);\n            this.creatomateMessages.add(errorKey);\n        }\n\n        if (attempts < maxAttempts) {\n            setTimeout(() => checkStatus(), 30000);\n        } else {\n            UIManager.addStatusMessage('error', '❌', 'Unable to check render status after multiple attempts.');\n            this.moveJobToHistory(job);\n        }\n    }\n\n    /**\n     * Handle Creatomate network errors\n     * @param {Object} job - Job object\n     * @param {Error} error - Network error\n     * @param {number} attempts - Current attempt number\n     * @param {number} maxAttempts - Maximum attempts\n     * @param {Function} checkStatus - Status check function\n     */\n    handleCreatomateNetworkError(job, error, attempts, maxAttempts, checkStatus) {\n        console.error('Creatomate status check error:', error);\n\n        const networkErrorKey = `network-error-${attempts}`;\n        if (attempts % 3 === 0 && !this.creatomateMessages.has(networkErrorKey)) {\n            UIManager.addStatusMessage('warning', '⚠️', `Network error checking render status (attempt ${attempts})`);\n            this.creatomateMessages.add(networkErrorKey);\n        }\n\n        if (attempts < maxAttempts) {\n            setTimeout(() => checkStatus(), 30000);\n        } else {\n            UIManager.addStatusMessage('error', '❌', 'Network errors prevented render status monitoring.');\n            this.moveJobToHistory(job);\n        }\n    }\n\n    /**\n     * Finish successful video generation\n     * @param {Object} job - Completed job with video URL\n     */\n    finishSuccessfulGeneration(job) {\n        UIManager.updateProgress(100, 'Generation completed!');\n        UIManager.addStatusMessage('success', '🎉', 'Video generation completed successfully!');\n\n        // Display video in UI\n        UIManager.displayVideo({\n            jobId: job.id,\n            videoUrl: job.videoUrl,\n            creatomateId: job.creatomateId,\n            timestamp: new Date().toLocaleString()\n        });\n\n        // Cleanup and reset\n        this.moveJobToHistory(job);\n        this.resetGenerationState();\n    }\n\n    /**\n     * Handle job failure\n     * @param {Object} job - Failed job\n     */\n    handleJobFailure(job) {\n        console.error(`❌ Job failed: ${job.id}`, job.error);\n\n        UIManager.updateProgress(0, 'Generation failed');\n        UIManager.addStatusMessage('error', '❌', `Generation failed: ${job.error || 'Unknown error'}`, false);\n\n        this.moveJobToHistory(job);\n        this.dispatchEvent(new CustomEvent('jobFailed', { detail: { job } }));\n        this.resetGenerationState();\n    }\n\n    /**\n     * Handle job cancellation\n     * @param {Object} job - Cancelled job\n     */\n    handleJobCancellation(job) {\n        console.log(`⏹️ Job cancelled: ${job.id}`);\n\n        UIManager.addStatusMessage('warning', '⏹️', 'Job was cancelled');\n        this.moveJobToHistory(job);\n        this.dispatchEvent(new CustomEvent('jobCancelled', { detail: { job } }));\n        this.resetGenerationState();\n    }\n\n    /**\n     * Update job progress in UI\n     * @param {Object} job - Job object\n     */\n    updateJobProgress(job) {\n        if (job === this.currentJob) {\n            UIManager.updateProgress(job.progress, job.currentStep || 'Processing...');\n        }\n    }\n\n    /**\n     * Reset generation state after completion/failure\n     */\n    resetGenerationState() {\n        UIManager.hideProgress();\n        UIManager.enableGenerateButton();\n        this.isGenerationActive = false;\n        this.stopJobMonitoring();\n    }\n\n    /**\n     * Cancel active job\n     * @param {string} jobId - Job ID to cancel\n     * @returns {Promise<boolean>} Cancellation success\n     */\n    async cancelJob(jobId) {\n        try {\n            const result = await APIService.cancelJob(jobId);\n\n            if (result.success) {\n                UIManager.addStatusMessage('info', '⏹️', 'Job cancellation requested');\n                return true;\n            } else {\n                throw new Error(result.message || 'Failed to cancel job');\n            }\n        } catch (error) {\n            console.error('❌ Failed to cancel job:', error);\n            UIManager.addStatusMessage('error', '❌', `Failed to cancel job: ${error.message}`);\n            return false;\n        }\n    }\n\n    /**\n     * Stop video generation\n     */\n    stopVideoGeneration() {\n        if (this.currentJob) {\n            this.cancelJob(this.currentJob.id);\n        }\n\n        this.resetGenerationState();\n        UIManager.addStatusMessage('warning', '⏹️', 'Video generation stopped');\n    }\n\n    /**\n     * Move job from active to history\n     * @param {Object} job - Job to move\n     */\n    moveJobToHistory(job) {\n        this.activeJobs.delete(job.id);\n\n        this.jobHistory.set(job.id, {\n            ...job,\n            movedToHistoryAt: new Date().toISOString()\n        });\n\n        if (this.currentJob && this.currentJob.id === job.id) {\n            this.currentJob = null;\n        }\n\n        this.limitJobHistory();\n    }\n\n    /**\n     * Limit job history size\n     */\n    limitJobHistory() {\n        if (this.jobHistory.size > this.maxJobHistory) {\n            const entries = Array.from(this.jobHistory.entries());\n            const toRemove = entries.slice(0, entries.length - this.maxJobHistory);\n\n            toRemove.forEach(([jobId]) => {\n                this.jobHistory.delete(jobId);\n            });\n\n            console.log(`🧹 Cleaned up ${toRemove.length} old job records`);\n        }\n    }\n\n    /**\n     * Get job by ID\n     * @param {string} jobId - Job ID\n     * @returns {Object|null} Job object or null\n     */\n    getJob(jobId) {\n        return this.activeJobs.get(jobId) || this.jobHistory.get(jobId) || null;\n    }\n\n    /**\n     * Get all active jobs\n     * @returns {Array} Array of active jobs\n     */\n    getActiveJobs() {\n        return Array.from(this.activeJobs.values());\n    }\n\n    /**\n     * Get job statistics\n     * @returns {Object} Job statistics\n     */\n    getJobStats() {\n        return {\n            active: this.activeJobs.size,\n            history: this.jobHistory.size,\n            total: this.activeJobs.size + this.jobHistory.size,\n            currentJob: this.currentJob?.id || null,\n            isMonitoring: !!this.monitoringTimer,\n            isGenerationActive: this.isGenerationActive\n        };\n    }\n\n    /**\n     * Cleanup resources\n     */\n    cleanup() {\n        this.stopJobMonitoring();\n        console.log('🧹 Job Manager cleaned up');\n    }\n}\n\n// Export singleton instance\nexport default new JobManager();\n","/**\n * JobDetail Page - Individual job information and monitoring\n * Shows detailed job progress, logs, and results\n */\n\nimport UIManager from '../components/UIManager.js';\nimport APIService from '../services/APIService.js';\nimport JobManager from '../services/JobManager.js';\n\nexport class JobDetailPage {\n    constructor() {\n        this.currentJobId = null;\n        this.jobData = null;\n        this.refreshTimer = null;\n        this.refreshInterval = 5000; // 5 seconds\n    }\n\n    /**\n     * Render the job detail page\n     * @param {HTMLElement} container - Container to render into\n     * @param {Object} params - Route parameters (contains jobId)\n     */\n    async render(container, params = {}) {\n        console.log('📄 JobDetail.render() called with:', { container: !!container, params });\n\n        const { jobId } = params;\n        console.log('📄 JobDetail extracted jobId:', jobId);\n\n        if (!container) {\n            console.error('📄 JobDetail: No container provided');\n            return;\n        }\n\n        if (!jobId) {\n            console.error('📄 JobDetail: No job ID provided');\n            console.error('📄 JobDetail: Full params received:', JSON.stringify(params, null, 2));\n            this.renderError(container, 'No job ID specified');\n            return;\n        }\n\n        this.currentJobId = jobId;\n\n        // Show loading state first\n        container.innerHTML = this.createLoadingTemplate();\n\n        try {\n            // Fetch job data\n            await this.loadJobData(jobId);\n\n            // Render job details\n            container.innerHTML = this.createJobTemplate();\n\n            // Start auto-refresh for active jobs\n            this.startAutoRefresh();\n\n            console.log(`📄 JobDetail rendered for job: ${jobId}`);\n        } catch (error) {\n            console.error('📄 JobDetail render error:', error);\n            this.renderError(container, error.message);\n        }\n    }\n\n    /**\n     * Load job data from API or local storage\n     * @param {string} jobId - Job ID to load\n     */\n    async loadJobData(jobId) {\n        try {\n            // First try to get from JobManager (active jobs)\n            let job = JobManager.getJob(jobId);\n\n            if (!job) {\n                // If not in JobManager, try API\n                const response = await APIService.getJobStatus(jobId);\n                if (response.success) {\n                    job = response.job;\n                }\n            }\n\n            if (!job) {\n                throw new Error(`Job ${jobId} not found`);\n            }\n\n            this.jobData = job;\n\n            // Update page title\n            document.title = `Job ${jobId} - StreamGank`;\n        } catch (error) {\n            throw new Error(`Failed to load job data: ${error.message}`);\n        }\n    }\n\n    /**\n     * Create loading template\n     * @returns {string} Loading HTML\n     */\n    createLoadingTemplate() {\n        return `\n            <div class=\"job-detail-page\">\n                <div class=\"container-fluid\">\n                    <!-- Header with navigation -->\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                        <div>\n                            <button class=\"btn btn-outline-secondary me-3\" onclick=\"history.back()\">\n                                ← Back\n                            </button>\n                            <h1 class=\"h3 mb-0\">Loading Job...</h1>\n                        </div>\n                        <div class=\"nav-links\">\n                            <a href=\"/dashboard\" class=\"btn btn-outline-primary me-2\">Dashboard</a>\n                        </div>\n                    </div>\n                    \n                    <!-- Loading State -->\n                    <div class=\"text-center py-5\">\n                        <div class=\"spinner-border text-primary\" role=\"status\">\n                            <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n                        <p class=\"mt-3 text-light\">Loading job details...</p>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Create main job detail template - COPIED FROM job-detail.html\n     * @returns {string} Job detail HTML\n     */\n    createJobTemplate() {\n        const job = this.jobData;\n        const statusClass = this.getStatusClass(job.status);\n        const statusIcon = this.getStatusIcon(job.status);\n\n        return `\n            <style>\n              /* Fix container overflow */\n              .main-content {\n                overflow-x: hidden !important;\n              }\n              \n              /* Compact Timeline Styles */\n              .timeline-compact {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n                gap: 0.75rem;\n                padding: 0;\n              }\n              .timeline-step {\n                background: rgba(255, 255, 255, 0.05);\n                border: 1px solid #495057;\n                border-radius: 8px;\n                padding: 0.75rem;\n                text-align: center;\n                position: relative;\n                transition: all 0.3s ease;\n              }\n              .timeline-step.completed {\n                border-color: #198754;\n                background: rgba(25, 135, 84, 0.1);\n              }\n              .timeline-step.active {\n                border-color: #0d6efd;\n                background: rgba(13, 110, 253, 0.1);\n                animation: pulse 2s infinite;\n              }\n              .timeline-step.pending {\n                border-color: #6c757d;\n                background: rgba(108, 117, 125, 0.1);\n              }\n              .timeline-step.failed {\n                border-color: #dc3545;\n                background: rgba(220, 53, 69, 0.1);\n              }\n\n              .step-icon {\n                font-size: 1.5rem;\n                margin-bottom: 0.5rem;\n              }\n              .step-title {\n                font-size: 0.8rem;\n                font-weight: 600;\n                margin: 0;\n                color: #fff;\n              }\n              .step-status {\n                font-size: 0.7rem;\n                margin-top: 0.25rem;\n                opacity: 0.8;\n              }\n\n              /* Compact Cards */\n              .compact-card {\n                margin-bottom: 1rem;\n              }\n              .compact-card .card-header {\n                padding: 0.5rem 1rem;\n                font-size: 0.9rem;\n              }\n              .compact-card .card-body {\n                padding: 1rem;\n              }\n\n              /* Override for video result section - extra compact */\n              #creatomate-section .card-header {\n                padding: 0.5rem 0.75rem !important;\n              }\n              #creatomate-section .card-body {\n                padding: 0.5rem 0.75rem !important;\n              }\n\n              /* Progress Bar Compact */\n              .progress-compact {\n                height: 12px;\n                border-radius: 6px;\n                background: #343a40;\n              }\n\n              /* Parameter Inline Display - NO CARDS */\n              .param-inline {\n                display: flex;\n                flex-wrap: wrap;\n                gap: 0.5rem;\n                align-items: center;\n              }\n              .param-badge {\n                display: inline-flex;\n                align-items: center;\n                gap: 0.3rem;\n                padding: 0.25rem 0.4rem;\n                border-radius: 4px;\n                background: rgba(13, 110, 253, 0.1);\n                border: 1px solid rgba(13, 110, 253, 0.3);\n                font-size: 0.75rem;\n                max-width: 100%;\n                overflow: hidden;\n              }\n              .param-badge i {\n                font-size: 0.7rem;\n                color: #0d6efd;\n              }\n              .param-badge .label {\n                color: #e6edf3;\n                margin-right: 0.25rem;\n              }\n              .param-badge .value {\n                color: #fff;\n                font-weight: 500;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                max-width: 120px;\n              }\n\n              /* Stats Compact */\n              .stats-row {\n                display: grid;\n                grid-template-columns: repeat(4, 1fr);\n                gap: 0.4rem;\n              }\n              .stat-item {\n                text-align: center;\n                padding: 0.4rem 0.2rem;\n                background: rgba(255, 255, 255, 0.05);\n                border-radius: 6px;\n                min-width: 0;\n                overflow: hidden;\n              }\n              .stat-value {\n                font-size: 1rem;\n                font-weight: bold;\n                margin-bottom: 0.25rem;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n              }\n              .stat-label {\n                font-size: 0.65rem;\n                color: #e6edf3;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n              }\n\n              /* Video player fixes */\n              #result-video {\n                width: 100%;\n                height: auto;\n                display: block !important;\n                background: #000;\n                object-fit: contain;\n              }\n\n              #result-video::-webkit-media-controls-panel {\n                background-color: rgba(0, 0, 0, 0.8);\n              }\n\n              /* Video container spacing */\n              .video-container {\n                max-width: 600px;\n                width: 100%;\n                position: relative;\n                background: #1a1a1a;\n                border-radius: 8px;\n                overflow: hidden;\n                min-height: 200px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n              }\n\n              /* Compact video container for inline display */\n              .video-container-compact {\n                width: 100%;\n                position: relative;\n                background: #1a1a1a;\n                border-radius: 6px;\n                overflow: hidden;\n                min-height: 160px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n              }\n\n              /* Collapsible sections */\n              .section-toggle {\n                cursor: pointer;\n                user-select: none;\n              }\n              .section-toggle:hover {\n                background: rgba(255, 255, 255, 0.1);\n              }\n\n              @keyframes pulse {\n                0%,\n                100% {\n                  transform: scale(1);\n                }\n                50% {\n                  transform: scale(1.05);\n                }\n              }\n\n              /* Responsive adjustments */\n              @media (max-width: 768px) {\n                .timeline-compact {\n                  grid-template-columns: repeat(2, 1fr);\n                  gap: 0.5rem;\n                }\n                .param-inline {\n                  gap: 0.4rem;\n                }\n                .stats-row {\n                  grid-template-columns: repeat(2, 1fr);\n                  gap: 0.3rem;\n                }\n                .param-badge {\n                  font-size: 0.7rem;\n                  padding: 0.2rem 0.3rem;\n                }\n                .stat-value {\n                  font-size: 0.9rem;\n                }\n                .stat-label {\n                  font-size: 0.6rem;\n                }\n              }\n              \n              @media (max-width: 576px) {\n                .timeline-compact {\n                  grid-template-columns: 1fr;\n                }\n                .stats-row {\n                  grid-template-columns: repeat(2, 1fr);\n                }\n                .container-fluid {\n                  padding-left: 0.5rem !important;\n                  padding-right: 0.5rem !important;\n                }\n              }\n            </style>\n\n            <div id=\"job-detail-app\" class=\"w-100\" style=\"background-color: #0d1117; overflow-x: hidden;\">\n              <!-- Main Content -->\n              <div id=\"main-content\" style=\"overflow-x: hidden;\">\n                <!-- Compact Header -->\n                <nav class=\"navbar navbar-dark bg-dark border-bottom border-secondary py-2\">\n                  <div class=\"container-fluid\">\n                    <div class=\"d-flex align-items-center\">\n                      <button onclick=\"history.back()\" class=\"btn btn-outline-light btn-sm me-2\">\n                        <i class=\"fas fa-arrow-left\"></i>\n                      </button>\n                      <span class=\"navbar-brand mb-0 h6\">\n                        <i class=\"fas fa-tasks me-1\"></i>\n                        Job\n                        <span id=\"job-id\">${job.id}</span>\n                      </span>\n                      <span class=\"badge ${statusClass} ms-2 fs-6\">${statusIcon} ${job.status.toUpperCase()}</span>\n                    </div>\n                    <div class=\"d-flex gap-1\">\n                      <button onclick=\"location.reload()\" class=\"btn btn-outline-primary btn-sm\">\n                        <i class=\"fas fa-sync-alt\"></i>\n                      </button>\n                      <a href=\"/dashboard\" class=\"btn btn-primary btn-sm\">\n                        <i class=\"fas fa-tachometer-alt\"></i>\n                      </a>\n                    </div>\n                  </div>\n                </nav>\n\n                <div class=\"container-fluid py-2\" style=\"overflow-x: hidden;\">\n                  <!-- Progress & Stats Row -->\n                  <div class=\"row g-2 mb-3\">\n                    <!-- Progress Section -->\n                    <div class=\"col-md-8\">\n                      <div class=\"card bg-dark compact-card\">\n                        <div class=\"card-header\">\n                          <i class=\"fas fa-chart-line me-1\"></i>\n                          Progress\n                          <span class=\"float-end\">${job.progress || 0}%</span>\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"progress progress-compact mb-2\">\n                            <div\n                              class=\"progress-bar ${this.getProgressClass(job.progress)} progress-bar-striped progress-bar-animated\"\n                              style=\"width: ${job.progress || 0}%\"\n                            ></div>\n                          </div>\n                          <small class=\"text-light\">${job.currentStep || 'Initializing...'}</small>\n                        </div>\n                      </div>\n                    </div>\n\n                    <!-- Quick Stats -->\n                    <div class=\"col-md-4\">\n                      <div class=\"card bg-dark compact-card\">\n                        <div class=\"card-header\">\n                          <i class=\"fas fa-info-circle me-1\"></i>\n                          Stats\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"stats-row\">\n                            <div class=\"stat-item\">\n                              <div class=\"stat-value text-primary\">${this.calculateDuration(job)}</div>\n                              <div class=\"stat-label\">Duration</div>\n                            </div>\n                            <div class=\"stat-item\">\n                              <div class=\"stat-value text-info\">7/7</div>\n                              <div class=\"stat-label\">Steps</div>\n                            </div>\n                            <div class=\"stat-item\">\n                              <div class=\"stat-value text-warning\">ynlv</div>\n                              <div class=\"stat-label\">Worker</div>\n                            </div>\n                            <div class=\"stat-item\">\n                              <div class=\"stat-value text-success\">Normal</div>\n                              <div class=\"stat-label\">Priority</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <!-- Parameters -->\n                  <div class=\"card bg-dark compact-card\">\n                    <div class=\"card-header section-toggle\" data-bs-toggle=\"collapse\" data-bs-target=\"#params-section\">\n                      <i class=\"fas fa-cog me-1\"></i>\n                      Job Parameters\n                      <i class=\"fas fa-chevron-down float-end\"></i>\n                    </div>\n                    <div id=\"params-section\" class=\"collapse show\">\n                      <div class=\"card-body\">\n                        <div class=\"param-inline\">\n                          <div class=\"param-badge\">\n                            <i class=\"fas fa-globe\"></i>\n                            <span class=\"label\">Country:</span>\n                            <span class=\"value\">${job.parameters?.country || job.params?.country || 'N/A'}</span>\n                          </div>\n                          <div class=\"param-badge\">\n                            <i class=\"fas fa-tv\"></i>\n                            <span class=\"label\">Platform:</span>\n                            <span class=\"value\">${job.parameters?.platform || job.params?.platform || 'N/A'}</span>\n                          </div>\n                          <div class=\"param-badge\">\n                            <i class=\"fas fa-film\"></i>\n                            <span class=\"label\">Genre:</span>\n                            <span class=\"value\">${job.parameters?.genre || job.params?.genre || 'N/A'}</span>\n                          </div>\n                          <div class=\"param-badge\">\n                            <i class=\"fas fa-tag\"></i>\n                            <span class=\"label\">Content Type:</span>\n                            <span class=\"value\">${job.parameters?.contentType || job.params?.contentType || 'N/A'}</span>\n                          </div>\n                          <div class=\"param-badge\">\n                            <i class=\"fas fa-palette\"></i>\n                            <span class=\"label\">Template:</span>\n                            <span class=\"value\">${job.parameters?.template || job.params?.template || 'Default'}</span>\n                          </div>\n                          ${\n                              job.workerId\n                                  ? `\n                          <div class=\"param-badge\">\n                            <i class=\"fas fa-user\"></i>\n                            <span class=\"label\">Worker ID:</span>\n                            <span class=\"value\">${job.workerId}</span>\n                          </div>\n                          `\n                                  : ''\n                          }\n                          ${\n                              job.creatomateId\n                                  ? `\n                          <div class=\"param-badge\">\n                            <i class=\"fas fa-video\"></i>\n                            <span class=\"label\">Creatomate ID:</span>\n                            <span class=\"value\">${job.creatomateId}</span>\n                          </div>\n                          `\n                                  : ''\n                          }\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <!-- Process Timeline -->\n                  <div class=\"card bg-dark compact-card\">\n                    <div class=\"card-header section-toggle\" data-bs-toggle=\"collapse\" data-bs-target=\"#timeline-section\">\n                      <i class=\"fas fa-list-check me-1\"></i>\n                      Process Timeline\n                      <i class=\"fas fa-chevron-down float-end\"></i>\n                    </div>\n                    <div id=\"timeline-section\" class=\"collapse show\">\n                      <div class=\"card-body\">\n                        <div class=\"timeline-compact\">\n                          <div class=\"timeline-step completed\">\n                            <div class=\"step-icon\">📊</div>\n                            <div class=\"step-title\">Database Extraction</div>\n                            <div class=\"step-status\">Done 9/2/2025, 12:45:21 AM</div>\n                          </div>\n                          <div class=\"timeline-step completed\">\n                            <div class=\"step-icon\">📝</div>\n                            <div class=\"step-title\">Script Generation</div>\n                            <div class=\"step-status\">Done 9/2/2025, 12:45:21 AM</div>\n                          </div>\n                          <div class=\"timeline-step completed\">\n                            <div class=\"step-icon\">🎨</div>\n                            <div class=\"step-title\">Asset Preparation</div>\n                            <div class=\"step-status\">Done 9/2/2025, 12:45:21 AM</div>\n                          </div>\n                          <div class=\"timeline-step completed\">\n                            <div class=\"step-icon\">🎬</div>\n                            <div class=\"step-title\">HeyGen Video Creation</div>\n                            <div class=\"step-status\">Done 9/2/2025, 12:45:21 AM</div>\n                          </div>\n                          <div class=\"timeline-step completed\">\n                            <div class=\"step-icon\">⏳</div>\n                            <div class=\"step-title\">HeyGen Processing</div>\n                            <div class=\"step-status\">Done 9/2/2025, 12:45:21 AM</div>\n                          </div>\n                          <div class=\"timeline-step completed\">\n                            <div class=\"step-icon\">📱</div>\n                            <div class=\"step-title\">Scroll Video Generation</div>\n                            <div class=\"step-status\">Done 9/2/2025, 12:45:21 AM</div>\n                          </div>\n                          <div class=\"timeline-step completed\">\n                            <div class=\"step-icon\">🎞️</div>\n                            <div class=\"step-title\">Creatomate Assembly</div>\n                            <div class=\"step-status\">Ready</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <!-- Compact Video Result Section -->\n                  ${\n                      job.videoUrl || job.creatomateId\n                          ? `\n                  <div class=\"card bg-dark compact-card\">\n                    <div class=\"card-header py-2\">\n                      <div class=\"d-flex align-items-center justify-content-between\">\n                        <div class=\"d-flex align-items-center\">\n                          <i class=\"fas fa-film me-2 text-primary\"></i>\n                          <span class=\"fw-bold\">Video Result</span>\n                          <span class=\"badge bg-success ms-2\">Ready</span>\n                        </div>\n                        <div class=\"d-flex gap-1\">\n                          <button class=\"btn btn-sm btn-outline-primary\">\n                            <i class=\"fas fa-sync-alt me-1\"></i>\n                            Refresh Status\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"card-body py-2\">\n                      ${\n                          job.creatomateId\n                              ? `\n                      <!-- Compact Creatomate Info -->\n                      <div class=\"mb-2\">\n                        <div class=\"d-flex align-items-center text-sm\">\n                          <span class=\"text-light me-2\">ID:</span>\n                          <code class=\"text-info small\">${job.creatomateId}</code>\n                        </div>\n                      </div>\n                      `\n                              : ''\n                      }\n\n                      ${\n                          job.videoUrl\n                              ? `\n                      <!-- Compact Video Player -->\n                      <div class=\"row g-2\">\n                        <div class=\"col-md-7\">\n                          <div class=\"video-container-compact\">\n                            <video\n                              controls\n                              preload=\"metadata\"\n                              muted\n                              playsinline\n                              class=\"w-100\"\n                              style=\"max-height: 580px; border-radius: 6px; position: relative; z-index: 2\"\n                            >\n                              <source src=\"${job.videoUrl}\" type=\"video/mp4\" />\n                              Your browser does not support the video tag.\n                            </video>\n                          </div>\n                        </div>\n                        <div class=\"col-md-5\">\n                          <div class=\"d-grid gap-1\">\n                            <a href=\"${job.videoUrl}\" download class=\"btn btn-sm btn-success\">\n                              <i class=\"fas fa-download me-1\"></i>\n                              Download\n                            </a>\n                            <button onclick=\"navigator.clipboard.writeText('${job.videoUrl}')\" class=\"btn btn-sm btn-outline-info\">\n                              <i class=\"fas fa-copy me-1\"></i>\n                              Copy URL\n                            </button>\n                            <button onclick=\"document.querySelector('video').requestFullscreen()\" class=\"btn btn-sm btn-outline-secondary\">\n                              <i class=\"fas fa-expand me-1\"></i>\n                              Fullscreen\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                      `\n                              : ''\n                      }\n                    </div>\n                  </div>\n                  `\n                          : ''\n                  }\n\n                  <!-- Error Information -->\n                  ${\n                      job.error\n                          ? `\n                  <div class=\"card bg-dark border-danger compact-card\">\n                    <div class=\"card-header bg-danger\">\n                      <i class=\"fas fa-exclamation-triangle me-1\"></i>\n                      Error Details\n                    </div>\n                    <div class=\"card-body\">\n                      <div class=\"text-light\" style=\"font-size: 0.8rem\">\n                        ${job.error}\n                      </div>\n                    </div>\n                  </div>\n                  `\n                          : ''\n                  }\n                </div>\n              </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Create action buttons based on job status\n     * @param {Object} job - Job data\n     * @returns {string} Action buttons HTML\n     */\n    createActionButtons(job) {\n        const buttons = [];\n\n        if (job.status === 'processing' || job.status === 'pending') {\n            buttons.push(`\n                <button class=\"btn btn-warning me-2\" onclick=\"cancelJob('${job.id}')\">\n                    ⏹️ Cancel Job\n                </button>\n            `);\n        }\n\n        if (job.status === 'failed') {\n            buttons.push(`\n                <button class=\"btn btn-primary me-2\" onclick=\"retryJob('${job.id}')\">\n                    🔄 Retry Job\n                </button>\n            `);\n        }\n\n        buttons.push(`\n            <button class=\"btn btn-outline-secondary me-2\" onclick=\"refreshJobData('${job.id}')\">\n                🔄 Refresh\n            </button>\n        `);\n\n        return buttons.join('');\n    }\n\n    /**\n     * Create timeline HTML\n     * @param {Object} job - Job data\n     * @returns {string} Timeline HTML\n     */\n    createTimeline(job) {\n        const events = [];\n\n        events.push({\n            time: job.createdAt,\n            status: 'created',\n            message: 'Job created and queued'\n        });\n\n        if (job.startedAt) {\n            events.push({\n                time: job.startedAt,\n                status: 'started',\n                message: 'Job processing started'\n            });\n        }\n\n        if (job.completedAt) {\n            events.push({\n                time: job.completedAt,\n                status: 'completed',\n                message: 'Job completed successfully'\n            });\n        }\n\n        return events\n            .map(\n                (event) => `\n            <div class=\"timeline-item mb-3\">\n                <div class=\"d-flex align-items-start\">\n                    <div class=\"timeline-icon me-3\">\n                        ${this.getStatusIcon(event.status)}\n                    </div>\n                    <div class=\"timeline-content\">\n                        <p class=\"mb-1 fw-medium\">${event.message}</p>\n                        <small class=\"text-light\">${this.formatDate(event.time)}</small>\n                    </div>\n                </div>\n            </div>\n        `\n            )\n            .join('');\n    }\n\n    /**\n     * Create video result section\n     * @param {Object} job - Job data\n     * @returns {string} Video result HTML\n     */\n    createVideoResult(job) {\n        return `\n            <div class=\"card mb-4\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\">🎬 Video Result</h5>\n                </div>\n                <div class=\"card-body\">\n                    <video controls class=\"w-100 mb-3\" style=\"max-height: 400px;\">\n                        <source src=\"${job.videoUrl}\" type=\"video/mp4\">\n                        Your browser does not support the video tag.\n                    </video>\n                    <div class=\"d-flex gap-2\">\n                        <a href=\"${job.videoUrl}\" target=\"_blank\" class=\"btn btn-primary\">\n                            🔗 Open Video\n                        </a>\n                        <a href=\"${job.videoUrl}\" download class=\"btn btn-outline-secondary\">\n                            💾 Download\n                        </a>\n                        <button class=\"btn btn-outline-info\" onclick=\"copyToClipboard('${job.videoUrl}')\">\n                            📋 Copy URL\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Start auto-refresh timer for active jobs\n     */\n    startAutoRefresh() {\n        this.stopAutoRefresh();\n\n        if (this.jobData && ['pending', 'processing'].includes(this.jobData.status)) {\n            this.refreshTimer = setInterval(() => {\n                this.refreshJobData(this.currentJobId);\n            }, this.refreshInterval);\n\n            console.log(`📄 Auto-refresh started for job ${this.currentJobId}`);\n        }\n    }\n\n    /**\n     * Stop auto-refresh timer\n     */\n    stopAutoRefresh() {\n        if (this.refreshTimer) {\n            clearInterval(this.refreshTimer);\n            this.refreshTimer = null;\n        }\n    }\n\n    /**\n     * Refresh job data\n     * @param {string} jobId - Job ID to refresh\n     */\n    async refreshJobData(jobId) {\n        try {\n            await this.loadJobData(jobId);\n\n            // Re-render if we're still on the same job\n            if (this.currentJobId === jobId) {\n                const container = document.querySelector('.job-detail-page').parentElement;\n                await this.render(container, { jobId });\n            }\n        } catch (error) {\n            console.error('📄 Failed to refresh job data:', error);\n        }\n    }\n\n    /**\n     * Render error state\n     * @param {HTMLElement} container - Container element\n     * @param {string} message - Error message\n     */\n    renderError(container, message) {\n        container.innerHTML = `\n            <div class=\"job-detail-page\">\n                <div class=\"container-fluid\">\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                        <div>\n                            <button class=\"btn btn-outline-secondary me-3\" onclick=\"history.back()\">\n                                ← Back\n                            </button>\n                            <h1 class=\"h3 mb-0\">Job Not Found</h1>\n                        </div>\n                        <div class=\"nav-links\">\n                            <a href=\"/dashboard\" class=\"btn btn-outline-primary me-2\">Dashboard</a>\n                        </div>\n                    </div>\n                    \n                    <div class=\"alert alert-danger\">\n                        <h4 class=\"alert-heading\">❌ Error</h4>\n                        <p class=\"mb-0\">${message}</p>\n                        <hr>\n                        <a href=\"/dashboard\" class=\"btn btn-primary\">Return to Dashboard</a>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Handle page activation\n     */\n    activate(params) {\n        console.log(`📄 JobDetail activated for job: ${params.jobId}`);\n    }\n\n    /**\n     * Handle page deactivation\n     */\n    deactivate() {\n        this.stopAutoRefresh();\n        console.log('📄 JobDetail deactivated');\n    }\n\n    /**\n     * Get status CSS class\n     * @param {string} status - Job status\n     * @returns {string} CSS class\n     */\n    getStatusClass(status) {\n        const classes = {\n            pending: 'bg-warning',\n            processing: 'bg-info',\n            completed: 'bg-success',\n            failed: 'bg-danger',\n            cancelled: 'bg-secondary'\n        };\n        return classes[status] || 'bg-secondary';\n    }\n\n    /**\n     * Get status icon\n     * @param {string} status - Job status\n     * @returns {string} Icon\n     */\n    getStatusIcon(status) {\n        const icons = {\n            created: '➕',\n            started: '▶️',\n            pending: '⏳',\n            processing: '🔄',\n            completed: '✅',\n            failed: '❌',\n            cancelled: '⏹️'\n        };\n        return icons[status] || '📄';\n    }\n\n    /**\n     * Get progress bar CSS class\n     * @param {number} progress - Progress percentage\n     * @returns {string} CSS class\n     */\n    getProgressClass(progress) {\n        if (progress >= 100) {\n            return 'bg-success';\n        }\n        if (progress >= 75) {\n            return 'bg-info';\n        }\n        if (progress >= 50) {\n            return 'bg-warning';\n        }\n        return 'bg-primary';\n    }\n\n    /**\n     * Format date for display\n     * @param {string} dateString - ISO date string\n     * @returns {string} Formatted date\n     */\n    formatDate(dateString) {\n        if (!dateString) {\n            return 'N/A';\n        }\n        return new Date(dateString).toLocaleString();\n    }\n\n    /**\n     * Calculate job duration\n     * @param {Object} job - Job data\n     * @returns {string} Duration string\n     */\n    calculateDuration(job) {\n        if (!job.startedAt) {\n            return 'Not started';\n        }\n\n        const start = new Date(job.startedAt);\n        const end = job.completedAt ? new Date(job.completedAt) : new Date();\n        const duration = end - start;\n\n        return UIManager.formatDuration(duration);\n    }\n\n    /**\n     * Cleanup resources\n     */\n    cleanup() {\n        this.stopAutoRefresh();\n        console.log('📄 JobDetail Page cleaned up');\n    }\n}\n\n// Global functions for button actions (called from template)\nwindow.cancelJob = async (jobId) => {\n    if (confirm('Are you sure you want to cancel this job?')) {\n        try {\n            const result = await JobManager.cancelJob(jobId);\n            if (result) {\n                location.reload();\n            }\n        } catch (error) {\n            alert(`Failed to cancel job: ${error.message}`);\n        }\n    }\n};\n\nwindow.retryJob = (_jobId) => {\n    alert('Retry functionality not yet implemented');\n};\n\nwindow.refreshJobData = (_jobId) => {\n    location.reload();\n};\n\nwindow.checkCreatomateStatus = async (creatomateId) => {\n    try {\n        const result = await APIService.getCreatomateStatus(creatomateId);\n        if (result.success) {\n            alert(`Creatomate Status: ${result.status}\\nProgress: ${result.progress || 'N/A'}%`);\n        } else {\n            alert(`Error: ${result.message}`);\n        }\n    } catch (error) {\n        alert(`Error checking status: ${error.message}`);\n    }\n};\n\nwindow.copyToClipboard = async (text) => {\n    try {\n        await navigator.clipboard.writeText(text);\n        alert('URL copied to clipboard!');\n    } catch (error) {\n        alert('Failed to copy URL');\n    }\n};\n\n// Export singleton instance\nexport default new JobDetailPage();\n","/**\r\n * QueuePage - Dedicated page for queue management and job monitoring\r\n * Provides comprehensive real-time queue visualization and management\r\n */\r\n\r\nimport UIManager from '../components/UIManager.js';\r\nimport APIService from '../services/APIService.js';\r\nimport RealtimeService from '../services/RealtimeService.js';\r\nimport Router from '../core/Router.js';\r\n\r\nexport class QueuePage {\r\n    constructor() {\r\n        this.jobs = [];\r\n        this.queueStats = {};\r\n        this.refreshTimer = null;\r\n        this.refreshInterval = 5000; // 5 seconds\r\n        this.currentFilter = 'all';\r\n        this.isInitialized = false;\r\n\r\n        // Make Router available globally for onclick handlers\r\n        window.Router = Router;\r\n    }\r\n\r\n    /**\r\n     * Render the queue page\r\n     * @param {HTMLElement} container - Container to render into\r\n     */\r\n    async render(container) {\r\n        if (!container) {\r\n            console.error('📋 QueuePage: No container provided');\r\n            return;\r\n        }\r\n\r\n        // Show loading state first\r\n        container.innerHTML = this.createLoadingTemplate();\r\n\r\n        try {\r\n            // Load initial data\r\n            await this.loadQueueData();\r\n\r\n            // Render queue interface\r\n            container.innerHTML = this.createQueueTemplate();\r\n\r\n            // Set up event listeners\r\n            this.setupEventListeners();\r\n\r\n            // Start real-time updates\r\n            this.startRealTimeUpdates();\r\n\r\n            console.log('📋 Queue Page rendered successfully');\r\n            this.isInitialized = true;\r\n        } catch (error) {\r\n            console.error('📋 Queue Page render error:', error);\r\n            this.renderError(container, error.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create loading template\r\n     * @returns {string} Loading HTML\r\n     */\r\n    createLoadingTemplate() {\r\n        return `\r\n            <div class=\"queue-page\">\r\n                <div class=\"container-fluid\">\r\n                    <!-- Header -->\r\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n                        <div>\r\n                            <h1 class=\"h3 mb-0\">\r\n                                <i class=\"fas fa-tasks me-2\"></i>\r\n                                Queue Management\r\n                            </h1>\r\n                            <p class=\"text-light mb-0\">Monitor and manage video generation jobs</p>\r\n                        </div>\r\n                        <div class=\"nav-links\">\r\n                            <a href=\"/dashboard\" class=\"btn btn-outline-primary me-2 nav-link\" data-route=\"/dashboard\">\r\n                                <i class=\"fas fa-home me-1\"></i>Dashboard\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Loading State -->\r\n                    <div class=\"text-center py-5\">\r\n                        <div class=\"spinner-border text-primary mb-3\" role=\"status\">\r\n                            <span class=\"visually-hidden\">Loading...</span>\r\n                        </div>\r\n                        <p class=\"text-light\">Loading queue data...</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Create main queue template\r\n     * @returns {string} Queue page HTML\r\n     */\r\n    createQueueTemplate() {\r\n        return `\r\n            <div class=\"queue-page\">\r\n                <div class=\"container-fluid\">\r\n                    <!-- Header with Stats -->\r\n                    <div class=\"row mb-4\">\r\n                        <div class=\"col-md-8\">\r\n                            <h1 class=\"h3 mb-0\">\r\n                                <i class=\"fas fa-tasks me-2\"></i>\r\n                                Queue Management\r\n                            </h1>\r\n                            <p class=\"text-light mb-0\">Monitor and manage video generation jobs</p>\r\n                        </div>\r\n                        <div class=\"col-md-4 text-end\">\r\n                            <a href=\"/dashboard\" class=\"btn btn-outline-primary me-2 nav-link\" data-route=\"/dashboard\">\r\n                                <i class=\"fas fa-home me-1\"></i>Dashboard\r\n                            </a>\r\n                            <button id=\"refresh-queue\" class=\"btn btn-primary\">\r\n                                <i class=\"fas fa-sync-alt me-1\"></i>Refresh\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Queue Statistics Cards -->\r\n                    <div class=\"row mb-4\">\r\n                        <div class=\"col-md-3\">\r\n                            <div class=\"card bg-dark border-warning\">\r\n                                <div class=\"card-body text-center\">\r\n                                    <div class=\"display-6 text-warning\" id=\"stat-pending\">0</div>\r\n                                    <div class=\"text-light\">⏳ Pending Jobs</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                            <div class=\"card bg-dark border-info\">\r\n                                <div class=\"card-body text-center\">\r\n                                    <div class=\"display-6 text-info\" id=\"stat-processing\">0</div>\r\n                                    <div class=\"text-light\">🔄 Processing</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                            <div class=\"card bg-dark border-success\">\r\n                                <div class=\"card-body text-center\">\r\n                                    <div class=\"display-6 text-success\" id=\"stat-completed\">0</div>\r\n                                    <div class=\"text-light\">✅ Completed</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                            <div class=\"card bg-dark border-danger\">\r\n                                <div class=\"card-body text-center\">\r\n                                    <div class=\"display-6 text-danger\" id=\"stat-failed\">0</div>\r\n                                    <div class=\"text-light\">❌ Failed</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Worker Pool Status -->\r\n                    <div class=\"row mb-4\">\r\n                        <div class=\"col-12\">\r\n                            <div class=\"card bg-dark\">\r\n                                <div class=\"card-header\">\r\n                                    <h5 class=\"mb-0\">\r\n                                        <i class=\"fas fa-users me-2\"></i>Worker Pool Status\r\n                                    </h5>\r\n                                </div>\r\n                                <div class=\"card-body\">\r\n                                    <div class=\"row text-center\">\r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"border-end\">\r\n                                                <div class=\"h4 text-primary\" id=\"workers-active\">0</div>\r\n                                                <div class=\"text-light\">🏃 Active Workers</div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"border-end\">\r\n                                                <div class=\"h4 text-success\" id=\"workers-available\">3</div>\r\n                                                <div class=\"text-light\">💤 Available</div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"h4 text-info\" id=\"workers-concurrent\">Yes</div>\r\n                                            <div class=\"text-light\">⚙️ Concurrent Mode</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Job Controls and Filters -->\r\n                    <div class=\"row mb-4\">\r\n                        <div class=\"col-md-8\">\r\n                            <div class=\"btn-group me-3\" role=\"group\">\r\n                                <button type=\"button\" class=\"btn btn-outline-secondary filter-btn active\" data-filter=\"all\">\r\n                                    All Jobs <span id=\"count-all\" class=\"badge bg-primary\">0</span>\r\n                                </button>\r\n                                <button type=\"button\" class=\"btn btn-outline-warning filter-btn\" data-filter=\"pending\">\r\n                                    Pending <span id=\"count-pending\" class=\"badge bg-warning\">0</span>\r\n                                </button>\r\n                                <button type=\"button\" class=\"btn btn-outline-info filter-btn\" data-filter=\"processing\">\r\n                                    Processing <span id=\"count-processing\" class=\"badge bg-info\">0</span>\r\n                                </button>\r\n                                <button type=\"button\" class=\"btn btn-outline-success filter-btn\" data-filter=\"completed\">\r\n                                    Completed <span id=\"count-completed\" class=\"badge bg-success\">0</span>\r\n                                </button>\r\n                                <button type=\"button\" class=\"btn btn-outline-danger filter-btn\" data-filter=\"failed\">\r\n                                    Failed <span id=\"count-failed\" class=\"badge bg-danger\">0</span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-4 text-end\">\r\n                            <button id=\"pause-queue\" class=\"btn btn-outline-warning me-2\">\r\n                                <i class=\"fas fa-pause me-1\"></i>Pause Queue\r\n                            </button>\r\n                            <button id=\"clear-queue\" class=\"btn btn-outline-danger\">\r\n                                <i class=\"fas fa-trash me-1\"></i>Clear Failed\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Jobs List -->\r\n                    <div class=\"card bg-dark\">\r\n                        <div class=\"card-header\">\r\n                            <h5 class=\"mb-0\">\r\n                                <i class=\"fas fa-list me-2\"></i>Job Queue \r\n                                <span id=\"total-jobs-count\" class=\"badge bg-primary ms-2\">0</span>\r\n                            </h5>\r\n                        </div>\r\n                        <div class=\"card-body p-0\">\r\n                            <div id=\"jobs-container\" class=\"jobs-list\">\r\n                                <!-- Jobs will be populated here -->\r\n                            </div>\r\n                            \r\n                            <!-- Empty State -->\r\n                            <div id=\"empty-queue\" class=\"text-center py-5 d-none\">\r\n                                <i class=\"fas fa-inbox fa-3x text-light mb-3\"></i>\r\n                                <h5 class=\"text-light\">No jobs in queue</h5>\r\n                                <p class=\"text-light\">Generate a video to see jobs appear here</p>\r\n                                <a href=\"/dashboard\" class=\"btn btn-primary nav-link\" data-route=\"/dashboard\">\r\n                                    <i class=\"fas fa-plus me-1\"></i>Generate Video\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <style>\r\n                .jobs-list {\r\n                    max-height: 600px;\r\n                    overflow-y: auto;\r\n                }\r\n                \r\n                .job-item {\r\n                    border-bottom: 1px solid #495057;\r\n                    padding: 1rem;\r\n                    transition: background-color 0.2s;\r\n                }\r\n                \r\n                .job-item:hover {\r\n                    background-color: rgba(255, 255, 255, 0.05);\r\n                }\r\n                \r\n                .job-item:last-child {\r\n                    border-bottom: none;\r\n                }\r\n                \r\n                .status-badge {\r\n                    font-size: 0.8rem;\r\n                    padding: 0.25rem 0.5rem;\r\n                }\r\n                \r\n                .filter-btn.active {\r\n                    background-color: #0d6efd;\r\n                    border-color: #0d6efd;\r\n                    color: white;\r\n                }\r\n            </style>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Load queue data from API\r\n     */\r\n    async loadQueueData() {\r\n        try {\r\n            console.log('📋 Loading queue data...');\r\n\r\n            // Load queue statistics with fallback\r\n            try {\r\n                const statsResponse = await APIService.get('/api/queue/status');\r\n                if (statsResponse.success) {\r\n                    this.queueStats = statsResponse.stats;\r\n                }\r\n            } catch (statsError) {\r\n                console.warn('📋 Failed to load queue stats, using defaults:', statsError.message);\r\n                this.queueStats = {\r\n                    pending: 0,\r\n                    processing: 0,\r\n                    completed: 0,\r\n                    failed: 0,\r\n                    activeWorkers: 0,\r\n                    availableWorkers: 3,\r\n                    concurrentProcessing: true\r\n                };\r\n            }\r\n\r\n            // Load all jobs with fallback\r\n            try {\r\n                const jobsResponse = await APIService.get('/api/queue/jobs');\r\n                if (jobsResponse.success) {\r\n                    this.jobs = jobsResponse.jobs || [];\r\n                }\r\n            } catch (jobsError) {\r\n                console.warn('📋 Failed to load jobs, using empty array:', jobsError.message);\r\n                this.jobs = [];\r\n            }\r\n\r\n            console.log(`📋 Loaded ${this.jobs.length} jobs and queue stats`);\r\n        } catch (error) {\r\n            console.error('📋 Failed to load queue data:', error);\r\n            // Don't throw if we have fallback data\r\n            if (!this.queueStats) {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the UI with current data\r\n     */\r\n    updateUI() {\r\n        this.updateStats();\r\n        this.updateJobsList();\r\n        console.log('📋 UI updated with latest queue data');\r\n    }\r\n\r\n    /**\r\n     * Update statistics display\r\n     */\r\n    updateStats() {\r\n        const stats = this.queueStats;\r\n\r\n        // Update main stats - with safety checks\r\n        const pendingEl = document.getElementById('stat-pending');\r\n        const processingEl = document.getElementById('stat-processing');\r\n        const completedEl = document.getElementById('stat-completed');\r\n        const failedEl = document.getElementById('stat-failed');\r\n\r\n        if (pendingEl) pendingEl.textContent = stats.pending || 0;\r\n        if (processingEl) processingEl.textContent = stats.processing || 0;\r\n        if (completedEl) completedEl.textContent = stats.completed || 0;\r\n        if (failedEl) failedEl.textContent = stats.failed || 0;\r\n\r\n        // Update worker stats - with safety checks\r\n        const activeEl = document.getElementById('workers-active');\r\n        const availableEl = document.getElementById('workers-available');\r\n        const concurrentEl = document.getElementById('workers-concurrent');\r\n\r\n        if (activeEl) activeEl.textContent = stats.activeWorkers || 0;\r\n        if (availableEl) availableEl.textContent = stats.availableWorkers || 0;\r\n        if (concurrentEl) concurrentEl.textContent = stats.concurrentProcessing ? 'Yes' : 'No';\r\n\r\n        // Update filter counts - with safety checks\r\n        const counts = this.getJobCounts();\r\n        const countAllEl = document.getElementById('count-all');\r\n        const countPendingEl = document.getElementById('count-pending');\r\n        const countProcessingEl = document.getElementById('count-processing');\r\n        const countCompletedEl = document.getElementById('count-completed');\r\n        const countFailedEl = document.getElementById('count-failed');\r\n\r\n        if (countAllEl) countAllEl.textContent = counts.all;\r\n        if (countPendingEl) countPendingEl.textContent = counts.pending;\r\n        if (countProcessingEl) countProcessingEl.textContent = counts.processing;\r\n        if (countCompletedEl) countCompletedEl.textContent = counts.completed;\r\n        if (countFailedEl) countFailedEl.textContent = counts.failed;\r\n\r\n        const totalJobsEl = document.getElementById('total-jobs-count');\r\n        if (totalJobsEl) totalJobsEl.textContent = counts.all;\r\n    }\r\n\r\n    /**\r\n     * Update jobs list display\r\n     */\r\n    updateJobsList() {\r\n        const container = document.getElementById('jobs-container');\r\n        const emptyState = document.getElementById('empty-queue');\r\n\r\n        if (!container) return;\r\n\r\n        // Filter jobs based on current filter\r\n        const filteredJobs = this.filterJobs(this.jobs, this.currentFilter);\r\n\r\n        if (filteredJobs.length === 0) {\r\n            container.innerHTML = '';\r\n            emptyState?.classList.remove('d-none');\r\n            return;\r\n        }\r\n\r\n        emptyState?.classList.add('d-none');\r\n\r\n        // Sort jobs: processing first, then by creation date (newest first)\r\n        filteredJobs.sort((a, b) => {\r\n            if (a.status === 'processing' && b.status !== 'processing') return -1;\r\n            if (b.status === 'processing' && a.status !== 'processing') return 1;\r\n            return new Date(b.createdAt) - new Date(a.createdAt);\r\n        });\r\n\r\n        container.innerHTML = filteredJobs.map((job) => this.createJobItem(job)).join('');\r\n    }\r\n\r\n    /**\r\n     * Create HTML for a single job item\r\n     * @param {Object} job - Job data\r\n     * @returns {string} Job item HTML\r\n     */\r\n    createJobItem(job) {\r\n        const statusClass = this.getStatusClass(job.status);\r\n        const statusIcon = this.getStatusIcon(job.status);\r\n        const duration = this.calculateDuration(job);\r\n        const progress = job.progress || 0;\r\n\r\n        return `\r\n            <div class=\"job-item\" data-job-id=\"${job.id}\">\r\n                <div class=\"row align-items-center\">\r\n                    <div class=\"col-md-1\">\r\n                        <span class=\"badge ${statusClass} status-badge\">\r\n                            ${statusIcon} ${job.status.toUpperCase()}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                        <div class=\"text-light fw-medium\">${job.id.slice(-8)}</div>\r\n                        <small class=\"text-light\">${this.formatDate(job.createdAt)}</small>\r\n                    </div>\r\n                    <div class=\"col-md-3\">\r\n                        <div class=\"text-light\">${job.parameters?.genre || 'N/A'} • ${job.parameters?.platform || 'N/A'}</div>\r\n                        <small class=\"text-light\">${job.parameters?.country || 'N/A'}</small>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                        <div class=\"progress mb-1\" style=\"height: 6px;\">\r\n                            <div class=\"progress-bar ${this.getProgressClass(progress)}\" \r\n                                 style=\"width: ${progress}%\"></div>\r\n                        </div>\r\n                        <small class=\"text-light\">${progress}% • ${duration}</small>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                        <div class=\"text-light\">${job.currentStep || 'Queued'}</div>\r\n                        ${job.error ? `<small class=\"text-danger\">${job.error.slice(0, 50)}...</small>` : ''}\r\n                    </div>\r\n                    <div class=\"col-md-2 text-end\">\r\n                        <button class=\"btn btn-sm btn-outline-primary me-1\" onclick=\"viewJob('${job.id}')\">\r\n                            <i class=\"fas fa-eye\"></i>\r\n                        </button>\r\n                        ${\r\n                            job.status === 'failed'\r\n                                ? `\r\n                            <button class=\"btn btn-sm btn-outline-warning\" onclick=\"retryJob('${job.id}')\">\r\n                                <i class=\"fas fa-redo\"></i>\r\n                            </button>\r\n                        `\r\n                                : ''\r\n                        }\r\n                        ${\r\n                            ['pending', 'processing'].includes(job.status)\r\n                                ? `\r\n                            <button class=\"btn btn-sm btn-outline-danger\" onclick=\"cancelJob('${job.id}')\">\r\n                                <i class=\"fas fa-stop\"></i>\r\n                            </button>\r\n                        `\r\n                                : ''\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Set up event listeners\r\n     */\r\n    setupEventListeners() {\r\n        // Filter buttons\r\n        document.querySelectorAll('.filter-btn').forEach((btn) => {\r\n            btn.addEventListener('click', (e) => {\r\n                const filter = e.currentTarget.dataset.filter;\r\n                this.setFilter(filter);\r\n            });\r\n        });\r\n\r\n        // Refresh button\r\n        document.getElementById('refresh-queue')?.addEventListener('click', () => {\r\n            this.refreshQueue();\r\n        });\r\n\r\n        // Queue control buttons\r\n        document.getElementById('pause-queue')?.addEventListener('click', () => {\r\n            this.toggleQueue();\r\n        });\r\n\r\n        document.getElementById('clear-queue')?.addEventListener('click', () => {\r\n            this.clearFailedJobs();\r\n        });\r\n\r\n        // Real-time service updates\r\n        RealtimeService.addEventListener('queueUpdate', (event) => {\r\n            this.handleQueueUpdate(event.detail);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set current filter\r\n     * @param {string} filter - Filter type\r\n     */\r\n    setFilter(filter) {\r\n        this.currentFilter = filter;\r\n\r\n        // Update button states\r\n        document.querySelectorAll('.filter-btn').forEach((btn) => {\r\n            btn.classList.remove('active');\r\n        });\r\n        document.querySelector(`[data-filter=\"${filter}\"]`)?.classList.add('active');\r\n\r\n        // Update jobs display\r\n        this.updateJobsList();\r\n    }\r\n\r\n    /**\r\n     * Filter jobs by status\r\n     * @param {Array} jobs - Jobs array\r\n     * @param {string} filter - Filter type\r\n     * @returns {Array} Filtered jobs\r\n     */\r\n    filterJobs(jobs, filter) {\r\n        if (filter === 'all') return jobs;\r\n        return jobs.filter((job) => job.status === filter);\r\n    }\r\n\r\n    /**\r\n     * Get job counts by status\r\n     * @returns {Object} Job counts\r\n     */\r\n    getJobCounts() {\r\n        const counts = {\r\n            all: this.jobs.length,\r\n            pending: 0,\r\n            processing: 0,\r\n            completed: 0,\r\n            failed: 0\r\n        };\r\n\r\n        this.jobs.forEach((job) => {\r\n            if (counts[job.status] !== undefined) {\r\n                counts[job.status]++;\r\n            }\r\n        });\r\n\r\n        return counts;\r\n    }\r\n\r\n    /**\r\n     * Start real-time updates\r\n     */\r\n    startRealTimeUpdates() {\r\n        this.refreshTimer = setInterval(() => {\r\n            this.refreshQueue();\r\n        }, this.refreshInterval);\r\n\r\n        // Initialize real-time service if not already done\r\n        if (!RealtimeService.isInitialized) {\r\n            RealtimeService.init();\r\n        }\r\n\r\n        console.log('📋 Real-time updates started');\r\n    }\r\n\r\n    /**\r\n     * Stop real-time updates\r\n     */\r\n    stopRealTimeUpdates() {\r\n        if (this.refreshTimer) {\r\n            clearInterval(this.refreshTimer);\r\n            this.refreshTimer = null;\r\n        }\r\n        console.log('📋 Real-time updates stopped');\r\n    }\r\n\r\n    /**\r\n     * Refresh queue data\r\n     */\r\n    async refreshQueue() {\r\n        try {\r\n            await this.loadQueueData();\r\n            this.updateUI();\r\n        } catch (error) {\r\n            console.error('📋 Failed to refresh queue:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle queue update from real-time service\r\n     * @param {Object} updateData - Update data\r\n     */\r\n    handleQueueUpdate(updateData) {\r\n        console.log('📋 Received queue update:', updateData);\r\n        // Update specific job or refresh entire queue\r\n        this.refreshQueue();\r\n    }\r\n\r\n    /**\r\n     * Toggle queue processing\r\n     */\r\n    async toggleQueue() {\r\n        const button = document.getElementById('pause-queue');\r\n        const originalText = button?.innerHTML;\r\n\r\n        try {\r\n            // Show loading state\r\n            if (button) {\r\n                button.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i>Processing...';\r\n                button.disabled = true;\r\n            }\r\n\r\n            const response = await APIService.post('/api/queue/toggle');\r\n            if (response.success) {\r\n                const action = response.isProcessing ? 'resumed' : 'paused';\r\n                UIManager.addStatusMessage('success', '⏸️', `Queue processing ${action}`);\r\n\r\n                // Update button text based on new state\r\n                if (button) {\r\n                    const newText = response.isProcessing\r\n                        ? '<i class=\"fas fa-pause me-1\"></i>Pause Queue'\r\n                        : '<i class=\"fas fa-play me-1\"></i>Resume Queue';\r\n                    button.innerHTML = newText;\r\n                }\r\n\r\n                this.refreshQueue();\r\n            }\r\n        } catch (error) {\r\n            console.error('📋 Failed to toggle queue:', error);\r\n            UIManager.addStatusMessage('error', '❌', 'Failed to toggle queue');\r\n        } finally {\r\n            // Restore button state\r\n            if (button) {\r\n                if (originalText) button.innerHTML = originalText;\r\n                button.disabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear failed jobs\r\n     */\r\n    async clearFailedJobs() {\r\n        if (!confirm('Clear all failed jobs? This cannot be undone.')) return;\r\n\r\n        try {\r\n            const response = await APIService.post('/api/queue/clear-failed');\r\n            if (response.success) {\r\n                UIManager.addStatusMessage('success', '🗑️', 'Failed jobs cleared');\r\n                this.refreshQueue();\r\n            }\r\n        } catch (error) {\r\n            console.error('📋 Failed to clear failed jobs:', error);\r\n            UIManager.addStatusMessage('error', '❌', 'Failed to clear jobs');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render error state\r\n     * @param {HTMLElement} container - Container element\r\n     * @param {string} message - Error message\r\n     */\r\n    renderError(container, message) {\r\n        container.innerHTML = `\r\n            <div class=\"queue-page\">\r\n                <div class=\"container-fluid\">\r\n                    <div class=\"alert alert-danger\">\r\n                        <h4 class=\"alert-heading\">❌ Error</h4>\r\n                        <p class=\"mb-0\">${message}</p>\r\n                        <hr>\r\n                        <button onclick=\"location.reload()\" class=\"btn btn-primary\">Retry</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Page activation\r\n     */\r\n    activate() {\r\n        document.title = 'Queue Management - StreamGank';\r\n        console.log('📋 Queue Page activated');\r\n    }\r\n\r\n    /**\r\n     * Page deactivation\r\n     */\r\n    deactivate() {\r\n        this.stopRealTimeUpdates();\r\n        console.log('📋 Queue Page deactivated');\r\n    }\r\n\r\n    /**\r\n     * Cleanup resources\r\n     */\r\n    cleanup() {\r\n        this.stopRealTimeUpdates();\r\n        this.isInitialized = false;\r\n        console.log('📋 Queue Page cleaned up');\r\n    }\r\n\r\n    // Helper methods\r\n    getStatusClass(status) {\r\n        const classes = {\r\n            pending: 'bg-warning text-dark',\r\n            processing: 'bg-info text-dark',\r\n            completed: 'bg-success',\r\n            failed: 'bg-danger',\r\n            cancelled: 'bg-secondary'\r\n        };\r\n        return classes[status] || 'bg-secondary';\r\n    }\r\n\r\n    getStatusIcon(status) {\r\n        const icons = {\r\n            pending: '⏳',\r\n            processing: '🔄',\r\n            completed: '✅',\r\n            failed: '❌',\r\n            cancelled: '⏹️'\r\n        };\r\n        return icons[status] || '📄';\r\n    }\r\n\r\n    getProgressClass(progress) {\r\n        if (progress >= 100) return 'bg-success';\r\n        if (progress >= 75) return 'bg-info';\r\n        if (progress >= 50) return 'bg-warning';\r\n        return 'bg-primary';\r\n    }\r\n\r\n    formatDate(dateString) {\r\n        if (!dateString) return 'N/A';\r\n        return new Date(dateString).toLocaleString();\r\n    }\r\n\r\n    calculateDuration(job) {\r\n        if (!job.startedAt) return 'Not started';\r\n        const start = new Date(job.startedAt);\r\n        const end = job.completedAt ? new Date(job.completedAt) : new Date();\r\n        const duration = end - start;\r\n        const minutes = Math.floor(duration / 60000);\r\n        const seconds = Math.floor((duration % 60000) / 1000);\r\n        return minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;\r\n    }\r\n}\r\n\r\n// Global functions for button actions\r\nwindow.viewJob = (jobId) => {\r\n    if (!jobId || jobId === 'undefined') {\r\n        console.error('❌ Invalid jobId:', jobId);\r\n        UIManager.addStatusMessage('error', '❌', 'Invalid job ID');\r\n        return;\r\n    }\r\n\r\n    console.log('🔍 Viewing job:', jobId);\r\n\r\n    // Use Router from the imported module (not window.Router)\r\n    try {\r\n        Router.navigate(`/job/${jobId}`);\r\n        console.log(`✅ Navigating to job detail page: ${jobId}`);\r\n    } catch (error) {\r\n        console.error('❌ Navigation failed:', error);\r\n        UIManager.addStatusMessage('error', '❌', 'Failed to navigate to job details');\r\n    }\r\n};\r\n\r\nwindow.retryJob = async (jobId) => {\r\n    if (confirm('Retry this job?')) {\r\n        try {\r\n            const response = await APIService.post(`/api/job/${jobId}/retry`);\r\n            if (response.success) {\r\n                UIManager.addStatusMessage('success', '🔄', 'Job retry initiated');\r\n                // Refresh page or update UI\r\n                location.reload();\r\n            }\r\n        } catch (error) {\r\n            UIManager.addStatusMessage('error', '❌', 'Failed to retry job');\r\n        }\r\n    }\r\n};\r\n\r\nwindow.cancelJob = async (jobId) => {\r\n    if (confirm('Cancel this job?')) {\r\n        try {\r\n            const response = await APIService.post(`/api/job/${jobId}/cancel`);\r\n            if (response.success) {\r\n                UIManager.addStatusMessage('success', '⏹️', 'Job cancelled');\r\n                location.reload();\r\n            }\r\n        } catch (error) {\r\n            UIManager.addStatusMessage('error', '❌', 'Failed to cancel job');\r\n        }\r\n    }\r\n};\r\n\r\n// Export singleton instance\r\nexport default new QueuePage();\r\n","/**\n * StreamGank Video Generator - Main App\n * Simple, Clean, Working SPA\n */\n\nimport Router from './core/Router.js';\nimport { DashboardPage } from './pages/Dashboard.js';\nimport { JobDetailPage } from './pages/JobDetail.js';\nimport { QueuePage } from './pages/QueuePage.js';\n\n/**\n * Main App Class\n */\nclass StreamGankApp {\n    constructor() {\n        this.currentPage = null;\n        console.log('🔧 StreamGankApp created');\n    }\n\n    /**\n     * Initialize the app\n     */\n    async init() {\n        console.log('🚀 Initializing StreamGank App...');\n\n        try {\n            // Setup routing\n            this.setupRoutes();\n\n            // Start router\n            Router.start();\n\n            console.log('✅ App initialized successfully');\n        } catch (error) {\n            console.error('❌ App initialization failed:', error);\n        }\n    }\n\n    /**\n     * Setup all routes\n     */\n    setupRoutes() {\n        console.log('🛤️ Setting up routes...');\n\n        // Job detail route (most specific first)\n        Router.addRoute('/job/:jobId', (params) => {\n            console.log('🎯 Job route matched:', params);\n            this.renderJobDetail(params.jobId);\n        });\n\n        // Queue route\n        Router.addRoute('/queue', () => {\n            console.log('🎯 Queue route');\n            this.renderQueue();\n        });\n\n        // Dashboard route\n        Router.addRoute('/dashboard', () => {\n            console.log('🎯 Dashboard route');\n            this.renderDashboard();\n        });\n\n        // Root route\n        Router.addRoute('/', () => {\n            console.log('🎯 Root route');\n            this.renderDashboard();\n        });\n\n        console.log('✅ Routes setup complete');\n    }\n\n    /**\n     * Get main content container\n     */\n    getMainContainer() {\n        return document.querySelector('.main-content') || document.body;\n    }\n\n    /**\n     * Render dashboard page\n     */\n    renderDashboard() {\n        console.log('🎨 Rendering Dashboard');\n\n        // Dashboard uses the existing HTML content - just activate it\n        // Don't pass container since Dashboard.render() doesn't need it\n        const dashboard = new DashboardPage();\n        dashboard.render();\n        dashboard.activate();\n\n        // Update navigation\n        this.updateNavigation('/dashboard');\n\n        this.currentPage = 'dashboard';\n    }\n\n    /**\n     * Render queue page\n     */\n    async renderQueue() {\n        console.log('🎨 Rendering Queue');\n\n        const container = this.getMainContainer();\n\n        // Create queue instance\n        const queue = new QueuePage();\n        await queue.render(container);\n        queue.activate();\n\n        // Update navigation\n        this.updateNavigation('/queue');\n\n        this.currentPage = 'queue';\n    }\n\n    /**\n     * Render job detail page\n     */\n    async renderJobDetail(jobId) {\n        console.log('🎨 Rendering Job Detail:', jobId);\n\n        if (!jobId) {\n            console.error('❌ No jobId provided');\n            Router.navigate('/dashboard');\n            return;\n        }\n\n        const container = this.getMainContainer();\n\n        // Create job detail instance\n        const jobDetail = new JobDetailPage();\n        await jobDetail.render(container, { jobId });\n        jobDetail.activate({ jobId });\n\n        // Update navigation\n        this.updateNavigation(`/job/${jobId}`);\n\n        this.currentPage = 'jobDetail';\n    }\n\n    /**\n     * Update navigation active states\n     */\n    updateNavigation(currentPath) {\n        // Remove all active states\n        document.querySelectorAll('.nav-link').forEach((link) => {\n            link.classList.remove('active');\n        });\n\n        // Add active state to current route\n        if (currentPath.startsWith('/job/')) {\n            // No specific nav item for job details\n            return;\n        }\n\n        const navLink = document.querySelector(`[data-route=\"${currentPath}\"]`);\n        if (navLink) {\n            navLink.classList.add('active');\n        }\n    }\n}\n\n// Initialize app when DOM is ready\nconsole.log('🚀 Main.js loaded');\n\nconst app = new StreamGankApp();\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        app.init();\n    });\n} else {\n    app.init();\n}\n\n// Global access for debugging\nwindow.StreamGankApp = app;\nwindow.Router = Router;\n\nexport default app;\n"],"names":["SimpleRouter","path","handler","paramNames","regexPath","match","paramName","regex","routePath","routeData","params","name","index","error","Router","FormManager","templateId","templateInfo","genre","countrySelect","currentCountry","country","cacheKey","response","APIService","templateSelect","option","e","platformSelect","refreshPreviewBtn","contentTypeRadios","radio","generateButton","checkedRadio","serieRadio","formData","DOMManager","hasChanges","netflixIndex","i","genreSelect","horrorIndex","countryCode","selectedPlatforms","checkbox","selectedGenres","templateValue","contentType","result","platforms","platformContainer","platform","checkboxItem","label","defaultPlatforms","platformValue","genres","genreContainer","displayName","value","genreValue","genreLower","key","errors","warnings","url","UIManager","validation","warning","previewUrl","urlValidation","data","movies","container","grid","loading","empty","movie","movieCard","card","posterUrl","title","year","rating","numericRating","_a","displayRating","baseUrl","englishGenre","cleanType","element","elementId","select","eventName","event","formManager","DashboardPage","_container","RealtimeService","hasFormManager","hasUIManager","JobManager","job","missing","field","jobId","jobData","previousStatus","previousProgress","attempts","maxAttempts","checkStatus","statusData","status","statusText","messageKey","progressPercent","timeoutKey","message","errorKey","networkErrorKey","entries","toRemove","JobManager$1","JobDetailPage","statusClass","statusIcon","_b","_c","_d","_e","_f","_g","_h","_i","_j","buttons","events","progress","dateString","start","duration","_jobId","creatomateId","text","QueuePage","statsResponse","statsError","jobsResponse","jobsError","stats","pendingEl","processingEl","completedEl","failedEl","activeEl","availableEl","concurrentEl","counts","countAllEl","countPendingEl","countProcessingEl","countCompletedEl","countFailedEl","totalJobsEl","emptyState","filteredJobs","b","btn","filter","jobs","updateData","button","originalText","action","newText","minutes","seconds","StreamGankApp","dashboard","queue","jobDetail","currentPath","link","navLink","app"],"mappings":"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"}