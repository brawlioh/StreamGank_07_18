# StreamGank - Railway Optimized Container
# Single container with Python + Node.js for Railway deployment
FROM mcr.microsoft.com/playwright/python:v1.54.0-jammy

# Set environment variables for Railway
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app
ENV NODE_ENV=production
ENV PORT=3000

# Set working directory
WORKDIR /app

# Install system dependencies and Node.js in one layer
RUN apt-get update && apt-get install -y \
    # Essential tools
    curl wget \
    # FFmpeg for video processing
    ffmpeg \
    # Add Node.js 20 LTS
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    # Clean up to reduce image size
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt \
    && pip cache purge

# Install Playwright browsers
RUN playwright install chromium \
    && playwright install-deps

# Copy and install Node.js dependencies
COPY frontend/package*.json ./frontend/
RUN cd frontend && npm install --only=production \
    && npm cache clean --force

# Create necessary directories (Railway ephemeral storage)
RUN mkdir -p assets videos screenshots clips covers \
    cloudinary creatomate heygen scroll_frames trailers \
    temp_videos responses test_output scripts frontend/logs

# Copy application code
COPY . .

# Railway-specific: Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# Railway will set PORT automatically, but expose for local testing
EXPOSE $PORT

# Build frontend and start the application (Railway compatible)
RUN cd frontend && npm run build
CMD ["node", "frontend/server.js"]
